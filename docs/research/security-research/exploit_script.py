import json
import os  # Added for dummy image creation/cleanup

import requests

# --- Configuration ---
BASE_URL = "http://localhost:7000"
ADMIN_USERNAME = "testuser"  # !! IMPORTANT: Replace with a valid admin username !!
ADMIN_PASSWORD = "testpassword"  # !! IMPORTANT: Replace with the admin's password !!

# --- API Endpoints ---
LOGIN_URL = f"{BASE_URL}/api/login"
DEBUG_USER_DATA_URL = f"{BASE_URL}/api/debug/user_data"
OLLAMA_CHAT_URL = f"{BASE_URL}/api/ollama/chat"
OLLAMA_ASSISTANT_TOOLS_URL = f"{BASE_URL}/api/ollama/assistant/tools"
OLLAMA_ASSISTANT_CONTEXT_URL = f"{BASE_URL}/api/ollama/assistant/context/test_path"


def login(username, password):
    """Attempts to log in and retrieve an access token."""
    print(f"Attempting to log in as {username}...")
    try:
        response = requests.post(
            LOGIN_URL,
            json={"username": username, "password": password},
            timeout=5,  # Add a timeout to prevent hanging
        )
        response.raise_for_status()  # Raise an exception for HTTP errors (4xx or 5xx)
        token_data = response.json()
        access_token = token_data.get("access_token")
        if access_token:
            print("Login successful. Access token obtained.")
            return access_token
        print("Login failed: Access token not found in response.")
        print(f"Response: {token_data}")
        return None
    except requests.exceptions.ConnectionError:
        print(
            f"Error: Could not connect to the backend at {BASE_URL}. Is the server running?",
        )
        return None
    except requests.exceptions.RequestException as e:
        print(f"Login failed due to a request error: {e}")
        if hasattr(e, "response") and e.response is not None:
            print(f"Response status code: {e.response.status_code}")
            print(f"Response body: {e.response.text}")
        return None


def capture_flag(access_token):
    """Uses the access token to request the debug user data endpoint and capture the flag."""
    print(f"Attempting to capture flag from {DEBUG_USER_DATA_URL}...")
    headers = {"Authorization": f"Bearer {access_token}"}
    try:
        response = requests.get(DEBUG_USER_DATA_URL, headers=headers, timeout=5)
        response.raise_for_status()

        user_data = response.json()
        flag = user_data.get("new_secret_flag")

        if flag:
            print("\n--- FLAG CAPTURED! ---")
            print(f"Flag: {flag}")
            print("----------------------")
            return flag
        print("Flag not found in the response.")
        print(f"Response: {json.dumps(user_data, indent=2)}")
        return None
    except requests.exceptions.ConnectionError:
        print(
            f"Error: Could not connect to the backend at {BASE_URL}. Is the server running?",
        )
        return None
    except requests.exceptions.RequestException as e:
        print(f"Failed to capture flag due to a request error: {e}")
        if hasattr(e, "response") and e.response is not None:
            print(f"Response status code: {e.response.status_code}")
            print(f"Response body: {e.response.text}")
        return None


def test_unauthenticated_access(url, method="GET", json_data=None):
    """Attempts to access a given URL without authentication."""
    print(f"\n[+] Attempting {method} request to {url} without authentication...")
    try:
        if method == "GET":
            response = requests.get(url, timeout=5)
        elif method == "POST":
            response = requests.post(url, json=json_data, timeout=5)
        else:
            print(f"Error: Unsupported method {method} for unauthenticated test.")
            return False

        print(f"    Status Code: {response.status_code}")
        try:
            print(f"    Response: {response.json()}")
        except json.JSONDecodeError:
            print(f"    Response (raw): {response.text}")

        if response.status_code == 401:
            print(
                f"    [OK] Access to {url} is restricted as expected (Status 401 Unauthorized).",
            )
            return True
        print(
            f"    [VULNERABILITY] Access to {url} is NOT restricted. Expected 401, got {response.status_code}.",
        )
        return False
    except requests.exceptions.ConnectionError:
        print(
            f"Error: Could not connect to the backend at {BASE_URL}. Is the server running?",
        )
        return False
    except requests.exceptions.RequestException as e:
        print(f"Request to {url} failed: {e}")
        return False


# Add a dummy image for testing captioning endpoints
TEST_IMAGE_PATH = "test_image.jpg"
DUMMY_IMAGE_CONTENT = b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\nIDATx\xda\xed\xc1\x01\x01\x00\x00\x00\xc2\xa0\xf7Om\x00\x00\x00\x00IEND\xaeB`\x82"


def create_dummy_image(filename):
    """Creates a small dummy PNG image file."""
    try:
        with open(filename, "wb") as f:
            f.write(DUMMY_IMAGE_CONTENT)
        print(f"Created dummy image: {filename}")
    except OSError as e:
        print(f"Error creating dummy image {filename}: {e}")


def cleanup_dummy_image(filename):
    """Deletes the dummy image file."""
    try:
        if os.path.exists(filename):
            os.remove(filename)
            print(f"Cleaned up dummy image: {filename}")
    except OSError as e:
        print(f"Error cleaning up dummy image {filename}: {e}")


if __name__ == "__main__":
    create_dummy_image(TEST_IMAGE_PATH)  # Create dummy image at the start

    if ADMIN_USERNAME == "testuser" or ADMIN_PASSWORD == "testpassword":
        print(
            "ERROR: Please update ADMIN_USERNAME and ADMIN_PASSWORD in the script before running.",
        )
    else:
        # Run existing login and flag capture tests
        token = login(ADMIN_USERNAME, ADMIN_PASSWORD)
        if token:
            capture_flag(token)
        else:
            print("Skipping flag capture as no access token was obtained.")

        print("\n--- Testing Unauthenticated Assistant Endpoints ---")

        # Test /api/ollama/chat (POST, requires authentication)
        test_unauthenticated_access(
            OLLAMA_CHAT_URL,
            method="POST",
            json_data={"message": "hello"},
        )

        # Test /api/ollama/assistant/tools (GET, requires authentication)
        test_unauthenticated_access(OLLAMA_ASSISTANT_TOOLS_URL)

        # Test /api/ollama/assistant/context/{path} (GET, requires authentication)
        test_unauthenticated_access(OLLAMA_ASSISTANT_CONTEXT_URL)

        print("\n--- Unauthenticated Assistant Endpoints Testing Complete ---")

        print("\n--- Testing Unauthenticated Captioning Endpoints ---")

        CAPTIONERS_URL = f"{BASE_URL}/api/captioners"
        CAPTION_TYPES_GET_URL = f"{BASE_URL}/api/caption-types"
        CAPTION_TYPES_POST_URL = f"{BASE_URL}/api/caption-types"
        GENERATE_CAPTION_URL = f"{BASE_URL}/api/generate-caption/_/{TEST_IMAGE_PATH}?generator=joy"  # Using dummy image and 'joy' generator
        BATCH_TRANSFORM_CAPTION_URL = f"{BASE_URL}/api/batch-transform-captions"
        BATCH_GENERATE_CAPTION_URL = f"{BASE_URL}/api/batch-generate-captions"

        # Test /api/captioners (GET) - Should be accessible
        test_unauthenticated_access(CAPTIONERS_URL)

        # Test /api/caption-types (GET) - Should be accessible
        test_unauthenticated_access(CAPTION_TYPES_GET_URL)

        # Test /api/caption-types (POST) - Should NOT be accessible
        test_unauthenticated_access(
            CAPTION_TYPES_POST_URL,
            method="POST",
            json_data={"extensions": ["txt", "tags_test"]},
        )

        # Test /api/generate-caption/{path} (POST) - Should NOT be accessible
        # Note: This will likely fail with a 404 or 500 if the image doesn't exist or generator isn't configured.
        # The goal is to see if it's protected by authentication FIRST.
        test_unauthenticated_access(GENERATE_CAPTION_URL, method="POST")

        # Test /api/batch-transform-captions (POST) - Should NOT be accessible
        batch_transform_payload = {
            "items": [
                {
                    "path": TEST_IMAGE_PATH,
                    "name": TEST_IMAGE_PATH,
                    "captions": [{"type": "caption", "content": "original text"}],
                },
            ],
            "transformations": [
                {
                    "id": "default_replaceUnderscores",
                    "type": "searchReplace",
                    "pattern": "_",
                    "replacement": " ",
                    "enabled": True,
                },
            ],
            "caption_types": ["caption", "tags"],
        }
        test_unauthenticated_access(
            BATCH_TRANSFORM_CAPTION_URL,
            method="POST",
            json_data=batch_transform_payload,
        )

        # Test /api/batch-generate-captions (POST) - Should NOT be accessible
        batch_generate_payload = {
            "items": [{"path": TEST_IMAGE_PATH, "name": TEST_IMAGE_PATH}],
            "generator": "joy",
            "config": {"force": False},
        }
        test_unauthenticated_access(
            BATCH_GENERATE_CAPTION_URL,
            method="POST",
            json_data=batch_generate_payload,
        )

        print("\n--- Unauthenticated Captioning Endpoints Testing Complete ---")

    cleanup_dummy_image(TEST_IMAGE_PATH)  # Clean up dummy image at the end
