#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running pre-commit checks...${NC}"

echo -e "${BLUE}üìù Checking formatting...${NC}"
npm run format:check

echo -e "${BLUE}üîß Running linter...${NC}"
npm run lint

echo -e "${BLUE}üìè Checking file line counts...${NC}"
# Check for files that exceed our modularity standards
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' || true)

if [ -n "$STAGED_FILES" ]; then
    VIOLATIONS_FOUND=false
    
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            # Count non-empty, non-comment lines
            LINE_COUNT=$(grep -v '^\s*$' "$file" | grep -v '^\s*//' | grep -v '^\s*/\*' | grep -v '^\s*\*' | wc -l)
            
            # Check if it's a test file
            if [[ "$file" =~ \.(test|spec)\.(ts|tsx|js|jsx)$ ]] || [[ "$file" =~ /(test|__tests__)/ ]]; then
                MAX_LINES=200
                FILE_TYPE="test"
            else
                MAX_LINES=100
                FILE_TYPE="source"
            fi
            
            if [ "$LINE_COUNT" -gt "$MAX_LINES" ]; then
                if [ "$VIOLATIONS_FOUND" = false ]; then
                    echo -e "${RED}‚ùå Modularity violations detected:${NC}"
                    VIOLATIONS_FOUND=true
                fi
                echo -e "${RED}   $file: $LINE_COUNT lines (max: $MAX_LINES for $FILE_TYPE files)${NC}"
            fi
        fi
    done
    
    if [ "$VIOLATIONS_FOUND" = true ]; then
        echo ""
        echo -e "${YELLOW}üí° Tips:${NC}"
        echo -e "${YELLOW}   - Split large files into smaller, focused modules${NC}"
        echo -e "${YELLOW}   - Use the 100-line axiom for source files${NC}"
        echo -e "${YELLOW}   - Test files can be up to 200 lines${NC}"
        echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
        exit 1
    else
        echo -e "${GREEN}‚úÖ All staged files meet modularity standards${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ No TypeScript/JavaScript files staged${NC}"
fi

echo -e "${BLUE}‚úÖ Running type check...${NC}"
npm run typecheck

# CSS Variable Validation
echo -e "${BLUE}üé® Running CSS variable validation...${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VALIDATOR_SCRIPT="$SCRIPT_DIR/validate-css-variables.js"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Check if validator script exists
if [ ! -f "$VALIDATOR_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  CSS validator script not found at: $VALIDATOR_SCRIPT${NC}"
    echo -e "${YELLOW}   Skipping CSS validation...${NC}"
else
    # Check if we're in a Reynard project
    if [ ! -f "$PROJECT_ROOT/package.json" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Not in a Reynard project, skipping CSS validation${NC}"
    elif ! grep -q "reynard" "$PROJECT_ROOT/package.json" 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Not a Reynard project, skipping CSS validation${NC}"
    else
        # Get list of staged CSS files
        STAGED_CSS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.css$' || true)

        if [ -z "$STAGED_CSS_FILES" ]; then
            echo -e "${GREEN}‚úÖ No CSS files staged for commit${NC}"
        else
            echo -e "${BLUE}üìÅ Staged CSS files:${NC}"
            echo "$STAGED_CSS_FILES" | sed 's/^/  - /'
            echo ""

            # Run CSS validation
            echo -e "${BLUE}üîç Running CSS variable validation...${NC}"

            cd "$PROJECT_ROOT"

            # Run the validator with strict mode for pre-commit
            if node "$VALIDATOR_SCRIPT" --strict; then
                echo -e "${GREEN}‚úÖ CSS validation passed${NC}"
            else
                VALIDATION_EXIT_CODE=$?
                
                if [ $VALIDATION_EXIT_CODE -eq 1 ]; then
                    echo -e "${RED}‚ùå CSS validation failed with errors${NC}"
                    echo -e "${RED}   Please fix the issues above before committing${NC}"
                    echo ""
                    echo -e "${YELLOW}üí° Tips:${NC}"
                    echo -e "${YELLOW}   - Check the css-validation-report.md file for details${NC}"
                    echo -e "${YELLOW}   - Run 'node .husky/validate-css-variables.js' to see full report${NC}"
                    echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
                    exit 1
                elif [ $VALIDATION_EXIT_CODE -eq 2 ]; then
                    echo -e "${YELLOW}‚ö†Ô∏è  CSS validation passed with warnings${NC}"
                    echo -e "${YELLOW}   Consider fixing the warnings above${NC}"
                    echo ""
                    echo -e "${BLUE}üí° To see full details, run:${NC}"
                    echo -e "${BLUE}   node .husky/validate-css-variables.js${NC}"
                    echo ""
                    echo -e "${YELLOW}   Continuing with commit...${NC}"
                else
                    echo -e "${RED}‚ùå CSS validation script failed unexpectedly${NC}"
                    exit 1
                fi
            fi
        fi
    fi
fi

# Markdown ToC Validation
echo -e "${BLUE}üìö Running Markdown ToC validation...${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MARKDOWN_TOC_VALIDATOR_SCRIPT="$SCRIPT_DIR/validate-markdown-toc.js"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Check if Markdown ToC validator script exists
if [ ! -f "$MARKDOWN_TOC_VALIDATOR_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Markdown ToC validator script not found at: $MARKDOWN_TOC_VALIDATOR_SCRIPT${NC}"
    echo -e "${YELLOW}   Skipping Markdown ToC validation...${NC}"
else
    # Check if we have any markdown files staged in target directories
    STAGED_MARKDOWN_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '^(backend|docs|src)/.*\.md$' || true)

    if [ -z "$STAGED_MARKDOWN_FILES" ]; then
        echo -e "${GREEN}‚úÖ No markdown files staged for commit in backend/, docs/, or src/${NC}"
    else
        echo -e "${BLUE}üìÅ Staged markdown files:${NC}"
        echo "$STAGED_MARKDOWN_FILES" | sed 's/^/  - /'
        echo ""

        # Run Markdown ToC validation
        cd "$PROJECT_ROOT"
        
        if node "$MARKDOWN_TOC_VALIDATOR_SCRIPT"; then
            echo -e "${GREEN}‚úÖ Markdown ToC validation passed${NC}"
        else
            MARKDOWN_TOC_VALIDATION_EXIT_CODE=$?
            
            if [ $MARKDOWN_TOC_VALIDATION_EXIT_CODE -eq 1 ]; then
                echo -e "${RED}‚ùå Markdown ToC validation failed${NC}"
                echo -e "${RED}   Please fix the issues above before committing${NC}"
                echo ""
                echo -e "${YELLOW}üí° Tips:${NC}"
                echo -e "${YELLOW}   - Add '## Table of Contents' after your first H2 heading${NC}"
                echo -e "${YELLOW}   - Update ToC when adding/removing/renaming headings${NC}"
                echo -e "${YELLOW}   - Run 'node .husky/validate-markdown-toc.js --fix' to auto-fix some issues${NC}"
                echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
                exit 1
            else
                echo -e "${RED}‚ùå Markdown ToC validation script failed unexpectedly${NC}"
                exit 1
            fi
        fi
    fi
fi

# Markdown Linting
echo -e "${BLUE}üìù Running Markdown linting...${NC}"

# Check if we have any markdown files staged
STAGED_MARKDOWN_FILES_ALL=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$' || true)

if [ -z "$STAGED_MARKDOWN_FILES_ALL" ]; then
    echo -e "${GREEN}‚úÖ No markdown files staged for commit${NC}"
else
    echo -e "${BLUE}üìÅ Staged markdown files:${NC}"
    echo "$STAGED_MARKDOWN_FILES_ALL" | sed 's/^/  - /'
    echo ""

    # Run markdownlint
    cd "$PROJECT_ROOT"
    
    if npx markdownlint $STAGED_MARKDOWN_FILES_ALL; then
        echo -e "${GREEN}‚úÖ Markdown linting passed${NC}"
    else
        MARKDOWN_LINT_EXIT_CODE=$?
        
        if [ $MARKDOWN_LINT_EXIT_CODE -eq 1 ]; then
            echo -e "${RED}‚ùå Markdown linting failed${NC}"
            echo -e "${RED}   Please fix the issues above before committing${NC}"
            echo ""
            echo -e "${YELLOW}üí° Tips:${NC}"
            echo -e "${YELLOW}   - Run 'npx markdownlint --fix' to auto-fix some issues${NC}"
            echo -e "${YELLOW}   - Check .markdownlint.json for configuration${NC}"
            echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
            exit 1
        else
            echo -e "${RED}‚ùå Markdown linting script failed unexpectedly${NC}"
            exit 1
        fi
    fi
fi

# Sentence Length Validation
echo -e "${BLUE}üìè Running sentence length validation...${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SENTENCE_LENGTH_VALIDATOR_SCRIPT="$SCRIPT_DIR/validate-sentence-length.js"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Check if sentence length validator script exists
if [ ! -f "$SENTENCE_LENGTH_VALIDATOR_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Sentence length validator script not found at: $SENTENCE_LENGTH_VALIDATOR_SCRIPT${NC}"
    echo -e "${YELLOW}   Skipping sentence length validation...${NC}"
else
    # Check if we have any markdown files staged
    if [ -z "$STAGED_MARKDOWN_FILES_ALL" ]; then
        echo -e "${GREEN}‚úÖ No markdown files staged for sentence length validation${NC}"
    else
        # Run sentence length validation
        cd "$PROJECT_ROOT"
        
        if node "$SENTENCE_LENGTH_VALIDATOR_SCRIPT"; then
            echo -e "${GREEN}‚úÖ Sentence length validation passed${NC}"
        else
            SENTENCE_LENGTH_VALIDATION_EXIT_CODE=$?
            
            if [ $SENTENCE_LENGTH_VALIDATION_EXIT_CODE -eq 1 ]; then
                echo -e "${RED}‚ùå Sentence length validation failed${NC}"
                echo -e "${RED}   Please fix the issues above before committing${NC}"
                echo ""
                echo -e "${YELLOW}üí° Tips:${NC}"
                echo -e "${YELLOW}   - Break long sentences at conjunctions (and, but, while, because)${NC}"
                echo -e "${YELLOW}   - Use commas and semicolons as natural break points${NC}"
                echo -e "${YELLOW}   - Break after prepositions when possible${NC}"
                echo -e "${YELLOW}   - Run 'node .husky/validate-sentence-length.js --fix' to auto-fix${NC}"
                echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
                exit 1
            else
                echo -e "${RED}‚ùå Sentence length validation script failed unexpectedly${NC}"
                exit 1
            fi
        fi
    fi
fi

# Markdown Link Validation
echo -e "${BLUE}üîó Running markdown link validation...${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MARKDOWN_LINK_VALIDATOR_SCRIPT="$SCRIPT_DIR/validate-markdown-links.js"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Check if markdown link validator script exists
if [ ! -f "$MARKDOWN_LINK_VALIDATOR_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Markdown link validator script not found at: $MARKDOWN_LINK_VALIDATOR_SCRIPT${NC}"
    echo -e "${YELLOW}   Skipping markdown link validation...${NC}"
else
    # Check if we have any markdown files staged
    if [ -z "$STAGED_MARKDOWN_FILES_ALL" ]; then
        echo -e "${GREEN}‚úÖ No markdown files staged for link validation${NC}"
    else
        # Run markdown link validation
        cd "$PROJECT_ROOT"
        
        if node "$MARKDOWN_LINK_VALIDATOR_SCRIPT" --staged; then
            echo -e "${GREEN}‚úÖ Markdown link validation passed${NC}"
        else
            MARKDOWN_LINK_VALIDATION_EXIT_CODE=$?
            
            if [ $MARKDOWN_LINK_VALIDATION_EXIT_CODE -eq 1 ]; then
                echo -e "${RED}‚ùå Markdown link validation failed${NC}"
                echo -e "${RED}   Please fix the broken links above before committing${NC}"
                echo ""
                echo -e "${YELLOW}üí° Tips:${NC}"
                echo -e "${YELLOW}   - Check file paths and ensure files exist${NC}"
                echo -e "${YELLOW}   - Verify anchor names match heading text${NC}"
                echo -e "${YELLOW}   - Use relative paths for internal links${NC}"
                echo -e "${YELLOW}   - Test external URLs in a browser${NC}"
                echo -e "${YELLOW}   - Run 'node .husky/validate-markdown-links.js --all' to validate all files${NC}"
                echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
                exit 1
            else
                echo -e "${RED}‚ùå Markdown link validation script failed unexpectedly${NC}"
                exit 1
            fi
        fi
    fi
fi

# Italic to Blockquote Conversion
echo -e "${BLUE}üìù Running italic-to-blockquote conversion...${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ITALIC_TO_BLOCKQUOTE_SCRIPT="$SCRIPT_DIR/validate-italic-to-blockquote.js"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Check if italic-to-blockquote script exists
if [ ! -f "$ITALIC_TO_BLOCKQUOTE_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Italic-to-blockquote script not found at: $ITALIC_TO_BLOCKQUOTE_SCRIPT${NC}"
    echo -e "${YELLOW}   Skipping italic-to-blockquote conversion...${NC}"
else
    # Check if we have any markdown files staged
    if [ -z "$STAGED_MARKDOWN_FILES_ALL" ]; then
        echo -e "${GREEN}‚úÖ No markdown files staged for italic-to-blockquote conversion${NC}"
    else
        # Run italic-to-blockquote conversion
        cd "$PROJECT_ROOT"
        
        if node "$ITALIC_TO_BLOCKQUOTE_SCRIPT" --fix; then
            echo -e "${GREEN}‚úÖ Italic-to-blockquote conversion passed${NC}"
        else
            ITALIC_TO_BLOCKQUOTE_EXIT_CODE=$?
            
            if [ $ITALIC_TO_BLOCKQUOTE_EXIT_CODE -eq 1 ]; then
                echo -e "${RED}‚ùå Italic-to-blockquote conversion failed${NC}"
                echo -e "${RED}   Please fix the italic formatting issues above before committing${NC}"
                echo ""
                echo -e "${YELLOW}üí° Tips:${NC}"
                echo -e "${YELLOW}   - Convert italic text (*text*) to blockquotes (>text) for better readability${NC}"
                echo -e "${YELLOW}   - Run 'node .husky/validate-italic-to-blockquote.js --fix' to auto-fix${NC}"
                echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
                exit 1
            else
                echo -e "${RED}‚ùå Italic-to-blockquote conversion script failed unexpectedly${NC}"
                exit 1
            fi
        fi
    fi
fi

# Python Validation
echo -e "${BLUE}üêç Running Python validation...${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PYTHON_VALIDATOR_SCRIPT="$SCRIPT_DIR/validate-python.py"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Check if Python validator script exists
if [ ! -f "$PYTHON_VALIDATOR_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Python validator script not found at: $PYTHON_VALIDATOR_SCRIPT${NC}"
    echo -e "${YELLOW}   Skipping Python validation...${NC}"
else
    # Check if we have any Python files staged
    STAGED_PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

    if [ -z "$STAGED_PYTHON_FILES" ]; then
        echo -e "${GREEN}‚úÖ No Python files staged for commit${NC}"
    else
        echo -e "${BLUE}üìÅ Staged Python files:${NC}"
        echo "$STAGED_PYTHON_FILES" | sed 's/^/  - /'
        echo ""

        # Run Python validation
        cd "$PROJECT_ROOT"
        
        if python3 "$PYTHON_VALIDATOR_SCRIPT"; then
            echo -e "${GREEN}‚úÖ Python validation passed${NC}"
        else
            PYTHON_VALIDATION_EXIT_CODE=$?
            
            if [ $PYTHON_VALIDATION_EXIT_CODE -eq 1 ]; then
                echo -e "${RED}‚ùå Python validation failed${NC}"
                echo -e "${RED}   Please fix the issues above before committing${NC}"
                echo ""
                echo -e "${YELLOW}üí° Tips:${NC}"
                echo -e "${YELLOW}   - Run 'black .' to fix formatting issues${NC}"
                echo -e "${YELLOW}   - Run 'isort .' to fix import sorting${NC}"
                echo -e "${YELLOW}   - Run 'flake8 .' to see all linting issues${NC}"
                echo -e "${YELLOW}   - Run 'npm run python:linecheck' to check file line counts${NC}"
                echo -e "${YELLOW}   - Split large files (>250 lines) into smaller modules${NC}"
                echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
                exit 1
            else
                echo -e "${RED}‚ùå Python validation script failed unexpectedly${NC}"
                exit 1
            fi
        fi
    fi
fi

# Workflow Shell Script Validation
echo -e "${BLUE}üê∫ Running workflow shell script validation...${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKFLOW_SHELL_VALIDATOR_SCRIPT="$SCRIPT_DIR/pre-commit-workflow-shell-validation"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Check if workflow shell validator script exists
if [[ ! -f "${WORKFLOW_SHELL_VALIDATOR_SCRIPT}" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Workflow shell validator script not found at: ${WORKFLOW_SHELL_VALIDATOR_SCRIPT}${NC}"
    echo -e "${YELLOW}   Skipping workflow shell validation...${NC}"
else
    # Check if we have any workflow files staged
    STAGED_WORKFLOW_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.github/workflows/.*\.(yml|yaml)$' || true)

    if [[ -z "${STAGED_WORKFLOW_FILES}" ]]; then
        echo -e "${GREEN}‚úÖ No workflow files staged for shell validation${NC}"
    else
        # Run workflow shell validation
        cd "${PROJECT_ROOT}"
        
        if bash "${WORKFLOW_SHELL_VALIDATOR_SCRIPT}"; then
            echo -e "${GREEN}‚úÖ Workflow shell validation passed${NC}"
        else
            WORKFLOW_SHELL_VALIDATION_EXIT_CODE=$?
            
            if [[ "${WORKFLOW_SHELL_VALIDATION_EXIT_CODE}" -eq 1 ]]; then
                echo -e "${RED}‚ùå Workflow shell validation failed${NC}"
                echo -e "${RED}   Please fix the shell script issues above before committing${NC}"
                echo ""
                echo -e "${YELLOW}üí° Tips:${NC}"
                echo -e "${YELLOW}   - Run 'node .husky/extract-workflow-shell.js --fix' to auto-fix common issues${NC}"
                echo -e "${YELLOW}   - Use '[[ ]]' instead of '[ ]' for bash tests${NC}"
                echo -e "${YELLOW}   - Add braces around variables: \${VAR} instead of \$VAR${NC}"
                echo -e "${YELLOW}   - Check .shellcheckrc configuration for rules${NC}"
                echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
                exit 1
            else
                echo -e "${RED}‚ùå Workflow shell validation script failed unexpectedly${NC}"
                exit 1
            fi
        fi
    fi
fi

# Package Testing
echo -e "${BLUE}üß™ Running package tests...${NC}"

# Check if we have any TypeScript/JavaScript files staged in packages
STAGED_PACKAGE_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '^packages/.*\.(ts|tsx|js|jsx)$' || true)

if [ -n "$STAGED_PACKAGE_FILES" ]; then
    echo -e "${BLUE}üìÅ Staged package files:${NC}"
    echo "$STAGED_PACKAGE_FILES" | sed 's/^/  - /'
    echo ""
    
    # Get unique packages that have staged files
    AFFECTED_PACKAGES=$(echo "$STAGED_PACKAGE_FILES" | sed 's|^packages/\([^/]*\)/.*|\1|' | sort -u)
    
    echo -e "${BLUE}üéØ Affected packages:${NC}"
    echo "$AFFECTED_PACKAGES" | sed 's/^/  - /'
    echo ""
    
    # Run tests for each affected package using the queue system
    for package in $AFFECTED_PACKAGES; do
        if [ -d "packages/$package" ] && [ -f "packages/$package/package.json" ]; then
            echo -e "${BLUE}üß™ Testing package: $package${NC}"
            
            # Check if package has test script
            if grep -q '"test"' "packages/$package/package.json"; then
                cd "packages/$package"
                
                # Run the package's test script (which should use the queue system)
                if npm run test; then
                    echo -e "${GREEN}‚úÖ Package $package tests passed${NC}"
                else
                    PACKAGE_TEST_EXIT_CODE=$?
                    echo -e "${RED}‚ùå Package $package tests failed${NC}"
                    echo -e "${RED}   Please fix the test failures above before committing${NC}"
                    echo ""
                    echo -e "${YELLOW}üí° Tips:${NC}"
                    echo -e "${YELLOW}   - Run 'cd packages/$package && npm run test' to see full test output${NC}"
                    echo -e "${YELLOW}   - Check test files in packages/$package/src/__tests__/${NC}"
                    echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
                    exit 1
                fi
                
                cd - > /dev/null
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Package $package has no test script, skipping${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Package $package not found or invalid, skipping${NC}"
        fi
    done
    
    echo -e "${GREEN}‚úÖ All package tests passed!${NC}"
else
    echo -e "${GREEN}‚úÖ No package files staged for testing${NC}"
fi

echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
