#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running pre-commit checks...${NC}"

echo -e "${BLUE}üìù Checking formatting...${NC}"
npm run format:check

echo -e "${BLUE}üîß Running linter...${NC}"
npm run lint

echo -e "${BLUE}üìè Checking file line counts...${NC}"
# Check for files that exceed our modularity standards
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' || true)

if [ -n "$STAGED_FILES" ]; then
    VIOLATIONS_FOUND=false
    
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            # Count non-empty, non-comment lines
            LINE_COUNT=$(grep -v '^\s*$' "$file" | grep -v '^\s*//' | grep -v '^\s*/\*' | grep -v '^\s*\*' | wc -l)
            
            # Check if it's a test file
            if [[ "$file" =~ \.(test|spec)\.(ts|tsx|js|jsx)$ ]] || [[ "$file" =~ /(test|__tests__)/ ]]; then
                MAX_LINES=200
                FILE_TYPE="test"
            else
                MAX_LINES=100
                FILE_TYPE="source"
            fi
            
            if [ "$LINE_COUNT" -gt "$MAX_LINES" ]; then
                if [ "$VIOLATIONS_FOUND" = false ]; then
                    echo -e "${RED}‚ùå Modularity violations detected:${NC}"
                    VIOLATIONS_FOUND=true
                fi
                echo -e "${RED}   $file: $LINE_COUNT lines (max: $MAX_LINES for $FILE_TYPE files)${NC}"
            fi
        fi
    done
    
    if [ "$VIOLATIONS_FOUND" = true ]; then
        echo ""
        echo -e "${YELLOW}üí° Tips:${NC}"
        echo -e "${YELLOW}   - Split large files into smaller, focused modules${NC}"
        echo -e "${YELLOW}   - Use the 100-line axiom for source files${NC}"
        echo -e "${YELLOW}   - Test files can be up to 200 lines${NC}"
        echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
        exit 1
    else
        echo -e "${GREEN}‚úÖ All staged files meet modularity standards${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ No TypeScript/JavaScript files staged${NC}"
fi

echo -e "${BLUE}‚úÖ Running type check...${NC}"
npm run typecheck

# CSS Variable Validation
echo -e "${BLUE}üé® Running CSS variable validation...${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VALIDATOR_SCRIPT="$SCRIPT_DIR/validate-css-variables.js"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Check if validator script exists
if [ ! -f "$VALIDATOR_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  CSS validator script not found at: $VALIDATOR_SCRIPT${NC}"
    echo -e "${YELLOW}   Skipping CSS validation...${NC}"
else
    # Check if we're in a Reynard project
    if [ ! -f "$PROJECT_ROOT/package.json" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Not in a Reynard project, skipping CSS validation${NC}"
    elif ! grep -q "reynard" "$PROJECT_ROOT/package.json" 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Not a Reynard project, skipping CSS validation${NC}"
    else
        # Get list of staged CSS files
        STAGED_CSS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.css$' || true)

        if [ -z "$STAGED_CSS_FILES" ]; then
            echo -e "${GREEN}‚úÖ No CSS files staged for commit${NC}"
        else
            echo -e "${BLUE}üìÅ Staged CSS files:${NC}"
            echo "$STAGED_CSS_FILES" | sed 's/^/  - /'
            echo ""

            # Run CSS validation
            echo -e "${BLUE}üîç Running CSS variable validation...${NC}"

            cd "$PROJECT_ROOT"

            # Run the validator with strict mode for pre-commit
            if node "$VALIDATOR_SCRIPT" --strict; then
                echo -e "${GREEN}‚úÖ CSS validation passed${NC}"
            else
                VALIDATION_EXIT_CODE=$?
                
                if [ $VALIDATION_EXIT_CODE -eq 1 ]; then
                    echo -e "${RED}‚ùå CSS validation failed with errors${NC}"
                    echo -e "${RED}   Please fix the issues above before committing${NC}"
                    echo ""
                    echo -e "${YELLOW}üí° Tips:${NC}"
                    echo -e "${YELLOW}   - Check the css-validation-report.md file for details${NC}"
                    echo -e "${YELLOW}   - Run 'node .husky/validate-css-variables.js' to see full report${NC}"
                    echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
                    exit 1
                elif [ $VALIDATION_EXIT_CODE -eq 2 ]; then
                    echo -e "${YELLOW}‚ö†Ô∏è  CSS validation passed with warnings${NC}"
                    echo -e "${YELLOW}   Consider fixing the warnings above${NC}"
                    echo ""
                    echo -e "${BLUE}üí° To see full details, run:${NC}"
                    echo -e "${BLUE}   node .husky/validate-css-variables.js${NC}"
                    echo ""
                    echo -e "${YELLOW}   Continuing with commit...${NC}"
                else
                    echo -e "${RED}‚ùå CSS validation script failed unexpectedly${NC}"
                    exit 1
                fi
            fi
        fi
    fi
fi

# Python Validation
echo -e "${BLUE}üêç Running Python validation...${NC}"

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PYTHON_VALIDATOR_SCRIPT="$SCRIPT_DIR/validate-python.py"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Check if Python validator script exists
if [ ! -f "$PYTHON_VALIDATOR_SCRIPT" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Python validator script not found at: $PYTHON_VALIDATOR_SCRIPT${NC}"
    echo -e "${YELLOW}   Skipping Python validation...${NC}"
else
    # Check if we have any Python files staged
    STAGED_PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

    if [ -z "$STAGED_PYTHON_FILES" ]; then
        echo -e "${GREEN}‚úÖ No Python files staged for commit${NC}"
    else
        echo -e "${BLUE}üìÅ Staged Python files:${NC}"
        echo "$STAGED_PYTHON_FILES" | sed 's/^/  - /'
        echo ""

        # Run Python validation
        cd "$PROJECT_ROOT"
        
        if python3 "$PYTHON_VALIDATOR_SCRIPT"; then
            echo -e "${GREEN}‚úÖ Python validation passed${NC}"
        else
            PYTHON_VALIDATION_EXIT_CODE=$?
            
            if [ $PYTHON_VALIDATION_EXIT_CODE -eq 1 ]; then
                echo -e "${RED}‚ùå Python validation failed${NC}"
                echo -e "${RED}   Please fix the issues above before committing${NC}"
                echo ""
                echo -e "${YELLOW}üí° Tips:${NC}"
                echo -e "${YELLOW}   - Run 'black .' to fix formatting issues${NC}"
                echo -e "${YELLOW}   - Run 'isort .' to fix import sorting${NC}"
                echo -e "${YELLOW}   - Run 'flake8 .' to see all linting issues${NC}"
                echo -e "${YELLOW}   - Run 'npm run python:linecheck' to check file line counts${NC}"
                echo -e "${YELLOW}   - Split large files (>250 lines) into smaller modules${NC}"
                echo -e "${YELLOW}   - Use 'git commit --no-verify' to skip this check (not recommended)${NC}"
                exit 1
            else
                echo -e "${RED}‚ùå Python validation script failed unexpectedly${NC}"
                exit 1
            fi
        fi
    fi
fi

echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
