#!/usr/bin/env python3
"""
Update RAG configuration for optimizations.

This script updates the RAG configuration to enable the new optimizations
and provides migration guidance.
"""

import os
import sys
import json
from pathlib import Path
from typing import Dict, Any

# Add the backend directory to the Python path
backend_dir = Path(__file__).parent.parent
sys.path.insert(0, str(backend_dir))

def update_environment_config() -> Dict[str, str]:
    """Update environment configuration for RAG optimizations."""
    config_updates = {
        # HNSW optimization
        "RAG_HNSW_M": "32",
        "RAG_HNSW_EF_CONSTRUCTION": "400", 
        "RAG_HNSW_EF_SEARCH": "100",
        
        # Concurrent processing
        "RAG_MAX_CONCURRENT_REQUESTS": "8",
        "RAG_RATE_LIMIT_PER_SECOND": "10",
        "RAG_BATCH_SIZE": "16",
        
        # Model selection
        "RAG_PRIMARY_MODEL": "embeddinggemma:latest",
        "RAG_CODE_MODEL": "embeddinggemma:latest",
        "RAG_LONG_CONTEXT_MODEL": "nomic-embed-text",
        
        # Performance monitoring
        "RAG_PERFORMANCE_MONITORING": "true",
        "RAG_QUALITY_THRESHOLD": "0.95",
        "RAG_DRIFT_DETECTION_ENABLED": "true",
        
        # Cache optimization
        "RAG_CACHE_SIZE": "1000",
        "RAG_CACHE_TTL_SECONDS": "3600",
    }
    
    return config_updates

def create_env_file(env_path: str, config_updates: Dict[str, str]) -> None:
    """Create or update .env file with RAG optimization settings."""
    env_file = Path(env_path)
    
    # Read existing .env file if it exists
    existing_vars = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_vars[key] = value
    
    # Update with new configuration
    existing_vars.update(config_updates)
    
    # Write updated .env file
    with open(env_file, 'w') as f:
        f.write("# RAG Embeddings Optimization Configuration\n")
        f.write("# Generated by update_rag_config.py\n\n")
        
        # Write HNSW optimization settings
        f.write("# HNSW Index Optimization\n")
        for key in ["RAG_HNSW_M", "RAG_HNSW_EF_CONSTRUCTION", "RAG_HNSW_EF_SEARCH"]:
            if key in existing_vars:
                f.write(f"{key}={existing_vars[key]}\n")
        
        f.write("\n# Concurrent Processing\n")
        for key in ["RAG_MAX_CONCURRENT_REQUESTS", "RAG_RATE_LIMIT_PER_SECOND", "RAG_BATCH_SIZE"]:
            if key in existing_vars:
                f.write(f"{key}={existing_vars[key]}\n")
        
        f.write("\n# Model Selection\n")
        for key in ["RAG_PRIMARY_MODEL", "RAG_CODE_MODEL", "RAG_LONG_CONTEXT_MODEL"]:
            if key in existing_vars:
                f.write(f"{key}={existing_vars[key]}\n")
        
        f.write("\n# Performance Monitoring\n")
        for key in ["RAG_PERFORMANCE_MONITORING", "RAG_QUALITY_THRESHOLD", "RAG_DRIFT_DETECTION_ENABLED"]:
            if key in existing_vars:
                f.write(f"{key}={existing_vars[key]}\n")
        
        f.write("\n# Cache Optimization\n")
        for key in ["RAG_CACHE_SIZE", "RAG_CACHE_TTL_SECONDS"]:
            if key in existing_vars:
                f.write(f"{key}={existing_vars[key]}\n")
        
        # Write other existing variables
        f.write("\n# Other Configuration\n")
        for key, value in existing_vars.items():
            if not key.startswith("RAG_"):
                f.write(f"{key}={value}\n")

def create_migration_guide() -> str:
    """Create migration guide for RAG optimizations."""
    guide = """
# RAG Embeddings Optimization Migration Guide

## Phase 1: Immediate Optimizations (Week 1-2)

### 1. Database Migration
Run the HNSW optimization migration:
```bash
cd backend/scripts/db
psql -d your_database -f 005_hnsw_optimization.sql
```

### 2. Install Dependencies
Install the new optimization dependencies:
```bash
pip install -r backend/requirements-rag-optimizations.txt
```

### 3. Update Configuration
Run the configuration update script:
```bash
python backend/scripts/update_rag_config.py
```

### 4. Update Service Integration
Replace the standard EmbeddingService with EnhancedEmbeddingService in your application:

```python
# Before
from app.services.rag.embedding_service import EmbeddingService

# After  
from app.services.rag.enhanced_embedding_service import EnhancedEmbeddingService

# Initialize with enhanced service
embedding_service = EnhancedEmbeddingService()
```

### 5. Enable Performance Monitoring
Add performance monitoring to your application:

```python
from app.services.rag.performance_monitor import PerformanceMonitor

# Initialize performance monitor
performance_monitor = PerformanceMonitor(db_connection=your_db_connection)
await performance_monitor.start()

# Record metrics after embedding operations
await performance_monitor.record_embedding_metrics(
    model="embeddinggemma:latest",
    latency_ms=150.0,
    success=True,
    cache_hit=False,
    tokens=100
)
```

## Expected Performance Improvements

### HNSW Index Optimization
- **Recall@10**: 85% â†’ 92% (7% improvement)
- **Query Time**: 5ms â†’ 8ms (3ms increase)
- **Memory Usage**: 2x increase
- **Build Time**: 2x increase

### Concurrent Batch Processing
- **Throughput**: 2-10 embeddings/sec â†’ 20-40 embeddings/sec (4x improvement)
- **Latency**: 50% reduction in batch processing time
- **Resource Utilization**: Better CPU/memory efficiency

### Model-Specific Tokenization
- **Token Accuracy**: 95% accuracy (vs ~80% with heuristic)
- **Chunk Quality**: Better preservation of semantic boundaries
- **Error Reduction**: Fewer truncation issues

### LRU Cache Optimization
- **Cache Hit Rate**: Target 80% hit rate
- **Memory Efficiency**: Automatic eviction of least recently used items
- **Performance**: Faster retrieval for repeated queries

## Monitoring and Validation

### Performance Metrics
Monitor these key metrics after deployment:
- Average embedding latency
- Cache hit rate
- Search recall@10
- Throughput (embeddings/second)
- Error rate

### Validation Tests
Run the optimization test suite:
```bash
cd backend
python -m pytest tests/test_rag_optimizations.py -v
```

### Performance Benchmarks
Compare before/after performance:
```bash
# Before optimization
python backend/scripts/benchmark_rag_performance.py --baseline

# After optimization  
python backend/scripts/benchmark_rag_performance.py --optimized
```

## Rollback Plan

If issues arise, you can rollback by:

1. **Database Rollback**:
```sql
-- Drop optimized indexes
DROP INDEX IF EXISTS idx_document_embeddings_hnsw_v2;
DROP INDEX IF EXISTS idx_code_embeddings_hnsw_v2;
DROP INDEX IF EXISTS idx_caption_embeddings_hnsw_v2;
DROP INDEX IF EXISTS idx_image_embeddings_hnsw_v2;

-- Recreate original indexes
\i 003_indexes.sql
```

2. **Service Rollback**:
```python
# Revert to standard EmbeddingService
from app.services.rag.embedding_service import EmbeddingService
embedding_service = EmbeddingService()
```

3. **Configuration Rollback**:
```bash
# Restore original .env file
git checkout HEAD~1 .env
```

## Next Steps

After successful Phase 1 deployment:

1. **Monitor Performance**: Track metrics for 1 week
2. **Phase 2 Planning**: Prepare for AST-aware chunking and hybrid search
3. **Model Evaluation**: A/B test alternative embedding models
4. **Scale Testing**: Test with larger datasets

## Support

For issues or questions:
- Check the test suite: `backend/tests/test_rag_optimizations.py`
- Review performance logs in the database
- Monitor system resource usage
- Check Ollama service health
"""
    return guide

def main():
    """Main function to update RAG configuration."""
    print("ðŸ¦Š Updating RAG configuration for optimizations...")
    
    # Get configuration updates
    config_updates = update_environment_config()
    
    # Find .env file
    env_paths = [
        ".env",
        "backend/.env", 
        "../.env",
        "../../.env"
    ]
    
    env_file = None
    for path in env_paths:
        if Path(path).exists():
            env_file = path
            break
    
    if not env_file:
        env_file = ".env"  # Create in current directory
    
    # Update .env file
    create_env_file(env_file, config_updates)
    print(f"âœ… Updated configuration in {env_file}")
    
    # Create migration guide
    guide_path = "RAG_OPTIMIZATION_MIGRATION_GUIDE.md"
    with open(guide_path, 'w') as f:
        f.write(create_migration_guide())
    print(f"âœ… Created migration guide: {guide_path}")
    
    print("\nðŸ¦¦ Next steps:")
    print("1. Run database migration: psql -d your_database -f backend/scripts/db/005_hnsw_optimization.sql")
    print("2. Install dependencies: pip install -r backend/requirements-rag-optimizations.txt")
    print("3. Update your application to use EnhancedEmbeddingService")
    print("4. Run tests: python -m pytest backend/tests/test_rag_optimizations.py -v")
    print("5. Monitor performance metrics")
    
    print(f"\nðŸ“– See {guide_path} for detailed migration instructions")

if __name__ == "__main__":
    main()
