"""Add Fenrir profiling and exploit session tables

Revision ID: 117fee1fb663
Revises: 20250121_000000
Create Date: 2025-09-27 12:43:26.763355

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = '117fee1fb663'
down_revision = '20250121_000000'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Create Fenrir profiling sessions table
    op.create_table('fenrir_profiling_sessions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('session_id', sa.String(length=100), nullable=False),
        sa.Column('session_type', sa.String(length=50), nullable=False),
        sa.Column('environment', sa.String(length=50), nullable=False),
        sa.Column('started_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=False),
        sa.Column('duration_seconds', sa.Float(), nullable=True),
        sa.Column('total_snapshots', sa.Integer(), nullable=False),
        sa.Column('issues_found', sa.Integer(), nullable=False),
        sa.Column('peak_memory_mb', sa.Float(), nullable=True),
        sa.Column('final_memory_mb', sa.Float(), nullable=True),
        sa.Column('memory_delta_mb', sa.Float(), nullable=True),
        sa.Column('backend_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('database_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('service_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('session_id')
    )
    op.create_index('idx_profiling_sessions_type_status', 'fenrir_profiling_sessions', ['session_type', 'status'])
    op.create_index('idx_profiling_sessions_started_at', 'fenrir_profiling_sessions', ['started_at'])
    op.create_index('idx_profiling_sessions_environment', 'fenrir_profiling_sessions', ['environment'])

    # Create memory snapshots table
    op.create_table('fenrir_memory_snapshots',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('profiling_session_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
        sa.Column('context', sa.String(length=100), nullable=False),
        sa.Column('rss_mb', sa.Float(), nullable=False),
        sa.Column('vms_mb', sa.Float(), nullable=False),
        sa.Column('percent', sa.Float(), nullable=False),
        sa.Column('available_mb', sa.Float(), nullable=False),
        sa.Column('tracemalloc_mb', sa.Float(), nullable=False),
        sa.Column('gc_objects', sa.Integer(), nullable=False),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['profiling_session_id'], ['fenrir_profiling_sessions.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_memory_snapshots_session_id', 'fenrir_memory_snapshots', ['profiling_session_id'])
    op.create_index('idx_memory_snapshots_timestamp', 'fenrir_memory_snapshots', ['timestamp'])
    op.create_index('idx_memory_snapshots_context', 'fenrir_memory_snapshots', ['context'])

    # Create profiling results table
    op.create_table('fenrir_profiling_results',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('profiling_session_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('category', sa.String(length=50), nullable=False),
        sa.Column('severity', sa.String(length=20), nullable=False),
        sa.Column('issue', sa.Text(), nullable=False),
        sa.Column('recommendation', sa.Text(), nullable=False),
        sa.Column('memory_impact_mb', sa.Float(), nullable=False),
        sa.Column('performance_impact', sa.String(length=50), nullable=False),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['profiling_session_id'], ['fenrir_profiling_sessions.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_profiling_results_session_id', 'fenrir_profiling_results', ['profiling_session_id'])
    op.create_index('idx_profiling_results_category', 'fenrir_profiling_results', ['category'])
    op.create_index('idx_profiling_results_severity', 'fenrir_profiling_results', ['severity'])

    # Create exploit sessions table
    op.create_table('fenrir_exploit_sessions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('profiling_session_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('session_id', sa.String(length=100), nullable=False),
        sa.Column('exploit_type', sa.String(length=50), nullable=False),
        sa.Column('target_url', sa.String(length=500), nullable=False),
        sa.Column('target_endpoint', sa.String(length=200), nullable=True),
        sa.Column('started_at', sa.DateTime(timezone=True), nullable=False),
        sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=False),
        sa.Column('duration_seconds', sa.Float(), nullable=True),
        sa.Column('total_requests', sa.Integer(), nullable=False),
        sa.Column('successful_requests', sa.Integer(), nullable=False),
        sa.Column('failed_requests', sa.Integer(), nullable=False),
        sa.Column('vulnerabilities_found', sa.Integer(), nullable=False),
        sa.Column('exploit_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['profiling_session_id'], ['fenrir_profiling_sessions.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('session_id')
    )
    op.create_index('idx_exploit_sessions_type_status', 'fenrir_exploit_sessions', ['exploit_type', 'status'])
    op.create_index('idx_exploit_sessions_started_at', 'fenrir_exploit_sessions', ['started_at'])
    op.create_index('idx_exploit_sessions_target_url', 'fenrir_exploit_sessions', ['target_url'])

    # Create exploit attempts table
    op.create_table('fenrir_exploit_attempts',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('exploit_session_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('attempt_number', sa.Integer(), nullable=False),
        sa.Column('payload', sa.Text(), nullable=False),
        sa.Column('method', sa.String(length=10), nullable=False),
        sa.Column('headers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('response_status', sa.Integer(), nullable=True),
        sa.Column('response_headers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('response_body', sa.Text(), nullable=True),
        sa.Column('response_time_ms', sa.Float(), nullable=True),
        sa.Column('vulnerability_detected', sa.Boolean(), nullable=False),
        sa.Column('vulnerability_type', sa.String(length=50), nullable=True),
        sa.Column('vulnerability_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['exploit_session_id'], ['fenrir_exploit_sessions.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_exploit_attempts_session_id', 'fenrir_exploit_attempts', ['exploit_session_id'])
    op.create_index('idx_exploit_attempts_timestamp', 'fenrir_exploit_attempts', ['timestamp'])
    op.create_index('idx_exploit_attempts_vulnerability', 'fenrir_exploit_attempts', ['vulnerability_detected'])

    # Create database connection logs table
    op.create_table('fenrir_database_connection_logs',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('profiling_session_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('database_name', sa.String(length=100), nullable=False),
        sa.Column('connection_type', sa.String(length=50), nullable=False),
        sa.Column('operation', sa.String(length=100), nullable=False),
        sa.Column('query_text', sa.Text(), nullable=True),
        sa.Column('execution_time_ms', sa.Float(), nullable=True),
        sa.Column('rows_affected', sa.Integer(), nullable=True),
        sa.Column('connection_pool_size', sa.Integer(), nullable=True),
        sa.Column('active_connections', sa.Integer(), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['profiling_session_id'], ['fenrir_profiling_sessions.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_db_connection_logs_session_id', 'fenrir_database_connection_logs', ['profiling_session_id'])
    op.create_index('idx_db_connection_logs_database', 'fenrir_database_connection_logs', ['database_name'])
    op.create_index('idx_db_connection_logs_timestamp', 'fenrir_database_connection_logs', ['timestamp'])

    # Create service startup logs table
    op.create_table('fenrir_service_startup_logs',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('profiling_session_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('service_name', sa.String(length=100), nullable=False),
        sa.Column('service_type', sa.String(length=50), nullable=False),
        sa.Column('startup_phase', sa.String(length=50), nullable=False),
        sa.Column('duration_ms', sa.Float(), nullable=True),
        sa.Column('memory_usage_mb', sa.Float(), nullable=True),
        sa.Column('cpu_usage_percent', sa.Float(), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=False),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
        sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['profiling_session_id'], ['fenrir_profiling_sessions.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_service_startup_logs_session_id', 'fenrir_service_startup_logs', ['profiling_session_id'])
    op.create_index('idx_service_startup_logs_service', 'fenrir_service_startup_logs', ['service_name'])
    op.create_index('idx_service_startup_logs_timestamp', 'fenrir_service_startup_logs', ['timestamp'])


def downgrade() -> None:
    # Drop tables in reverse order
    op.drop_table('fenrir_service_startup_logs')
    op.drop_table('fenrir_database_connection_logs')
    op.drop_table('fenrir_exploit_attempts')
    op.drop_table('fenrir_exploit_sessions')
    op.drop_table('fenrir_profiling_results')
    op.drop_table('fenrir_memory_snapshots')
    op.drop_table('fenrir_profiling_sessions')
