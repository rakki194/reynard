[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "reynard-backend"
version = "0.1.0"
description = "Reynard Backend - FastAPI-based backend services"
authors = [{ name = "Reynard Team", email = "team@reynard.dev" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    "fastapi",
    "uvicorn[standard]",
    "python-jose[cryptography]",
    "python-dotenv",
    "python-multipart",
    "email-validator",
    "pydantic[email]",
    "slowapi",
    "limits",
    "torch",
    "torchvision",
    "pillow",
    "numpy",
    "asyncio",
    "sqlalchemy",
    "psycopg2-binary",
    "aiohttp",
    "pgvector",
    "argon2-cffi",
    "cryptography",
    "gatekeeper @ file://../libraries/gatekeeper",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "httpx",
    "pytest-mock",
    "pytest-xdist",
    "factory-boy",
    "faker",
    "freezegun",
    "responses",
]

dev = [
    "reynard-backend[test]",
    "black",
    "isort",
    "flake8",
    "mypy",
    "pre-commit",
]

[project.urls]
Homepage = "https://github.com/runeset/reynard"
Documentation = "https://docs.reynard.dev"
Repository = "https://github.com/runeset/reynard.git"
Issues = "https://github.com/runeset/reynard/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/venv/*", "*/env/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "pytest"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["torch.*", "torchvision.*", "psycopg2.*", "pgvector.*"]
ignore_missing_imports = true
