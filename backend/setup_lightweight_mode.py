#!/usr/bin/env python3
"""
Setup Lightweight RAG Mode
==========================

Script to set up lightweight RAG mode for development laptops and
resource-constrained environments.

üî• Phoenix approach: We rise from the ashes of heavy dependencies to soar
with efficient, lightweight services!
"""

import os
import sys
from pathlib import Path


def setup_lightweight_environment():
    """Set up environment variables for lightweight RAG mode."""
    print("üî• Setting up Lightweight RAG Mode")
    print("=" * 50)
    
    # Environment variables for lightweight mode
    env_vars = {
        # Enable lightweight mode
        "RAG_LIGHTWEIGHT_MODE": "true",
        "EMBEDDING_MOCK_MODE": "true",
        
        # Disable heavy dependencies
        "EMBEDDING_BACKENDS_ENABLED": "true",
        "EMBEDDING_DEFAULT_BACKEND": "mock",
        "OLLAMA_ENABLED": "false",
        "SENTENCE_TRANSFORMERS_ENABLED": "false",
        
        # Enable caching and indexing
        "RAG_ENABLED": "true",
        "VECTOR_STORE_ENABLED": "true",
        "DOCUMENT_INDEXING_ENABLED": "true",
        "SEARCH_ENABLED": "true",
        
        # Performance settings
        "EMBEDDING_CACHE_MAX_SIZE": "1000",
        "RAG_INGEST_BATCH_SIZE_TEXT": "50",
        "RAG_MAX_CONCURRENT_REQUESTS": "10",
        
        # Logging
        "RAG_LOG_LEVEL": "INFO",
    }
    
    # Set environment variables
    for key, value in env_vars.items():
        os.environ[key] = value
        print(f"‚úÖ Set {key}={value}")
    
    print(f"\nüî• Lightweight mode configured!")
    print(f"üìä Total variables set: {len(env_vars)}")
    
    return env_vars


def create_lightweight_env_file():
    """Create a .env file with lightweight configuration."""
    env_file = Path(".env.lightweight")
    
    print(f"\nüìù Creating lightweight environment file: {env_file}")
    
    env_content = """# Lightweight RAG Configuration
# Generated by setup_lightweight_mode.py

# Enable lightweight mode
RAG_LIGHTWEIGHT_MODE=true
EMBEDDING_MOCK_MODE=true

# Disable heavy dependencies
EMBEDDING_BACKENDS_ENABLED=true
EMBEDDING_DEFAULT_BACKEND=mock
OLLAMA_ENABLED=false
SENTENCE_TRANSFORMERS_ENABLED=false

# Enable caching and indexing
RAG_ENABLED=true
VECTOR_STORE_ENABLED=true
DOCUMENT_INDEXING_ENABLED=true
SEARCH_ENABLED=true

# Performance settings
EMBEDDING_CACHE_MAX_SIZE=1000
RAG_INGEST_BATCH_SIZE_TEXT=50
RAG_MAX_CONCURRENT_REQUESTS=10

# Logging
RAG_LOG_LEVEL=INFO
"""
    
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    print(f"‚úÖ Created {env_file}")
    print(f"üí° To use: source {env_file}")


def test_lightweight_setup():
    """Test that the lightweight setup is working."""
    print(f"\nüß™ Testing lightweight setup...")
    
    try:
        # Test imports
        from app.config.lightweight_rag_config import get_lightweight_rag_config
        from app.services.rag.lightweight_rag_service import get_lightweight_rag_service
        
        # Test configuration
        config = get_lightweight_rag_config()
        print(f"‚úÖ Configuration loaded: {config['rag_enabled']}")
        print(f"üî• Lightweight mode: {config['rag_lightweight_mode']}")
        print(f"üé≠ Mock mode: {config['embedding_backends']['mock_mode']}")
        
        # Test service
        service = get_lightweight_rag_service()
        print(f"‚úÖ Service created: {type(service).__name__}")
        
        print(f"\nüéâ Lightweight setup test passed!")
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Test error: {e}")
        return False
    
    return True


def main():
    """Main setup function."""
    print("üî• Phoenix Lightweight RAG Setup")
    print("=" * 60)
    
    # Set up environment
    env_vars = setup_lightweight_environment()
    
    # Create environment file
    create_lightweight_env_file()
    
    # Test setup
    if test_lightweight_setup():
        print(f"\nüéâ Lightweight RAG mode setup complete!")
        print(f"üí° Your laptop can now benefit from fast indexing and caching")
        print(f"   without heavy ML dependencies!")
    else:
        print(f"\n‚ùå Setup test failed. Please check the configuration.")
        sys.exit(1)


if __name__ == "__main__":
    main()
