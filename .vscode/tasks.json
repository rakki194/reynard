{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "üêç: Run Tests",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [ -f ~/venv/bin/activate ]; then source ~/venv/bin/activate && cd backend && python -m pytest tests/ -v; else echo \"Virtual environment not found at ~/venv/bin/activate, using system Python...\" && cd backend && python3 -m pytest tests/ -v; fi"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "üêç: Run Tests with Coverage",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [ -f ~/venv/bin/activate ]; then source ~/venv/bin/activate && cd backend && python -m pytest tests/ -v --cov=app --cov-report=html; else echo \"Virtual environment not found at ~/venv/bin/activate, using system Python...\" && cd backend && python3 -m pytest tests/ -v --cov=app --cov-report=html; fi"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "üêç: Lint with Ruff",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [ -f ~/venv/bin/activate ]; then source ~/venv/bin/activate && ruff check backend/ fenrir/ services/; else echo \"Virtual environment not found at ~/venv/bin/activate, using system ruff...\" && ruff check backend/ fenrir/ services/; fi"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "üêç: Format with Ruff",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [ -f ~/venv/bin/activate ]; then source ~/venv/bin/activate && ruff format backend/ fenrir/ services/; else echo \"Virtual environment not found at ~/venv/bin/activate, using system ruff...\" && ruff format backend/ fenrir/ services/; fi"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "üêç: Type Check with mypy",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [ -f ~/venv/bin/activate ]; then source ~/venv/bin/activate && mypy backend/ fenrir/ services/; else echo \"Virtual environment not found at ~/venv/bin/activate, using system mypy...\" && mypy backend/ fenrir/ services/; fi"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Python: Start Backend Server",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [ -f ~/venv/bin/activate ]; then source ~/venv/bin/activate && cd backend && python scripts/dev-server.py; else echo \"Virtual environment not found at ~/venv/bin/activate, using system Python...\" && cd backend && python3 scripts/dev-server.py; fi"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": []
    },
    {
      "label": "üêç Auto-Start Backend Server",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "if [ -f ~/venv/bin/activate ]; then source ~/venv/bin/activate && cd backend && python scripts/dev-server.py; else echo \"Virtual environment not found at ~/venv/bin/activate, using system Python...\" && cd backend && python3 scripts/dev-server.py; fi"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "isBackground": true,
      "runOptions": {
        "runOn": "folderOpen"
      },
      "problemMatcher": [],
      "detail": "Automatically start Python backend server when workspace opens"
    },
    {
      "label": "üêç: Run Security Tests",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && cd backend && python test_security_direct.py"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Install Dependencies",
      "type": "shell",
      "command": "pnpm",
      "args": ["install"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Run Tests",
      "type": "shell",
      "command": "pnpm",
      "args": ["test"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Run E2E Tests",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "e2e", "test"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Frontend: Build",
      "type": "shell",
      "command": "pnpm",
      "args": ["build"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "ü¶ä Format All Files",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "format"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Format all TypeScript, JavaScript, CSS, JSON, and Markdown files using Prettier"
    },
    {
      "label": "ü¶ä Format Check All Files",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "format:check"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Check formatting of all files without making changes"
    },
    {
      "label": "ü¶ä Lint All Files",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "lint"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": ["$eslint-stylish"],
      "detail": "Lint all TypeScript and JavaScript files using ESLint"
    },
    {
      "label": "ü¶ä Lint Fix All Files",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "lint:fix"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": ["$eslint-stylish"],
      "detail": "Lint and auto-fix all TypeScript and JavaScript files"
    },
    {
      "label": "ü¶ä Type Check All Files",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "typecheck"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": ["$tsc"],
      "detail": "Type check all TypeScript files"
    },
    {
      "label": "üìö Validate Markdown Files",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "markdown:validate"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Validate all Markdown files (ToC, lint, sentence length)"
    },
    {
      "label": "üìö Fix Markdown Files",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "markdown:toc:fix"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Auto-fix Markdown Table of Contents"
    },
    {
      "label": "üìö Fix Markdown Sentence Length",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "markdown:sentence:fix"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Auto-fix Markdown sentence length issues"
    },
    {
      "label": "üìö Check Markdown Links",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "markdown:links:check:all"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Validate all Markdown links"
    },
    {
      "label": "üê∫ Validate Shell Scripts",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "shell:check"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Validate all shell scripts using ShellCheck"
    },
    {
      "label": "üê∫ Validate Workflow Shell Scripts",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "cd packages/dev-tools/validation/workflows && pnpm start"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Extract and validate shell scripts from GitHub workflows using TypeScript tool"
    },
    {
      "label": "üé® Validate CSS Variables",
      "type": "shell",
      "command": "node",
      "args": ["packages/dev-tools/validation/css/validate-css-variables.js", "--strict"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Validate CSS variables across all themes"
    },
    {
      "label": "ü¶ä Run All Validations",
      "type": "shell",
      "command": "pnpm",
      "args": [
        "run",
        "format:check",
        "&&",
        "pnpm",
        "run",
        "lint",
        "&&",
        "pnpm",
        "run",
        "typecheck",
        "&&",
        "pnpm",
        "run",
        "python:validate",
        "&&",
        "pnpm",
        "run",
        "markdown:validate"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Run comprehensive validation across all file types"
    },
    {
      "label": "ü¶ä Fix All Issues",
      "type": "shell",
      "command": "pnpm",
      "args": [
        "run",
        "format",
        "&&",
        "pnpm",
        "run",
        "lint:fix",
        "&&",
        "pnpm",
        "run",
        "python:format",
        "&&",
        "pnpm",
        "run",
        "markdown:toc:fix",
        "&&",
        "pnpm",
        "run",
        "markdown:sentence:fix"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Auto-fix all fixable issues across all file types"
    },
    {
      "label": "üîÑ Queue-Based Validate Current File",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-queue-watcher", "start", "process", "${file}"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Run queue-based validation with perfect sequencing for current file"
    },
    {
      "label": "üîÑ Start Queue-Based Watcher",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-queue-watcher", "watch"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start queue-based watcher with perfect file processing sequencing - uses project architecture for directory discovery"
    },
    {
      "label": "üîÑ Auto-Start Queue-Based Watcher",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-queue-watcher", "watch"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "never",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": false
      },
      "isBackground": true,
      "runOptions": {
        "runOn": "folderOpen"
      },
      "problemMatcher": [],
      "detail": "Automatically start queue-based watcher when workspace opens - uses project architecture for directory discovery"
    },
    {
      "label": "üß™ Test Markdown Validation",
      "type": "shell",
      "command": "node",
      "args": ["scripts/testing/test-markdown-validation.js"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Test the markdown validation tools to ensure they're working correctly"
    },
    {
      "label": "üèÅ Test Race Condition Prevention",
      "type": "shell",
      "command": "node",
      "args": ["scripts/testing/test-race-condition.js"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Test race condition prevention between validation tools"
    },
    {
      "label": "üìö Test ToC Conflict Detection",
      "type": "shell",
      "command": "node",
      "args": ["scripts/testing/test-toc-conflict.js"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Test for ToC conflicts between multiple validators"
    },
    {
      "label": "üíæ Test Save Simulation",
      "type": "shell",
      "command": "node",
      "args": ["scripts/testing/test-save-simulation.js"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Simulate the actual save process to detect ToC conflicts"
    },
    {
      "label": "üîÑ Test Queue System",
      "type": "shell",
      "command": "node",
      "args": ["scripts/testing/test-queue-system.js"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Test the queue-based file processing system"
    },
    {
      "label": "ü¶ä CHANGELOG.md Codebase Scanner",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "cd /home/kade/runeset/reynard && python3 scripts/efficient-changelog-scanner.py"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Comprehensive codebase scan using efficient file operations"
    },
    {
      "label": "ü¶ä Quick CHANGELOG.md Scan",
      "type": "shell",
      "command": "./scripts/trigger-changelog-scan.sh",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Quick trigger script for CHANGELOG.md codebase scanning"
    },
    {
      "label": "ü¶ä CHANGELOG.md Queue Watcher",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-queue-watcher", "start", "CHANGELOG.md"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": [],
      "detail": "Queue-based validation specifically for CHANGELOG.md file"
    },
    {
      "label": "ü¶ä Start CHANGELOG.md File Watcher",
      "type": "shell",
      "command": "./scripts/changelog-watcher.sh",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start file watcher that triggers markdown linting and formatting when CHANGELOG.md is saved"
    },
    {
      "label": "ü¶ä Auto-Start CHANGELOG.md Watcher",
      "type": "shell",
      "command": "./scripts/changelog-watcher.sh",
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "never",
        "focus": false,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": false
      },
      "isBackground": true,
      "runOptions": {
        "runOn": "folderOpen"
      },
      "problemMatcher": [],
      "detail": "Automatically start CHANGELOG.md file watcher with markdown linting when workspace opens"
    },
    {
      "label": "üöÄ Dev Server Manager - Status",
      "type": "shell",
      "command": "dev-server",
      "args": ["status"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Show status of all running development servers"
    },
    {
      "label": "üöÄ Dev Server Manager - List Projects",
      "type": "shell",
      "command": "dev-server",
      "args": ["list"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "List all available Reynard projects for development"
    },
    {
      "label": "üöÄ Dev Server Manager - Stop All",
      "type": "shell",
      "command": "dev-server",
      "args": ["stop-all"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Stop all running development servers"
    },
    {
      "label": "üß™ Vitest Global Queue - Status",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/testing/vitest-global-queue.sh", "status"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Show status of global vitest process queue"
    },
    {
      "label": "üß™ Vitest Global Queue - Cleanup",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/testing/vitest-global-queue.sh", "cleanup"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Clean up dead vitest processes from global queue"
    },
    {
      "label": "üß™ Vitest Global Queue - Run Tests",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/testing/vitest-global-queue.sh", "run", "vscode-agent", "--run"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Run tests using global vitest queue with agent coordination"
    },
    {
      "label": "üß™ Vitest Global Queue - Run Coverage",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/testing/vitest-global-queue.sh", "run", "vscode-agent", "--coverage"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Run test coverage using global vitest queue"
    },
    {
      "label": "üîç Shell Script Validation",
      "type": "shell",
      "command": "bash",
      "args": ["packages/dev-tools/validation/validate-shell-scripts.sh"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Validate all shell scripts using shellcheck"
    },
    {
      "label": "üîç Workflow Validation",
      "type": "shell",
      "command": "bash",
      "args": ["packages/dev-tools/validation/validate-workflows.sh"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Validate all GitHub Actions workflows using actionlint"
    },
    {
      "label": "ü¶ä MCP Server - Start",
      "type": "shell",
      "command": "bash",
      "args": ["services/mcp-server/start-mcp-server.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start the Reynard MCP server for agent integration"
    },
    {
      "label": "ü¶ä MCP Server - Test Tools",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && cd services/mcp-server && python test_tools_list.py"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test MCP server tools and functionality"
    },
    {
      "label": "ü¶ä MCP Server - Debug",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && cd services/mcp-server && python debug_mcp.py"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Debug MCP server configuration and connections"
    },
    {
      "label": "üéØ Agent Diagram Generator",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && cd scripts/agent_diagram && python cli.py generate"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Generate agent contribution diagrams"
    },
    {
      "label": "üéØ Agent Diagram - Test",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && cd scripts/agent_diagram && python -m pytest tests/ -v"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Run tests for agent diagram generator"
    },
    {
      "label": "üìä Dependency Analysis",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/analyze-deps.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Analyze package dependencies and identify unused packages"
    },
    {
      "label": "üîç Circular Dependency Detection",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/detect-circular.sh"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Detect circular dependencies in the monorepo"
    },
    {
      "label": "üßπ Tracked Junk Files Detection",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/detect-tracked-junk-files.sh"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Detect tracked files that should be in .gitignore"
    },
    {
      "label": "üîß Fix Package Builds",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/fix-package-builds.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Fix common package build issues across the monorepo"
    },
    {
      "label": "‚ö° Optimize Peer Dependencies",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/optimize-peer-deps.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Optimize peer dependencies across packages"
    },
    {
      "label": "üîÑ Update Package Configs",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/update-package-configs.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Update package configurations across the monorepo"
    },
    {
      "label": "üé® Generate Project Diagrams",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/generate-project-diagrams.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Generate visual diagrams of project architecture"
    },
    {
      "label": "üêç Python Workflow Automation",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/python-workflow-automation.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Run Python workflow automation tasks"
    },
    {
      "label": "üîí Setup SSL Certificates",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/setup-ssl.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Setup SSL certificates for development"
    },
    {
      "label": "üöÄ Deploy to Production (CPU)",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/deploy-cpu-production.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Deploy to CPU-optimized production environment"
    },
    {
      "label": "üöÄ Deploy to Production (Full)",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/deploy-production.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Deploy to full production environment"
    },
    {
      "label": "üß™ Test Production Deployment",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/test-production.sh"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test production deployment configuration"
    },
    {
      "label": "üéÆ ECS World Simulation",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && cd backend && python -m uvicorn app.main:app --reload"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start ECS world simulation for agent testing"
    },
    {
      "label": "üéÆ ECS World - Test Simple",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && cd services/mcp-server && python simple_trait_simulation.py"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Run simple ECS trait simulation test"
    },
    {
      "label": "üéÆ ECS World - Test Comprehensive",
      "type": "shell",
      "command": "bash",
      "args": [
        "-c",
        "source ~/venv/bin/activate && cd services/mcp-server && python comprehensive_agent_simulation.py"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Run comprehensive ECS agent simulation test"
    },
    {
      "label": "üéØ Game Engine - Test ECS",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-games", "test", "--", "--run", "src/ecs"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test ECS game engine components"
    },
    {
      "label": "üéØ Game Engine - Test Collision",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-games", "test", "--", "--run", "src/collision"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test collision detection systems"
    },
    {
      "label": "üéØ Game Engine - Test Performance",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-games", "test", "--", "--run", "src/performance"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test game engine performance optimizations"
    },
    {
      "label": "üé® 3D Engine - Test Components",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-3d", "test", "--", "--run"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test 3D engine components and rendering"
    },
    {
      "label": "üß† AI Shared - Test Models",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-ai-shared", "test", "--", "--run"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test AI model management and utilities"
    },
    {
      "label": "üîç RAG System - Test Search",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-rag", "test", "--", "--run"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test RAG search and embedding systems"
    },
    {
      "label": "üìä Charts - Test Visualizations",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-charts", "test", "--", "--run"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test chart components and data visualizations"
    },
    {
      "label": "üé® Animation - Test Systems",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-animation", "test", "--", "--run"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test animation systems and transitions"
    },
    {
      "label": "üîß Code Quality - Test Security",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "reynard-code-quality", "test", "--", "--run", "src/security"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test code quality security analysis tools"
    },
    {
      "label": "üåê I18n - Test Translations",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/testing/i18n-test-all.sh"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test internationalization and translation systems"
    },
    {
      "label": "üåê I18n - CI Validation",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/testing/i18n-ci.sh"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Run CI validation for i18n systems"
    },
    {
      "label": "üåê I18n - CI Validation (Lenient)",
      "type": "shell",
      "command": "bash",
      "args": ["scripts/testing/i18n-ci-lenient.sh"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Run lenient CI validation for i18n systems"
    },
    {
      "label": "üìö Documentation - Generate",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "docs:generate"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Generate documentation from code"
    },
    {
      "label": "üìö Documentation - Watch",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "docs:watch"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Watch and regenerate documentation on changes"
    },
    {
      "label": "üìö Documentation - Dev Server",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "docs:dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start documentation development server"
    },
    {
      "label": "üìö Documentation - Build",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "docs:build"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Build documentation for production"
    },
    {
      "label": "üìö Documentation - Serve",
      "type": "shell",
      "command": "pnpm",
      "args": ["run", "docs:serve"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Serve built documentation locally"
    },
    {
      "label": "üß™ Test Mermaid Rendering",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && python scripts/test_mermaid_render.py"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test Mermaid diagram rendering functionality"
    },
    {
      "label": "üß™ Test Enhanced Search",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && python scripts/test_enhanced_search.py"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test enhanced search functionality"
    },
    {
      "label": "üß™ Test Backend Integration",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && python scripts/test-backend.py"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test backend integration and API endpoints"
    },
    {
      "label": "üîí Test MCP Authentication",
      "type": "shell",
      "command": "bash",
      "args": ["-c", "source ~/venv/bin/activate && python scripts/test-mcp-auth.py"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Test MCP server authentication and security"
    },
    {
      "label": "üéØ Examples - 3D Demo",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "3d-demo", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start 3D demo example application"
    },
    {
      "label": "üéØ Examples - Algorithm Bench",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "algo-bench", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start algorithm benchmarking example"
    },
    {
      "label": "üéØ Examples - Auth App",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "auth-app", "dev:full"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start authentication example with backend"
    },
    {
      "label": "üéØ Examples - Comprehensive Dashboard",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "comprehensive-dashboard", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start comprehensive dashboard example"
    },
    {
      "label": "üéØ Examples - ECS Agent Tracker",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "ecs-agent-tracker", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start ECS agent tracker example"
    },
    {
      "label": "üéØ Examples - Image Caption App",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "image-caption-app", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start image caption AI example"
    },
    {
      "label": "üéØ Examples - Prompt Note",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "prompt-note", "start:full"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start prompt note example with backend"
    },
    {
      "label": "üéØ Examples - Test App",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "test-app", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start test application example"
    },
    {
      "label": "üéØ Examples - Hue Shifting Demo",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "hue-shifting-demo", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start hue shifting color demo"
    },
    {
      "label": "üéØ Examples - I18n Demo",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "i18n-demo", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start internationalization demo"
    },
    {
      "label": "üéØ Examples - Icons Demo",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "icons-demo", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start icons showcase demo"
    },
    {
      "label": "üéØ Examples - Multi Theme Demo",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "multi-theme", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start multi-theme demonstration"
    },
    {
      "label": "üéØ Examples - RAG Demo",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "rag-demo", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start RAG (Retrieval Augmented Generation) demo"
    },
    {
      "label": "üéØ Examples - Features App",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "features-app", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start features showcase application"
    },
    {
      "label": "üéØ Examples - File Test",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "file-test", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start file processing test application"
    },
    {
      "label": "üéØ Examples - Clock",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "clock", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start clock component demo"
    },
    {
      "label": "üéØ Examples - Comfy Demo",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "comfy-demo", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start ComfyUI integration demo"
    },
    {
      "label": "üéØ Examples - Error Demo",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "error-demo", "dev:full"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start error handling demonstration"
    },
    {
      "label": "üéØ Examples - Embedding Visualization",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "embedding-visualization-demo", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start embedding visualization demo"
    },
    {
      "label": "üéØ Examples - Basic App",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "basic-app", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start basic application template"
    },
    {
      "label": "üéØ Examples - Tutorial App",
      "type": "shell",
      "command": "pnpm",
      "args": ["--filter", "tutorial-app", "dev"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "isBackground": true,
      "problemMatcher": [],
      "detail": "Start tutorial application"
    },
    {
      "label": "ü¶ä Generate Vitest Config",
      "type": "shell",
      "command": "pnpm",
      "args": ["vitest:generate"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "ü¶ä Regenerate Vitest Config",
      "type": "shell",
      "command": "pnpm",
      "args": ["vitest:regenerate"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "ü¶ä Backup Vitest Config",
      "type": "shell",
      "command": "pnpm",
      "args": ["vitest:backup"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "üêç Setup Python Interpreter",
      "type": "shell",
      "command": "bash",
      "args": [".vscode/setup-python-interpreter.sh"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Detect and configure the best Python interpreter for the workspace"
    }
  ]
}
