{
  "version": "1.0.0",
  "last_updated": "",
  "tools": {
    "generate_agent_name": {
      "name": "generate_agent_name",
      "category": "agent",
      "enabled": true,
      "description": "Generate robot names with animal spirit themes",
      "dependencies": [],
      "config": {}
    },
    "assign_agent_name": {
      "name": "assign_agent_name",
      "category": "agent",
      "enabled": true,
      "description": "Assign names to agents with persistence",
      "dependencies": [],
      "config": {}
    },
    "get_agent_name": {
      "name": "get_agent_name",
      "category": "agent",
      "enabled": true,
      "description": "Retrieve current agent names",
      "dependencies": [],
      "config": {}
    },
    "list_agent_names": {
      "name": "list_agent_names",
      "category": "agent",
      "enabled": true,
      "description": "List all assigned agent names",
      "dependencies": [],
      "config": {}
    },
    "roll_agent_spirit": {
      "name": "roll_agent_spirit",
      "category": "agent",
      "enabled": true,
      "description": "Randomly select animal spirits",
      "dependencies": [],
      "config": {}
    },
    "agent_startup_sequence": {
      "name": "agent_startup_sequence",
      "category": "agent",
      "enabled": true,
      "description": "Complete initialization with ECS integration",
      "dependencies": [],
      "config": {}
    },
    "get_agent_persona": {
      "name": "get_agent_persona",
      "category": "agent",
      "enabled": true,
      "description": "Get comprehensive agent persona from ECS system",
      "dependencies": [],
      "config": {}
    },
    "get_lora_config": {
      "name": "get_lora_config",
      "category": "agent",
      "enabled": true,
      "description": "Get LoRA configuration for agent persona",
      "dependencies": [],
      "config": {}
    },
    "get_current_time": {
      "name": "get_current_time",
      "category": "utility",
      "enabled": true,
      "description": "Get current date and time with timezone support",
      "dependencies": [],
      "config": {}
    },
    "get_current_location": {
      "name": "get_current_location",
      "category": "utility",
      "enabled": true,
      "description": "Get location based on IP address",
      "dependencies": [],
      "config": {}
    },
    "send_desktop_notification": {
      "name": "send_desktop_notification",
      "category": "utility",
      "enabled": true,
      "description": "Send desktop notifications using libnotify",
      "dependencies": [],
      "config": {}
    },
    "restart_mcp_server": {
      "name": "restart_mcp_server",
      "category": "utility",
      "enabled": true,
      "description": "Restart the MCP server with different methods",
      "dependencies": [],
      "config": {}
    },
    "create_ecs_agent": {
      "name": "create_ecs_agent",
      "category": "ecs",
      "enabled": true,
      "description": "Create a new agent using the ECS system",
      "dependencies": [],
      "config": {}
    },
    "create_ecs_offspring": {
      "name": "create_ecs_offspring",
      "category": "ecs",
      "enabled": true,
      "description": "Create offspring agent from two parent agents using ECS",
      "dependencies": [],
      "config": {}
    },
    "get_ecs_agent_status": {
      "name": "get_ecs_agent_status",
      "category": "ecs",
      "enabled": true,
      "description": "Get status of all agents in the ECS system",
      "dependencies": [],
      "config": {}
    },
    "get_ecs_agent_positions": {
      "name": "get_ecs_agent_positions",
      "category": "ecs",
      "enabled": true,
      "description": "Get positions of all agents in the ECS system",
      "dependencies": [],
      "config": {}
    },
    "get_simulation_status": {
      "name": "get_simulation_status",
      "category": "ecs",
      "enabled": true,
      "description": "Get comprehensive ECS world simulation status",
      "dependencies": [],
      "config": {}
    },
    "accelerate_time": {
      "name": "accelerate_time",
      "category": "ecs",
      "enabled": true,
      "description": "Adjust time acceleration factor for world simulation",
      "dependencies": [],
      "config": {}
    },
    "nudge_time": {
      "name": "nudge_time",
      "category": "ecs",
      "enabled": true,
      "description": "Nudge simulation time forward (for MCP actions)",
      "dependencies": [],
      "config": {}
    },
    "lint_frontend": {
      "name": "lint_frontend",
      "category": "linting",
      "enabled": true,
      "description": "ESLint for TypeScript/JavaScript (with auto-fix)",
      "dependencies": [],
      "config": {}
    },
    "lint_python": {
      "name": "lint_python",
      "category": "linting",
      "enabled": true,
      "description": "Flake8, Pylint for Python (with auto-fix)",
      "dependencies": [],
      "config": {}
    },
    "lint_markdown": {
      "name": "lint_markdown",
      "category": "linting",
      "enabled": true,
      "description": "markdownlint validation (with auto-fix)",
      "dependencies": [],
      "config": {}
    },
    "run_all_linting": {
      "name": "run_all_linting",
      "category": "linting",
      "enabled": true,
      "description": "Execute entire linting suite (with auto-fix)",
      "dependencies": [],
      "config": {}
    },
    "format_frontend": {
      "name": "format_frontend",
      "category": "formatting",
      "enabled": true,
      "description": "Prettier formatting (with check-only mode)",
      "dependencies": [],
      "config": {}
    },
    "format_python": {
      "name": "format_python",
      "category": "formatting",
      "enabled": true,
      "description": "Black + isort formatting (with check-only mode)",
      "dependencies": [],
      "config": {}
    },
    "search_files": {
      "name": "search_files",
      "category": "search",
      "enabled": true,
      "description": "Search for files by name pattern in the project",
      "dependencies": [],
      "config": {}
    },
    "semantic_search": {
      "name": "semantic_search",
      "category": "search",
      "enabled": true,
      "description": "Perform semantic search using vector embeddings",
      "dependencies": [],
      "config": {}
    },
    "search_enhanced": {
      "name": "search_enhanced",
      "category": "search",
      "enabled": true,
      "description": "Enhanced BM25 search with query expansion",
      "dependencies": [],
      "config": {}
    },
    "validate_mermaid_diagram": {
      "name": "validate_mermaid_diagram",
      "category": "visualization",
      "enabled": true,
      "description": "Validate mermaid diagram syntax and check for errors",
      "dependencies": [],
      "config": {}
    },
    "render_mermaid_to_svg": {
      "name": "render_mermaid_to_svg",
      "category": "visualization",
      "enabled": true,
      "description": "Render mermaid diagram to SVG format",
      "dependencies": [],
      "config": {}
    },
    "open_image": {
      "name": "open_image",
      "category": "visualization",
      "enabled": true,
      "description": "Open an image file with the imv image viewer",
      "dependencies": [],
      "config": {}
    },
    "scan_security": {
      "name": "scan_security",
      "category": "security",
      "enabled": true,
      "description": "Complete security audit (Bandit, audit-ci, type checking)",
      "dependencies": [],
      "config": {}
    },
    "scan_security_fast": {
      "name": "scan_security_fast",
      "category": "security",
      "enabled": true,
      "description": "Run fast security scanning (skips slow Bandit checks)",
      "dependencies": [],
      "config": {}
    },
    "get_versions": {
      "name": "get_versions",
      "category": "version",
      "enabled": true,
      "description": "Get versions of Python, Node.js, npm, pnpm, and TypeScript",
      "dependencies": [],
      "config": {}
    },
    "get_python_version": {
      "name": "get_python_version",
      "category": "version",
      "enabled": true,
      "description": "Get Python version information",
      "dependencies": [],
      "config": {}
    },
    "get_vscode_active_file": {
      "name": "get_vscode_active_file",
      "category": "vscode",
      "enabled": true,
      "description": "Get currently active file path in VS Code",
      "dependencies": [],
      "config": {}
    },
    "discover_vscode_tasks": {
      "name": "discover_vscode_tasks",
      "category": "vscode",
      "enabled": true,
      "description": "Discover all available VS Code tasks from tasks.json",
      "dependencies": [],
      "config": {}
    },
    "playwright_screenshot": {
      "name": "playwright_screenshot",
      "category": "playwright",
      "enabled": true,
      "description": "Take screenshots using Playwright browser automation",
      "dependencies": [],
      "config": {}
    },
    "playwright_navigate": {
      "name": "playwright_navigate",
      "category": "playwright",
      "enabled": true,
      "description": "Navigate to URLs and interact with web pages",
      "dependencies": [],
      "config": {}
    },
    "detect_monoliths": {
      "name": "detect_monoliths",
      "category": "monolith",
      "enabled": true,
      "description": "Detect large monolithic files that violate the 140-line axiom",
      "dependencies": [],
      "config": {}
    },
    "analyze_file_complexity": {
      "name": "analyze_file_complexity",
      "category": "monolith",
      "enabled": true,
      "description": "Deep-dive analysis of a specific file's complexity metrics",
      "dependencies": [],
      "config": {}
    },
    "get_secret": {
      "name": "get_secret",
      "category": "utility",
      "enabled": true,
      "description": "Retrieve a user secret by name (e.g., GH_TOKEN for GitHub operations)",
      "dependencies": [],
      "config": {}
    },
    "list_available_secrets": {
      "name": "list_available_secrets",
      "category": "utility",
      "enabled": true,
      "description": "List all available secrets that agents can access",
      "dependencies": [],
      "config": {}
    },
    "validate_secret": {
      "name": "validate_secret",
      "category": "utility",
      "enabled": true,
      "description": "Validate that a secret is properly configured and accessible",
      "dependencies": [],
      "config": {}
    }
  }
}
