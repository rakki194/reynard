/**
 * Markdown Output Handler
 *
 * Handles outputting trace analysis results in Markdown format.
 */

import { writeFileSync } from "fs";
import type { CLIOptions, TraceAnalysis } from "../types";

export class MarkdownOutputHandler {
  /**
   * Output analysis results in Markdown format
   */
  static async output(
    analysis: TraceAnalysis,
    options: CLIOptions,
    analyzer: { generateReport: (analysis: any, outputPath?: string) => string }
  ): Promise<void> {
    const outputPath = options.output || `trace-analysis-${Date.now()}.md`;
    const markdownReport = analyzer.generateReport(analysis, outputPath);

    if (!options.output) {
      console.log(markdownReport);
    }
  }

  /**
   * Output comparison results in Markdown format
   */
  static async outputComparison(
    analysis1: TraceAnalysis,
    analysis2: TraceAnalysis,
    options: CLIOptions
  ): Promise<void> {
    const outputPath = options.output || `trace-comparison-${Date.now()}.md`;
    const markdownReport = this.generateComparisonReport(analysis1, analysis2);

    if (options.output) {
      writeFileSync(outputPath, markdownReport);
      console.log(`📄 Comparison report saved to: ${outputPath}`);
    } else {
      console.log(markdownReport);
    }
  }

  /**
   * Generate Markdown comparison report
   */
  private static generateComparisonReport(analysis1: TraceAnalysis, analysis2: TraceAnalysis): string {
    const timestamp = new Date().toISOString();

    return `# Trace Analysis Comparison

Generated: ${timestamp}

## Overview

| Metric | Before | After | Change |
|--------|--------|-------|--------|
| Duration | ${analysis1.totalDuration.toFixed(1)}ms | ${analysis2.totalDuration.toFixed(1)}ms | ${this.getChange(analysis1.totalDuration, analysis2.totalDuration)} |
| Resources | ${analysis1.resources.length} | ${analysis2.resources.length} | ${this.getChange(analysis1.resources.length, analysis2.resources.length)} |
| Errors | ${analysis1.errors.length} | ${analysis2.errors.length} | ${this.getChange(analysis1.errors.length, analysis2.errors.length)} |

## Performance Metrics

| Metric | Before | After | Change |
|--------|--------|-------|--------|
| First Contentful Paint | ${analysis1.performance.firstContentfulPaint.toFixed(0)}ms | ${analysis2.performance.firstContentfulPaint.toFixed(0)}ms | ${this.getChange(analysis1.performance.firstContentfulPaint, analysis2.performance.firstContentfulPaint)} |
| Largest Contentful Paint | ${analysis1.performance.largestContentfulPaint.toFixed(0)}ms | ${analysis2.performance.largestContentfulPaint.toFixed(0)}ms | ${this.getChange(analysis1.performance.largestContentfulPaint, analysis2.performance.largestContentfulPaint)} |
| Cumulative Layout Shift | ${analysis1.performance.cumulativeLayoutShift.toFixed(3)} | ${analysis2.performance.cumulativeLayoutShift.toFixed(3)} | ${this.getChange(analysis1.performance.cumulativeLayoutShift, analysis2.performance.cumulativeLayoutShift)} |

## Detailed Analysis

### Before Analysis
- **Trace File**: ${analysis1.traceFile}
- **Total Duration**: ${analysis1.totalDuration.toFixed(1)}ms
- **Resources**: ${analysis1.resources.length}
- **Errors**: ${analysis1.errors.length}
- **Screenshots**: ${analysis1.screenshots.length}

### After Analysis
- **Trace File**: ${analysis2.traceFile}
- **Total Duration**: ${analysis2.totalDuration.toFixed(1)}ms
- **Resources**: ${analysis2.resources.length}
- **Errors**: ${analysis2.errors.length}
- **Screenshots**: ${analysis2.screenshots.length}

## Recommendations

${analysis2.recommendations.map((rec, i) => `${i + 1}. ${rec}`).join("\n")}

---
*Generated by Reynard Trace Analyzer*
`;
  }

  /**
   * Format change percentage with emoji
   */
  private static getChange(old: number, newVal: number): string {
    const change = ((newVal - old) / old) * 100;
    const sign = change > 0 ? "+" : "";
    const emoji = change > 0 ? "📈" : change < 0 ? "📉" : "➡️";
    return `${emoji} ${sign}${change.toFixed(1)}%`;
  }
}
