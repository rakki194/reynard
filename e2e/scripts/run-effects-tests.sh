#!/bin/bash

# 🦊 EFFECTS TEST RUNNER
# 
# *whiskers twitch with strategic cunning* Script to run the comprehensive
# effects monitoring test suite that prevents Cloudflare-style outages.

set -e

echo "🦊 Starting Effects Monitoring Test Suite"
echo "========================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
TEST_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
RESULTS_DIR="$TEST_DIR/results/effects"
CONFIG_FILE="$TEST_DIR/configs/playwright.config.effects.ts"

# Create results directory
mkdir -p "$RESULTS_DIR"

echo -e "${BLUE}📁 Test Directory:${NC} $TEST_DIR"
echo -e "${BLUE}📊 Results Directory:${NC} $RESULTS_DIR"
echo -e "${BLUE}⚙️  Config File:${NC} $CONFIG_FILE"
echo ""

# Check if Playwright is installed
if ! command -v npx &> /dev/null; then
    echo -e "${RED}❌ npx not found. Please install Node.js and npm.${NC}"
    exit 1
fi

# Check if config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "${RED}❌ Config file not found: $CONFIG_FILE${NC}"
    exit 1
fi

# Function to run tests with specific browser
run_tests() {
    local browser=$1
    local description=$2
    
    echo -e "${YELLOW}🧪 Running tests with $description...${NC}"
    
    npx playwright test \
        --config="$CONFIG_FILE" \
        --project="$browser" \
        --reporter=json,junit \
        --output-dir="$RESULTS_DIR/$browser" \
        --timeout=60000
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ $description tests passed${NC}"
    else
        echo -e "${RED}❌ $description tests failed${NC}"
        return 1
    fi
}

# Function to generate summary report
generate_summary() {
    echo -e "${BLUE}📊 Generating summary report...${NC}"
    
    local summary_file="$RESULTS_DIR/test-summary.md"
    
    cat > "$summary_file" << EOF
# 🦊 Effects Monitoring Test Summary

## Test Execution
- **Date**: $(date)
- **Test Suite**: Cloudflare Outage Prevention
- **Framework**: SolidJS createEffect Monitoring

## Test Results
EOF

    # Check results for each browser
    for browser in chromium-effects firefox-effects webkit-effects; do
        local browser_dir="$RESULTS_DIR/$browser"
        if [ -d "$browser_dir" ]; then
            local result_file="$browser_dir/results.json"
            if [ -f "$result_file" ]; then
                local passed=$(jq '.stats.passed // 0' "$result_file" 2>/dev/null || echo "0")
                local failed=$(jq '.stats.failed // 0' "$result_file" 2>/dev/null || echo "0")
                local total=$(jq '.stats.total // 0' "$result_file" 2>/dev/null || echo "0")
                
                echo "### $browser" >> "$summary_file"
                echo "- **Total Tests**: $total" >> "$summary_file"
                echo "- **Passed**: $passed" >> "$summary_file"
                echo "- **Failed**: $failed" >> "$summary_file"
                echo "" >> "$summary_file"
            fi
        fi
    done
    
    cat >> "$summary_file" << EOF

## Key Findings
- Infinite loop detection mechanisms tested
- API call spam prevention verified
- Performance monitoring validated
- Prevention patterns demonstrated

## Recommendations
1. Implement stable object references using createMemo
2. Use primitive dependencies with createSignal
3. Apply API call optimization patterns
4. Set up continuous monitoring in production
5. Regular review of effect execution patterns

## Cloudflare Outage Prevention
This test suite ensures protection against the React useEffect dependency array issue that caused the Cloudflare outage on September 12, 2025. By implementing proper reactive patterns and comprehensive monitoring, we can prevent infinite loops and maintain system stability.

---
*Generated by Reynard Effects Monitoring System*
EOF

    echo -e "${GREEN}✅ Summary report generated: $summary_file${NC}"
}

# Function to show results summary
show_results_summary() {
    echo -e "${BLUE}📊 Test results available in:${NC} $RESULTS_DIR"
    echo -e "${BLUE}📋 JSON results:${NC} $RESULTS_DIR/effects-results.json"
    echo -e "${BLUE}📋 JUnit results:${NC} $RESULTS_DIR/effects-results.xml"
}

# Main execution
main() {
    local overall_success=true
    
    # Run tests for each browser
    run_tests "chromium-effects" "Chromium" || overall_success=false
    run_tests "firefox-effects" "Firefox" || overall_success=false
    run_tests "webkit-effects" "WebKit" || overall_success=false
    
    # Generate summary report
    generate_summary
    
    # Show results
    echo ""
    echo "🦊 Effects Monitoring Test Suite Complete"
    echo "========================================"
    
    if [ "$overall_success" = true ]; then
        echo -e "${GREEN}✅ All tests passed successfully!${NC}"
        echo -e "${GREEN}🛡️  Cloudflare-style outages prevented!${NC}"
    else
        echo -e "${RED}❌ Some tests failed. Please review the results.${NC}"
        echo -e "${YELLOW}🔍 Check the JSON/JUnit reports for detailed information.${NC}"
    fi
    
    echo ""
    show_results_summary
    echo -e "${BLUE}📋 Summary report:${NC} $RESULTS_DIR/test-summary.md"
    
    # Exit with appropriate code
    if [ "$overall_success" = true ]; then
        exit 0
    else
        exit 1
    fi
}

# Handle script interruption
trap 'echo -e "\n${YELLOW}⚠️  Test execution interrupted${NC}"; exit 130' INT

# Run main function
main "$@"
