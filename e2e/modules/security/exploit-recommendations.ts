/**
 * 🐺 EXPLOIT RECOMMENDATIONS
 *
 * *snarls with predatory focus* Generates security recommendations
 * based on exploit results and vulnerability types.
 */

/**
 * Generate exploit-specific recommendations
 */
export function generateExploitRecommendations(exploitModule: string, vulnerabilityCount: number): string[] {
  if (vulnerabilityCount === 0) {
    return [`✅ ${exploitModule} - No vulnerabilities found`];
  }

  const recommendations: string[] = [];

  if (exploitModule.includes("jwt")) {
    recommendations.push("🔐 JWT Security Recommendations:");
    recommendations.push("  • Use persistent, secure secret keys");
    recommendations.push("  • Implement proper token rotation");
    recommendations.push("  • Add token validation middleware");
  }

  if (exploitModule.includes("sql")) {
    recommendations.push("🛡️ SQL Injection Prevention:");
    recommendations.push("  • Use parameterized queries exclusively");
    recommendations.push("  • Implement input validation");
    recommendations.push("  • Add database access controls");
  }

  if (exploitModule.includes("path")) {
    recommendations.push("📁 Path Traversal Prevention:");
    recommendations.push("  • Implement proper path validation");
    recommendations.push("  • Use allowlists for file access");
    recommendations.push("  • Add file system access controls");
  }

  if (exploitModule.includes("cors")) {
    recommendations.push("🌐 CORS Security:");
    recommendations.push("  • Configure specific allowed origins");
    recommendations.push("  • Avoid wildcard origins");
    recommendations.push("  • Implement proper CORS headers");
  }

  if (exploitModule.includes("rate")) {
    recommendations.push("⚡ Rate Limiting:");
    recommendations.push("  • Implement proper rate limiting");
    recommendations.push("  • Add IP-based restrictions");
    recommendations.push("  • Monitor for bypass attempts");
  }

  return recommendations;
}

/**
 * Determine severity based on vulnerability count
 */
export function determineSeverity(count: number): "LOW" | "MEDIUM" | "HIGH" | "CRITICAL" {
  if (count >= 5) return "CRITICAL";
  if (count >= 3) return "HIGH";
  if (count >= 1) return "MEDIUM";
  return "LOW";
}
