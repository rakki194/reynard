/**
 * I18n Section Generator
 *
 * ðŸ¦¦ *splashes with section precision* Utilities for generating
 * specific sections of markdown performance reports.
 */

import { I18nPerformanceAnalyzer } from "./i18n-performance-analyzer";
import { BenchmarkSummary } from "./i18n-performance-types";

export class I18nSectionGenerator {
  private readonly analyzer: I18nPerformanceAnalyzer;

  constructor(analyzer: I18nPerformanceAnalyzer) {
    this.analyzer = analyzer;
  }

  /**
   * Generate report header
   */
  generateReportHeader(summary: BenchmarkSummary, timestamp: string): string {
    let header = `# I18n Performance Benchmark Report\n\n`;
    header += `**Generated**: ${timestamp}\n`;
    header += `**Total Tests**: ${summary.totalTests}\n`;
    header += `**Passed**: ${summary.passedTests} (${((summary.passedTests / summary.totalTests) * 100).toFixed(1)}%)\n`;
    header += `**Failed**: ${summary.failedTests}\n`;
    header += `**Performance Grade**: ${summary.performanceGrade}\n\n`;
    return header;
  }

  /**
   * Generate executive summary
   */
  generateExecutiveSummary(summary: BenchmarkSummary): string {
    let section = `## Executive Summary\n\n`;
    section += `This report presents comprehensive performance benchmarks for i18n implementations in the Reynard framework.\n\n`;
    section += `### Key Metrics\n\n`;
    section += `- **Average Load Time**: ${summary.averageLoadTime.toFixed(2)}ms\n`;
    section += `- **Average Render Time**: ${summary.averageRenderTime.toFixed(2)}ms\n`;
    section += `- **Average Memory Usage**: ${(summary.averageMemoryUsage / 1024 / 1024).toFixed(2)}MB\n\n`;
    section += `### Performance Grade: ${summary.performanceGrade}\n\n`;
    section += this.analyzer.getGradeDescription(summary.performanceGrade);
    return section;
  }

  /**
   * Generate recommendations section
   */
  generateRecommendations(summary: BenchmarkSummary): string {
    let section = `## Recommendations\n\n`;
    summary.recommendations.forEach((recommendation, index) => {
      section += `${index + 1}. ${recommendation}\n`;
    });
    return section + `\n`;
  }

  /**
   * Generate methodology section
   */
  generateMethodology(): string {
    return (
      `## Methodology\n\n` +
      `This benchmark suite uses Playwright for browser automation and the Performance API for accurate measurements.\n\n` +
      `### Test Environment\n` +
      `- **Browsers**: Chromium, Firefox, WebKit\n` +
      `- **Iterations**: 10 per test\n` +
      `- **Warmup**: 3 iterations before measurement\n` +
      `- **Thresholds**: Based on industry standards and user experience requirements\n\n` +
      `### Metrics Explained\n` +
      `- **Load Time**: Time to load and initialize the application\n` +
      `- **Render Time**: Time to render translated content\n` +
      `- **Memory Usage**: JavaScript heap memory consumption\n` +
      `- **Language Switch Time**: Time to switch between languages\n` +
      `- **Pluralization Time**: Time to process pluralization rules\n\n`
    );
  }

  /**
   * Generate report footer
   */
  generateReportFooter(): string {
    return (
      `---\n\n` +
      `*Generated by Reynard I18n Performance Benchmark Suite*\n` +
      `*ðŸ¦¦ Splashing with performance testing precision*\n`
    );
  }
}
