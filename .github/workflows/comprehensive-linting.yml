name: 🐺 Comprehensive Linting & Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      lint_type:
        description: 'Type of linting to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - frontend
          - backend
          - markdown
          - security
          - shell
          - workflow

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.1'

jobs:
  # 🦊 Frontend Linting (TypeScript, ESLint, Prettier)
  frontend-linting:
    name: 🦊 Frontend Linting
    runs-on: ubuntu-latest
    if: github.event.inputs.lint_type == '' || github.event.inputs.lint_type == 'all' || github.event.inputs.lint_type == 'frontend'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 💾 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ESLint
        run: pnpm lint
        continue-on-error: true

      - name: 🎨 Check Prettier formatting
        run: pnpm format:check
        continue-on-error: true

      - name: 📝 TypeScript type checking
        run: pnpm typecheck
        continue-on-error: true

      - name: 🧪 Run i18n ESLint rules
        run: |
          cd packages/testing
          pnpm i18n:eslint
        continue-on-error: true

      - name: 📊 Upload frontend linting results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-linting-results
          path: |
            packages/*/dist
          retention-days: 7

  # 🐺 Backend Linting (Python)
  backend-linting:
    name: 🐺 Backend Linting
    runs-on: ubuntu-latest
    if: github.event.inputs.lint_type == '' || github.event.inputs.lint_type == 'all' || github.event.inputs.lint_type == 'backend'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements.dev.txt

      - name: 🎨 Run Black formatter check
        run: |
          cd backend
          python -m black --check .
        continue-on-error: true

      - name: 📋 Run isort import sorting check
        run: |
          cd backend
          python -m isort --check-only .
        continue-on-error: true

      - name: 🔍 Run Flake8 linting
        run: |
          cd backend
          python -m flake8 .
        continue-on-error: true

      - name: 📝 Run MyPy type checking
        run: |
          cd backend
          python -m mypy .
        continue-on-error: true

      - name: 🔒 Run Bandit security scanning
        run: |
          cd backend
          python -m bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: 📊 Upload backend linting results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-linting-results
          path: |
            backend/bandit-report.json
          retention-days: 7

  # 🦦 Markdown Linting
  markdown-linting:
    name: 🦦 Markdown Linting
    runs-on: ubuntu-latest
    if: github.event.inputs.lint_type == '' || github.event.inputs.lint_type == 'all' || github.event.inputs.lint_type == 'markdown'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📋 Check markdown TOC
        run: pnpm markdown:toc:check
        continue-on-error: true

      - name: 🔍 Run markdownlint
        run: pnpm markdown:lint
        continue-on-error: true

      - name: 📏 Check sentence length
        run: pnpm markdown:sentence:check
        continue-on-error: true

      - name: 🔗 Check markdown links
        run: pnpm markdown:links:check:all
        continue-on-error: true

      - name: 📝 Check italic formatting
        run: pnpm markdown:italic:check
        continue-on-error: true

  # 🐺 Security Scanning
  security-scanning:
    name: 🐺 Security Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.lint_type == '' || github.event.inputs.lint_type == 'all' || github.event.inputs.lint_type == 'security'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Run npm audit
        run: pnpm audit --audit-level=moderate
        continue-on-error: true

      - name: 🛡️ Run audit-ci security scan
        run: pnpm run security:scan
        continue-on-error: true

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript, python

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  # 🔍 Shell Script Linting
  shell-linting:
    name: 🔍 Shell Script Linting
    runs-on: ubuntu-latest
    if: github.event.inputs.lint_type == '' || github.event.inputs.lint_type == 'all' || github.event.inputs.lint_type == 'shell'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run ShellCheck
        run: |
          echo "🔍 Validating shell scripts..."
          find . -type f \( -name "*.sh" -o -name "*.bash" -o -name "*.zsh" \) \
            -not -path "./node_modules/*" \
            -not -path "./.git/*" \
            -not -path "./venv/*" \
            -not -path "./backend/venv/*" \
            -not -path "./third_party/*" \
            -exec shellcheck --rcfile=.shellcheckrc {} +

  # 🐺 Workflow Shell Script Validation
  workflow-shell-validation:
    name: 🐺 Workflow Shell Script Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.lint_type == '' || github.event.inputs.lint_type == 'all' || github.event.inputs.lint_type == 'workflow-shell'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🐺 Extract and validate workflow shell scripts
        run: |
          echo "🐺 Extracting and validating shell scripts from GitHub workflows..."
          node .husky/extract-workflow-shell.js --verbose

  # 🦊 GitHub Actions Workflow Validation
  workflow-validation:
    name: 🦊 Workflow Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.lint_type == '' || github.event.inputs.lint_type == 'all' || github.event.inputs.lint_type == 'workflow'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Validate GitHub Actions workflows
        uses: rhysd/actionlint@v1.6.26
        with:
          ignore: |
            SC2015
            SC2086
        continue-on-error: true

  # 🦦 Results Aggregation
  results-aggregation:
    name: 🦦 Results Aggregation
    runs-on: ubuntu-latest
    needs:
      [
        frontend-linting,
        backend-linting,
        markdown-linting,
        security-scanning,
        shell-linting,
        workflow-shell-validation,
        workflow-validation,
      ]
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📊 Generate comprehensive report
        run: |
          {
            echo "# 🐺 Comprehensive Linting Report"
            echo ""
            echo "## Job Results"
            echo ""
          } > linting-report.md

          {
            echo "| Job | Status |"
            echo "|-----|--------|"
            echo "| 🦊 Frontend Linting | ${{ needs.frontend-linting.result }} |"
            echo "| 🐺 Backend Linting | ${{ needs.backend-linting.result }} |"
            echo "| 🦦 Markdown Linting | ${{ needs.markdown-linting.result }} |"
            echo "| 🐺 Security Scanning | ${{ needs.security-scanning.result }} |"
            echo "| 🔍 Shell Script Linting | ${{ needs.shell-linting.result }} |"
            echo "| 🦊 Workflow Validation | ${{ needs.workflow-validation.result }} |"
            echo ""
          } >> linting-report.md

          # Determine overall status
          if [ "${{ needs.frontend-linting.result }}" == "success" ] && [ "${{ needs.backend-linting.result }}" == "success" ] && [ "${{ needs.markdown-linting.result }}" == "success" ] && [ "${{ needs.security-scanning.result }}" == "success" ] && [ "${{ needs.shell-linting.result }}" == "success" ] && [ "${{ needs.workflow-validation.result }}" == "success" ]; then
            echo "## Overall Status: ✅ PASSED" >> linting-report.md
          else
            echo "## Overall Status: ❌ FAILED" >> linting-report.md
          fi

      - name: 📤 Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-linting-report
          path: linting-report.md
          retention-days: 30

      - name: 💬 Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const reportPath = 'linting-report.md';
              let report = '';

              if (fs.existsSync(reportPath)) {
                report = fs.readFileSync(reportPath, 'utf8');
              } else {
                report = `## 🐺 Comprehensive Linting Results

                **Overall Status:** ${{ needs.frontend-linting.result == 'success' && needs.backend-linting.result == 'success' && needs.markdown-linting.result == 'success' && needs.security-scanning.result == 'success' && needs.workflow-validation.result == 'success' && '✅ PASSED' || '❌ FAILED' }}

                ### Job Results:
                - 🦊 Frontend Linting: ${{ needs.frontend-linting.result }}
                - 🐺 Backend Linting: ${{ needs.backend-linting.result }}
                - 🦦 Markdown Linting: ${{ needs.markdown-linting.result }}
                - 🐺 Security Scanning: ${{ needs.security-scanning.result }}
                - 🦊 Workflow Validation: ${{ needs.workflow-validation.result }}

                *Detailed results available in the artifacts.*`;
              }

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            } catch (error) {
              console.log('Could not create comment:', error);
            }

  # 🐺 Final Gatekeeper
  final-gatekeeper:
    name: 🐺 Final Gatekeeper
    runs-on: ubuntu-latest
    needs:
      [
        frontend-linting,
        backend-linting,
        markdown-linting,
        security-scanning,
        workflow-shell-validation,
        workflow-validation,
        results-aggregation,
      ]
    if: always()

    steps:
      - name: 🚪 Final validation gate
        run: |
          echo "🐺 Final gatekeeper validation..."

          # Check if any critical jobs failed
          if [[ "${{ needs.frontend-linting.result }}" == "failure" ]] || [[ "${{ needs.backend-linting.result }}" == "failure" ]] || [[ "${{ needs.security-scanning.result }}" == "failure" ]] || [[ "${{ needs.workflow-shell-validation.result }}" == "failure" ]]; then
            echo "❌ Critical linting checks failed. Blocking merge."
            exit 1
          fi

          # Check if any jobs were cancelled
          if [[ "${{ needs.frontend-linting.result }}" == "cancelled" ]] || [[ "${{ needs.backend-linting.result }}" == "cancelled" ]] || [[ "${{ needs.security-scanning.result }}" == "cancelled" ]] || [[ "${{ needs.workflow-shell-validation.result }}" == "cancelled" ]]; then
            echo "⚠️ Some linting checks were cancelled. Please re-run the workflow."
            exit 1
          fi

          echo "✅ All critical linting checks passed! Ready for merge."
