name: ü¶¶ i18n CI Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PNPM_VERSION: '8.15.0'

jobs:
  i18n-testing:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better caching
      
    - name: üèóÔ∏è Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: üü¢ Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        
    - name: üíæ Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pnpm-store
          node_modules
          packages/*/node_modules
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ matrix.node-version }}
        restore-keys: |
          ${{ runner.os }}-pnpm-${{ matrix.node-version }}-
          ${{ runner.os }}-pnpm-
        
    - name: üì¶ Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: üèóÔ∏è Build testing package
      run: |
        cd packages/testing
        pnpm build
        
    - name: ‚úÖ Validate i18n setup
      run: |
        cd packages/testing
        pnpm i18n:validate
        
    - name: üß™ Run i18n CI tests
      run: |
        cd packages/testing
        pnpm i18n:ci --fail-on-hardcoded --fail-on-missing --fail-on-rtl --coverage-threshold 80
        
    - name: üìä Generate i18n report
      if: always()
      run: |
        cd packages/testing
        pnpm i18n:test --output ../../i18n-results.json --report ../../i18n-report.md
        
    - name: üì§ Upload i18n results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: i18n-results-${{ matrix.node-version }}
        path: |
          i18n-results.json
          i18n-report.md
        retention-days: 30
          
    - name: üí¨ Comment PR with i18n results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const resultsPath = 'i18n-results.json';
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              
              const comment = `##  i18n Test Results
              
              **Summary:**
              - ‚úÖ Packages tested: ${results.summary.totalPackages}
              - üîç Hardcoded strings: ${results.summary.totalHardcodedStrings}
              - üåç Missing translations: ${results.summary.totalMissingTranslations}
              - üîÑ RTL issues: ${results.summary.totalRTLIssues}
              - üìä Coverage: ${results.summary.averageCoverage}%
              
              **Status:** ${results.success ? '‚úÖ PASSED' : '‚ùå FAILED'}
              
              ${results.summary.totalHardcodedStrings > 0 ? 
                '‚ö†Ô∏è **Hardcoded strings detected!** Please use translation keys instead of hardcoded text.' : 
                '‚úÖ No hardcoded strings found!'
              }
              
              ${results.summary.totalMissingTranslations > 0 ? 
                '‚ö†Ô∏è **Missing translations detected!** Please add missing translation keys.' : 
                '‚úÖ All translations are complete!'
              }
              
              *Full report available in the artifacts.*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not create comment:', error);
          }
