{
  "version": "1.0.0",
  "last_updated": "2025-09-22T15:13:20.059997",
  "tools": {
    "generate_agent_name": {
      "name": "generate_agent_name",
      "category": "agent",
      "enabled": true,
      "description": "Generate robot names with animal spirit themes",
      "dependencies": [],
      "config": {}
    },
    "assign_agent_name": {
      "name": "assign_agent_name",
      "category": "agent",
      "enabled": true,
      "description": "Assign names to agents with persistence",
      "dependencies": [],
      "config": {}
    },
    "get_agent_name": {
      "name": "get_agent_name",
      "category": "agent",
      "enabled": true,
      "description": "Retrieve current agent names",
      "dependencies": [],
      "config": {}
    },
    "list_agent_names": {
      "name": "list_agent_names",
      "category": "agent",
      "enabled": true,
      "description": "List all agents and their names",
      "dependencies": [],
      "config": {}
    },
    "roll_agent_spirit": {
      "name": "roll_agent_spirit",
      "category": "agent",
      "enabled": true,
      "description": "Randomly select an animal spirit (weighted distribution)",
      "dependencies": [],
      "config": {}
    },
    "get_spirit_emoji": {
      "name": "get_spirit_emoji",
      "category": "agent",
      "enabled": true,
      "description": "Get emoji for animal spirit types",
      "dependencies": [],
      "config": {}
    },
    "agent_startup_sequence": {
      "name": "agent_startup_sequence",
      "category": "agent",
      "enabled": true,
      "description": "Complete agent initialization with random spirit selection",
      "dependencies": [],
      "config": {}
    },
    "get_agent_persona": {
      "name": "get_agent_persona",
      "category": "agent",
      "enabled": true,
      "description": "Get comprehensive agent persona from ECS system",
      "dependencies": [],
      "config": {}
    },
    "get_lora_config": {
      "name": "get_lora_config",
      "category": "agent",
      "enabled": true,
      "description": "Get LoRA configuration for agent persona",
      "dependencies": [],
      "config": {}
    },
    "create_character": {
      "name": "create_character",
      "category": "character",
      "enabled": true,
      "description": "Create a new character with detailed customization",
      "dependencies": [],
      "config": {}
    },
    "get_character": {
      "name": "get_character",
      "category": "character",
      "enabled": true,
      "description": "Get detailed character information by ID",
      "dependencies": [],
      "config": {}
    },
    "list_characters": {
      "name": "list_characters",
      "category": "character",
      "enabled": true,
      "description": "List all characters with optional filtering",
      "dependencies": [],
      "config": {}
    },
    "search_characters": {
      "name": "search_characters",
      "category": "character",
      "enabled": true,
      "description": "Search characters by name, description, or tags",
      "dependencies": [],
      "config": {}
    },
    "update_character": {
      "name": "update_character",
      "category": "character",
      "enabled": true,
      "description": "Update character information",
      "dependencies": [],
      "config": {}
    },
    "delete_character": {
      "name": "delete_character",
      "category": "character",
      "enabled": true,
      "description": "Delete a character by ID",
      "dependencies": [],
      "config": {}
    },
    "get_character_types": {
      "name": "get_character_types",
      "category": "character",
      "enabled": true,
      "description": "Get available character types",
      "dependencies": [],
      "config": {}
    },
    "get_personality_traits": {
      "name": "get_personality_traits",
      "category": "character",
      "enabled": true,
      "description": "Get available personality traits",
      "dependencies": [],
      "config": {}
    },
    "get_ability_traits": {
      "name": "get_ability_traits",
      "category": "character",
      "enabled": true,
      "description": "Get available ability traits",
      "dependencies": [],
      "config": {}
    },
    "get_current_time": {
      "name": "get_current_time",
      "category": "utility",
      "enabled": true,
      "description": "Get current date and time with timezone support",
      "dependencies": [],
      "config": {}
    },
    "get_current_location": {
      "name": "get_current_location",
      "category": "utility",
      "enabled": true,
      "description": "Get location based on IP address",
      "dependencies": [],
      "config": {}
    },
    "send_desktop_notification": {
      "name": "send_desktop_notification",
      "category": "utility",
      "enabled": true,
      "description": "Send desktop notifications using libnotify",
      "dependencies": [],
      "config": {}
    },
    "restart_mcp_server": {
      "name": "restart_mcp_server",
      "category": "utility",
      "enabled": true,
      "description": "Restart the MCP server with different methods",
      "dependencies": [],
      "config": {}
    },
    "create_ecs_agent": {
      "name": "create_ecs_agent",
      "category": "ecs",
      "enabled": true,
      "description": "Create a new agent using the ECS system",
      "dependencies": [],
      "config": {}
    },
    "create_ecs_offspring": {
      "name": "create_ecs_offspring",
      "category": "ecs",
      "enabled": true,
      "description": "Create offspring agent from two parent agents using ECS",
      "dependencies": [],
      "config": {}
    },
    "get_ecs_agent_status": {
      "name": "get_ecs_agent_status",
      "category": "ecs",
      "enabled": true,
      "description": "Get status of all agents in the ECS system",
      "dependencies": [],
      "config": {}
    },
    "get_ecs_agent_positions": {
      "name": "get_ecs_agent_positions",
      "category": "ecs",
      "enabled": true,
      "description": "Get positions of all agents in the ECS system",
      "dependencies": [],
      "config": {}
    },
    "get_simulation_status": {
      "name": "get_simulation_status",
      "category": "ecs",
      "enabled": true,
      "description": "Get comprehensive ECS world simulation status",
      "dependencies": [],
      "config": {}
    },
    "accelerate_time": {
      "name": "accelerate_time",
      "category": "ecs",
      "enabled": true,
      "description": "Adjust time acceleration factor for world simulation",
      "dependencies": [],
      "config": {}
    },
    "nudge_time": {
      "name": "nudge_time",
      "category": "ecs",
      "enabled": true,
      "description": "Nudge simulation time forward (for MCP actions)",
      "dependencies": [],
      "config": {}
    },
    "lint_frontend": {
      "name": "lint_frontend",
      "category": "linting",
      "enabled": true,
      "description": "ESLint for TypeScript/JavaScript (with auto-fix)",
      "dependencies": [],
      "config": {}
    },
    "lint_python": {
      "name": "lint_python",
      "category": "linting",
      "enabled": true,
      "description": "Flake8, Pylint for Python (with auto-fix and error limiting)",
      "dependencies": [],
      "config": {}
    },
    "lint_markdown": {
      "name": "lint_markdown",
      "category": "linting",
      "enabled": true,
      "description": "markdownlint validation (with auto-fix)",
      "dependencies": [],
      "config": {}
    },
    "run_all_linting": {
      "name": "run_all_linting",
      "category": "linting",
      "enabled": true,
      "description": "Execute entire linting suite (with auto-fix)",
      "dependencies": [],
      "config": {}
    },
    "format_frontend": {
      "name": "format_frontend",
      "category": "formatting",
      "enabled": true,
      "description": "Prettier formatting (with check-only mode)",
      "dependencies": [],
      "config": {}
    },
    "format_python": {
      "name": "format_python",
      "category": "formatting",
      "enabled": true,
      "description": "Black + isort formatting (with check-only mode)",
      "dependencies": [],
      "config": {}
    },
    "search_files": {
      "name": "search_files",
      "category": "search",
      "enabled": true,
      "description": "Search for files by name pattern in the project",
      "dependencies": [],
      "config": {}
    },
    "semantic_search": {
      "name": "semantic_search",
      "category": "search",
      "enabled": true,
      "description": "Perform semantic search using vector embeddings",
      "dependencies": [],
      "config": {}
    },
    "search_codebase": {
      "name": "search_codebase",
      "category": "search",
      "enabled": true,
      "description": "Search the Reynard codebase using RAG backend with BM25 fallback",
      "dependencies": [],
      "config": {}
    },
    "search_semantic": {
      "name": "search_semantic",
      "category": "search",
      "enabled": true,
      "description": "Perform semantic search using RAG backend with Ollama embeddings",
      "dependencies": [],
      "config": {}
    },
    "search_keyword": {
      "name": "search_keyword",
      "category": "search",
      "enabled": true,
      "description": "Perform keyword search using BM25 fallback",
      "dependencies": [],
      "config": {}
    },
    "validate_mermaid_diagram": {
      "name": "validate_mermaid_diagram",
      "category": "visualization",
      "enabled": true,
      "description": "Validate mermaid diagram syntax and check for errors",
      "dependencies": [],
      "config": {}
    },
    "render_mermaid_to_svg": {
      "name": "render_mermaid_to_svg",
      "category": "visualization",
      "enabled": true,
      "description": "Render mermaid diagram to SVG format",
      "dependencies": [],
      "config": {}
    },
    "open_image": {
      "name": "open_image",
      "category": "visualization",
      "enabled": true,
      "description": "Open an image file with the imv image viewer",
      "dependencies": [],
      "config": {}
    },
    "scan_security": {
      "name": "scan_security",
      "category": "security",
      "enabled": true,
      "description": "Complete security audit (Bandit, audit-ci, type checking)",
      "dependencies": [],
      "config": {}
    },
    "scan_security_fast": {
      "name": "scan_security_fast",
      "category": "security",
      "enabled": true,
      "description": "Run fast security scanning (skips slow Bandit checks)",
      "dependencies": [],
      "config": {}
    },
    "get_versions": {
      "name": "get_versions",
      "category": "version",
      "enabled": true,
      "description": "Get versions of Python, Node.js, npm, pnpm, and TypeScript",
      "dependencies": [],
      "config": {}
    },
    "get_python_version": {
      "name": "get_python_version",
      "category": "version",
      "enabled": true,
      "description": "Get Python version information",
      "dependencies": [],
      "config": {}
    },
    "get_vscode_active_file": {
      "name": "get_vscode_active_file",
      "category": "vscode",
      "enabled": true,
      "description": "Get currently active file path in VS Code",
      "dependencies": [],
      "config": {}
    },
    "discover_vscode_tasks": {
      "name": "discover_vscode_tasks",
      "category": "vscode",
      "enabled": true,
      "description": "Discover all available VS Code tasks from tasks.json",
      "dependencies": [],
      "config": {}
    },
    "playwright_screenshot": {
      "name": "playwright_screenshot",
      "category": "playwright",
      "enabled": true,
      "description": "Take screenshots using Playwright browser automation",
      "dependencies": [],
      "config": {}
    },
    "playwright_navigate": {
      "name": "playwright_navigate",
      "category": "playwright",
      "enabled": true,
      "description": "Navigate to URLs and interact with web pages",
      "dependencies": [],
      "config": {}
    },
    "detect_monoliths": {
      "name": "detect_monoliths",
      "category": "analysis",
      "enabled": true,
      "description": "🔥 Detect large monolithic files that violate the 140-line axiom with RAG acceleration. Perfect for finding code that needs refactoring into smaller, more maintainable modules. Use this to identify files that are too complex and should be broken down.",
      "dependencies": [],
      "config": {}
    },
    "analyze_file_complexity": {
      "name": "analyze_file_complexity",
      "category": "analysis",
      "enabled": true,
      "description": "🔍 Deep-dive analysis of a specific file's complexity metrics with intelligent caching. Perfect for understanding why a file is considered a monolith and what specific refactoring opportunities exist.",
      "dependencies": [],
      "config": {}
    },
    "create_agent_email_template": {
      "name": "create_agent_email_template",
      "category": "email",
      "enabled": true,
      "description": "Create an email template for an agent",
      "dependencies": [],
      "config": {}
    },
    "get_agent_email_config": {
      "name": "get_agent_email_config",
      "category": "email",
      "enabled": true,
      "description": "Get email configuration for an agent",
      "dependencies": [],
      "config": {}
    },
    "get_agent_email_stats": {
      "name": "get_agent_email_stats",
      "category": "email",
      "enabled": true,
      "description": "Get email statistics for an agent",
      "dependencies": [],
      "config": {}
    },
    "send_agent_email": {
      "name": "send_agent_email",
      "category": "email",
      "enabled": true,
      "description": "Send email from one agent to another",
      "dependencies": [],
      "config": {}
    },
    "setup_agent_email": {
      "name": "setup_agent_email",
      "category": "email",
      "enabled": true,
      "description": "Setup email configuration for an agent",
      "dependencies": [],
      "config": {}
    },
    "trigger_agent_automated_email": {
      "name": "trigger_agent_automated_email",
      "category": "email",
      "enabled": true,
      "description": "Trigger automated email for an agent based on events",
      "dependencies": [],
      "config": {}
    },
    "invoke_success_advisor_8": {
      "name": "invoke_success_advisor_8",
      "category": "agent",
      "enabled": true,
      "description": "Invoke Success-Advisor-8 spirit inhabitation through ECS API",
      "dependencies": [],
      "config": {}
    },
    "find_ecs_agent": {
      "name": "find_ecs_agent",
      "category": "social",
      "enabled": true,
      "description": "Find an agent in the ECS world by name or ID with flexible matching",
      "dependencies": [],
      "config": {}
    },
    "get_agent_relationships": {
      "name": "get_agent_relationships",
      "category": "social",
      "enabled": true,
      "description": "Get all relationships for an agent",
      "dependencies": [],
      "config": {}
    },
    "get_agent_social_stats": {
      "name": "get_agent_social_stats",
      "category": "social",
      "enabled": true,
      "description": "Get social interaction statistics for an agent",
      "dependencies": [],
      "config": {}
    },
    "get_ecs_world_status": {
      "name": "get_ecs_world_status",
      "category": "social",
      "enabled": true,
      "description": "Get the current status of the ECS world including agent counts and system health",
      "dependencies": [],
      "config": {}
    },
    "get_interaction_history": {
      "name": "get_interaction_history",
      "category": "social",
      "enabled": true,
      "description": "Get the interaction history for an agent",
      "dependencies": [],
      "config": {}
    },
    "get_nearby_agents": {
      "name": "get_nearby_agents",
      "category": "social",
      "enabled": true,
      "description": "Get all agents within a certain radius of an agent",
      "dependencies": [],
      "config": {}
    },
    "initiate_interaction": {
      "name": "initiate_interaction",
      "category": "social",
      "enabled": true,
      "description": "Initiate an interaction between two agents",
      "dependencies": [],
      "config": {}
    },
    "send_chat_message": {
      "name": "send_chat_message",
      "category": "social",
      "enabled": true,
      "description": "Send a chat message from one agent to another with automatic agent ID resolution",
      "dependencies": [],
      "config": {}
    },
    "get_mermaid_diagram_stats": {
      "name": "get_mermaid_diagram_stats",
      "category": "visualization",
      "enabled": true,
      "description": "Get statistics and analysis of a mermaid diagram",
      "dependencies": [],
      "config": {}
    },
    "render_mermaid_to_png": {
      "name": "render_mermaid_to_png",
      "category": "visualization",
      "enabled": true,
      "description": "Render mermaid diagram to PNG format",
      "dependencies": [],
      "config": {}
    },
    "test_mermaid_render": {
      "name": "test_mermaid_render",
      "category": "visualization",
      "enabled": true,
      "description": "Test mermaid diagram rendering with a simple example",
      "dependencies": [],
      "config": {}
    },
    "git_add": {
      "name": "git_add",
      "category": "git",
      "enabled": true,
      "description": "Add files to Git staging area",
      "dependencies": [],
      "config": {}
    },
    "git_branch_info": {
      "name": "git_branch_info",
      "category": "git",
      "enabled": true,
      "description": "Get current branch information",
      "dependencies": [],
      "config": {}
    },
    "git_commit": {
      "name": "git_commit",
      "category": "git",
      "enabled": true,
      "description": "Create a new commit",
      "dependencies": [],
      "config": {}
    },
    "git_commit_history": {
      "name": "git_commit_history",
      "category": "git",
      "enabled": true,
      "description": "Get recent commit history",
      "dependencies": [],
      "config": {}
    },
    "git_diff": {
      "name": "git_diff",
      "category": "git",
      "enabled": true,
      "description": "Get diff of current changes",
      "dependencies": [],
      "config": {}
    },
    "git_pull": {
      "name": "git_pull",
      "category": "git",
      "enabled": true,
      "description": "Pull latest changes from remote repository",
      "dependencies": [],
      "config": {}
    },
    "git_push": {
      "name": "git_push",
      "category": "git",
      "enabled": true,
      "description": "Push commits to remote repository",
      "dependencies": [],
      "config": {}
    },
    "git_status": {
      "name": "git_status",
      "category": "git",
      "enabled": true,
      "description": "Get current Git repository status",
      "dependencies": [],
      "config": {}
    },
    "check_secret": {
      "name": "check_secret",
      "category": "secrets",
      "enabled": true,
      "description": "Check if a secret is available and set",
      "dependencies": [],
      "config": {}
    },
    "get_secret": {
      "name": "get_secret",
      "category": "secrets",
      "enabled": true,
      "description": "Retrieve a user secret by name",
      "dependencies": [],
      "config": {}
    },
    "get_secret_info": {
      "name": "get_secret_info",
      "category": "secrets",
      "enabled": true,
      "description": "Get detailed information about a secret",
      "dependencies": [],
      "config": {}
    },
    "list_secrets": {
      "name": "list_secrets",
      "category": "secrets",
      "enabled": true,
      "description": "List all available secrets",
      "dependencies": [],
      "config": {}
    },
    "execute_vscode_task": {
      "name": "execute_vscode_task",
      "category": "vscode",
      "enabled": true,
      "description": "Execute a VS Code task by name",
      "dependencies": [],
      "config": {}
    },
    "get_vscode_task_info": {
      "name": "get_vscode_task_info",
      "category": "vscode",
      "enabled": true,
      "description": "Get detailed information about a specific VS Code task",
      "dependencies": [],
      "config": {}
    },
    "validate_vscode_task": {
      "name": "validate_vscode_task",
      "category": "vscode",
      "enabled": true,
      "description": "Validate that a VS Code task exists and is executable",
      "dependencies": [],
      "config": {}
    }
  }
}
