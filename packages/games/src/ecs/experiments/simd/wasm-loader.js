// WASM module loader for SIMD position system
export class WasmLoader {
    constructor() {
        Object.defineProperty(this, "wasmModule", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "loadError", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
    }
    static getInstance() {
        if (!WasmLoader.instance) {
            WasmLoader.instance = new WasmLoader();
        }
        return WasmLoader.instance;
    }
    async loadWasmModule() {
        if (this.wasmModule) {
            return { module: this.wasmModule };
        }
        if (this.loadError) {
            return { module: null, error: this.loadError };
        }
        try {
            // This module needs to be built with wasm-pack first
            // TypeScript error is expected until the WASM module is built
            // @ts-expect-error WASM module will be generated by wasm-pack
            const wasmModule = await import("./pkg/ecs_simd.js");
            this.wasmModule = {
                init: () => wasmModule.default(),
                initSync: wasmModule.initSync,
                PositionSystemSIMD: wasmModule.PositionSystemSIMD,
                simd_vector_add: wasmModule.simd_vector_add,
            };
            return { module: this.wasmModule };
        }
        catch (error) {
            this.loadError = error;
            console.warn("ðŸ¦Š> WASM module not available, using mock implementation");
            return { module: null, error: this.loadError };
        }
    }
    async initializeWasm(maxEntities) {
        const { module, error } = await this.loadWasmModule();
        if (!module) {
            throw error || new Error("WASM module not available");
        }
        // Load the WebAssembly module - use sync init for Node.js
        if (typeof window === "undefined") {
            // Node.js environment
            const { readFileSync } = await import("fs");
            const { fileURLToPath } = await import("url");
            const { dirname, join } = await import("path");
            const wasmPath = join(dirname(fileURLToPath(import.meta.url)), "pkg", "ecs_simd_bg.wasm");
            const wasmBytes = readFileSync(wasmPath);
            module.initSync(wasmBytes);
        }
        else {
            // Browser environment
            await module.init();
        }
        return new module.PositionSystemSIMD(maxEntities);
    }
    getSimdVectorAdd() {
        return this.wasmModule?.simd_vector_add || null;
    }
}
Object.defineProperty(WasmLoader, "instance", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: null
});
