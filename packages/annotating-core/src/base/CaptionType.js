/**
 * Caption Type Definitions
 *
 * Defines the types of captions that can be generated by Reynard's
 * caption generation system. Self-contained type definitions that
 * replace Yipyap's caption type system.
 */
export var CaptionType;
(function (CaptionType) {
    CaptionType["CAPTION"] = "caption";
    CaptionType["TAGS"] = "tags";
    CaptionType["E621"] = "e621";
    CaptionType["TOML"] = "toml";
})(CaptionType || (CaptionType = {}));
export const CAPTION_TYPE_INFO = {
    [CaptionType.CAPTION]: {
        type: CaptionType.CAPTION,
        extension: ".caption",
        description: "Natural language caption",
        mimeType: "text/plain",
        supportsMetadata: false,
    },
    [CaptionType.TAGS]: {
        type: CaptionType.TAGS,
        extension: ".tags",
        description: "Comma-separated tag list",
        mimeType: "text/plain",
        supportsMetadata: false,
    },
    [CaptionType.E621]: {
        type: CaptionType.E621,
        extension: ".e621",
        description: "E621-style tag format",
        mimeType: "text/plain",
        supportsMetadata: true,
    },
    [CaptionType.TOML]: {
        type: CaptionType.TOML,
        extension: ".toml",
        description: "TOML metadata format",
        mimeType: "text/toml",
        supportsMetadata: true,
    },
};
export function getCaptionTypeInfo(type) {
    return CAPTION_TYPE_INFO[type];
}
export function getCaptionExtension(type) {
    return CAPTION_TYPE_INFO[type].extension;
}
export function getCaptionMimeType(type) {
    return CAPTION_TYPE_INFO[type].mimeType;
}
export function isMetadataSupported(type) {
    return CAPTION_TYPE_INFO[type].supportsMetadata;
}
export function fromExtension(extension) {
    const normalizedExt = extension.toLowerCase();
    for (const [type, info] of Object.entries(CAPTION_TYPE_INFO)) {
        if (info.extension === normalizedExt) {
            return type;
        }
    }
    return undefined;
}
