/**
 * Reynard Connection Package
 *
 * This package provides connection utilities and base classes for
 * establishing and managing connections in the Reynard framework.
 * It also includes comprehensive validation, HTTP client, and error
 * handling systems that eliminate duplication across Reynard packages.
 */

export * from "./base";
export * from "./config";
export * from "./health";
export * from "./manager";
export * from "./metrics";
export * from "./pool";
export * from "./retry";
export * from "./security";
export * from "./types";
export * from "./websocket";

// HTTP Client System - Re-exported from reynard-http-client
export {
  HTTPClient,
  createAuthMiddleware,
  createTokenRefreshMiddleware,
  createLoggingMiddleware as createHTTPLoggingMiddleware,
  createCacheMiddleware,
  createRateLimitMiddleware,
  createErrorHandlingMiddleware,
  createRequestIdMiddleware,
  createUserAgentMiddleware,
  createApiMiddlewareStack,
  createUploadMiddlewareStack,
  type HTTPMiddleware,
  type AuthConfig,
  type TokenRefreshConfig,
  type LoggingConfig,
  type CacheConfig,
  type RateLimitConfig,
  type HTTPClientConfig,
  type HTTPRequestOptions,
  type HTTPResponse,
  type HTTPError,
  type HTTPMetrics,
  type RequestMetrics,
  type HTTP_PRESETS,
} from "reynard-http-client";

// Error Handling System
export {
  ReynardError,
  ValidationError,
  NetworkError,
  AuthenticationError,
  AuthorizationError,
  ProcessingError,
  DatabaseError,
  ConfigurationError,
  TimeoutError,
  RateLimitError,
  createValidationError,
  createNetworkError,
  createAuthenticationError,
  createAuthorizationError,
  createProcessingError,
  createDatabaseError,
  createConfigurationError,
  createTimeoutError,
  createRateLimitError,
  isReynardError,
  isValidationError,
  isNetworkError,
  isAuthenticationError,
  isAuthorizationError,
  isProcessingError,
  isDatabaseError,
  isConfigurationError,
  isTimeoutError,
  isRateLimitError,
  getErrorCode,
  getErrorMessage,
  getErrorContext,
  toReynardError,
  extractErrorDetails,
  type BaseErrorContext,
  type ValidationErrorContext,
  type NetworkErrorContext,
  type AuthenticationErrorContext,
  type ProcessingErrorContext,
  type DatabaseErrorContext,
  type ConfigurationErrorContext,
} from "./errors/core";
export {
  ErrorHandlerSystem,
  ConsoleErrorHandler,
  ValidationErrorHandler,
  NetworkErrorHandler,
  AuthenticationErrorHandler,
  AuthorizationErrorHandler,
  ProcessingErrorHandler,
  DatabaseErrorHandler,
  ConfigurationErrorHandler,
  TimeoutErrorHandler,
  RateLimitErrorHandler,
  createErrorHandlerSystem,
  globalErrorHandler,
  errorHandler,
  wrapAsync,
  type ErrorHandler,
} from "./errors/handlers";
export {
  retry,
  retryWithExponentialBackoff,
  retryWithLinearBackoff,
  retryWithFixedDelay,
  withRetry,
  withExponentialBackoff,
  withLinearBackoff,
  withFixedDelay,
  calculateDelay,
  sleep,
  isRetryableError,
  createRetryCondition,
  createNetworkRetryCondition,
  createTimeoutRetryCondition,
  createRateLimitRetryCondition,
  RetryMonitor,
  globalRetryMonitor,
  type RetryConfig,
  type RetryResult,
  exponentialBackoffStrategy,
  linearBackoffStrategy,
  fixedDelayStrategy,
  aggressiveRetryStrategy,
  conservativeRetryStrategy,
} from "./errors/retry";
export {
  ErrorReporter,
  createErrorCodeFilter,
  createErrorSourceFilter,
  createValidationErrorFilter,
  createNetworkErrorFilter,
  globalErrorReporter,
  reportError,
  setupGlobalErrorReporting,
  createErrorReport,
  formatErrorReport,
  type ErrorReport,
  type ErrorAggregation,
  type ErrorReportingConfig,
  type ErrorFilter,
} from "./errors/reporting";

// Validation System
export {
  ValidationUtils,
  type ValidationResult,
  type MultiValidationResult,
  type ValidationSchema,
  type FieldValidationOptions,
} from "./validation/core";
export {
  emailSchema,
  passwordSchema,
  usernameSchema,
  urlSchema,
  optionalUrlSchema,
  apiKeySchema,
  tokenSchema,
  fileNameSchema,
  mimeTypeSchema,
  fileSizeSchema,
  portSchema,
  timeoutSchema,
  retryCountSchema,
  modelNameSchema,
  promptSchema,
  temperatureSchema,
  maxTokensSchema,
  themeSchema,
  languageSchema,
  colorSchema,
  createSchema,
  makeOptional,
  makeRequired,
  withLength,
  withRange,
} from "./validation/schemas";
export {
  validateEmail,
  validatePassword,
  validateUsername,
  validateUrl,
  validateValue,
  validateApiKey,
  validateToken,
  validateFileName,
  validateMimeType,
  validateFileSize,
  validatePort,
  validateTimeout,
  validateRetryCount,
  validateModelName,
  validatePrompt,
  validateTemperature,
  validateMaxTokens,
  validateTheme,
  validateLanguage,
  validateColor,
  validateNotEmpty,
  validatePositive,
  validateRange,
} from "./validation/validators";
export {
  ValidationMiddlewareSystem,
  createCrossFieldMiddleware,
  createConditionalMiddleware,
  createSanitizationMiddleware,
  createLoggingMiddleware as createValidationLoggingMiddleware,
  createBusinessRuleMiddleware,
  passwordConfirmationMiddleware,
  emailConfirmationMiddleware,
  dateRangeMiddleware,
  numericRangeMiddleware,
  trimSanitization,
  lowercaseSanitization,
  uppercaseSanitization,
  htmlSanitization,
  globalValidationMiddleware,
  type ValidationMiddleware,
  type ValidationContext,
} from "./validation/middleware";
