import { ConnectionEvent, ConnectionHealth, ConnectionInfo, ConnectionState, ConnectionType, HealthCheckResult, RecoveryStrategy } from "./types";
import { BaseConnection } from "./base";
type EventHandler = (e: ConnectionEvent) => void;
type GlobalHandler = (type: string, e: ConnectionEvent) => void;
export declare class ConnectionManager {
    private connections;
    private groups;
    private eventHandlers;
    private globalHandlers;
    private healthTask?;
    private cleanupTask?;
    private healthIntervalSec;
    private cleanupIntervalSec;
    private autoReconnect;
    private autoHealth;
    private recoveryOverrides;
    private totalCreated;
    private totalEvents;
    private startTime;
    private metrics;
    private pools;
    start(): Promise<void>;
    stop(): Promise<void>;
    addConnection(conn: BaseConnection, group?: string): void;
    removeConnection(connectionId: string): boolean;
    getConnection(id: string): BaseConnection | undefined;
    getConnectionsByType(type: ConnectionType): BaseConnection[];
    getConnectionsByGroup(group: string): BaseConnection[];
    getConnectionsByState(state: ConnectionState): BaseConnection[];
    getConnectionsByHealth(health: ConnectionHealth): BaseConnection[];
    connectAll(group?: string): Promise<Record<string, boolean>>;
    disconnectAll(group?: string): Promise<Record<string, boolean>>;
    healthCheckAll(group?: string): Promise<Record<string, HealthCheckResult>>;
    addEventHandler(h: EventHandler): void;
    addGlobalHandler(h: GlobalHandler): void;
    private handleEvent;
    private healthLoop;
    private cleanupLoop;
    getInfo(): ConnectionInfo;
    getStatistics(): {
        uptime_seconds: number;
        start_time: string;
        total_connections_created: number;
        total_events_processed: number;
        connection_groups: string[];
        health_check_interval: number;
        cleanup_interval: number;
        auto_reconnect: boolean;
        auto_health_check: boolean;
        info: {
            total_connections: number;
            active_connections: number;
            healthy_connections: number;
            degraded_connections: number;
            unhealthy_connections: number;
            error_connections: number;
            average_response_time: number;
            total_requests: number;
            total_errors: number;
            overall_health: ConnectionHealth;
        };
        analytics: {
            total_connections: number;
            total_requests: number;
            failed_requests: number;
            average_response_time: number;
            error_rate: number;
        };
    };
    setRecoveryStrategy(connectionId: string, strategy: RecoveryStrategy): void;
    private attemptRecovery;
}
export {};
