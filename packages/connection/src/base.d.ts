export * from "./types";
import { ConnectionState, ConnectionHealth, ConnectionConfig, ConnectionStatus, ConnectionMetrics, ConnectionEvent } from "./types";
export declare abstract class BaseConnection {
    protected config: ConnectionConfig;
    readonly connectionId: string;
    protected state: ConnectionState;
    protected health: ConnectionHealth;
    protected metrics: ConnectionMetrics;
    protected lastHealthCheck?: number;
    protected lastError?: string | null;
    protected errorCount: number;
    protected consecutiveErrors: number;
    protected createdAt: number;
    protected updatedAt: number;
    protected isActive: boolean;
    protected isSecure: boolean;
    protected isAuthenticated: boolean;
    private eventHandlers;
    private stateHandlers;
    private healthHandlers;
    private cbFailures;
    private cbLastFailure?;
    private cbState;
    constructor(config: ConnectionConfig);
    getStatus(): ConnectionStatus;
    onEvent(handler: (e: ConnectionEvent) => void): void;
    onStateChange(handler: (s: ConnectionState) => void): void;
    onHealthChange(handler: (h: ConnectionHealth) => void): void;
    protected emitEvent(eventType: string, data?: Record<string, unknown>, severity?: "info" | "warning" | "error", message?: string): void;
    protected setState(newState: ConnectionState): void;
    protected setHealth(newHealth: ConnectionHealth): void;
    protected updateMetrics(responseTime?: number, success?: boolean): void;
    protected handleError(error: unknown, context?: string): void;
    protected checkCircuitBreaker(): boolean;
    protected resetCircuitBreaker(): void;
    abstract connect(): Promise<boolean>;
    abstract disconnect(): Promise<boolean>;
    abstract isConnected(): Promise<boolean>;
    abstract healthCheck(): Promise<{
        isHealthy: boolean;
        responseTime: number;
        details?: Record<string, unknown>;
        errorMessage?: string;
    }>;
    protected abstract sendImpl(data: unknown): Promise<boolean>;
    protected abstract receiveImpl(): Promise<unknown>;
    reconnect(): Promise<boolean>;
    send(data: unknown): Promise<boolean>;
    receive(): Promise<unknown>;
}
