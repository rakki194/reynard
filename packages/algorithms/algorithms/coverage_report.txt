
 RUN  v3.2.4 /home/kade/runeset/reynard/packages/algorithms
      Coverage enabled with v8

 âœ“ src/__tests__/spatial-hash/spatial-hash-utils.test.ts (25 tests) 83ms
 âœ“ src/__tests__/performance/framerate.test.ts (17 tests) 74ms
 âœ“ src/__tests__/optimization/core/enhanced-memory-pool.test.ts (13 tests) 69ms
 âœ“ src/__tests__/optimized.test.ts (26 tests) 209ms
 âœ“ src/__tests__/optimization/optimized.test.ts (31 tests) 200ms
stdout | src/__tests__/paw-optimization-benchmark.test.ts > PAW Optimization Benchmark > Small Dataset Performance (10-50 objects) > should use naive algorithm for small datasets
Small dataset results:
Naive: 0.383ms
PAW: 0.092ms
Collision counts - Naive: 26, PAW: 0

 âœ“ src/__tests__/index.test.ts (6 tests) 600ms
   âœ“ Geometry Shapes Index > should export point algorithms  593ms
stdout | src/__tests__/paw-optimization-benchmark.test.ts > PAW Optimization Benchmark > Medium Dataset Performance (100-500 objects) > should outperform naive for medium datasets
Medium dataset results:
Naive: 12.941ms
Spatial: 22.381ms
PAW: 3.318ms
Collision counts - Naive: 2816, Spatial: 2816, PAW: 125

 âœ“ src/__tests__/types.test.ts (17 tests) 29ms
 âœ“ src/__tests__/types/performance-types.test.ts (22 tests) 24ms
stdout | src/__tests__/paw-debug.test.ts > PAW Debug Investigation > should investigate algorithm selection for different dataset sizes
Small dataset (20 objects):
Workload: {
  objectCount: [33m20[39m,
  spatialDensity: [33m0.03392882256418418[39m,
  overlapRatio: [33m0[39m,
  updateFrequency: [33m0[39m,
  queryPattern: [32m'random'[39m
}
Selection: {
  algorithm: [32m'naive'[39m,
  confidence: [33m0.9[39m,
  expectedPerformance: { executionTime: [33m0.4[39m, memoryUsage: [33m320[39m },
  reasoning: [
    [32m'Small object count favors naive approach'[39m,
    [32m'PAW findings show naive is optimal for <100 objects'[39m,
    [32m'Minimal allocation overhead for small datasets'[39m
  ]
}

Medium dataset (200 objects):
Workload: {
  objectCount: [33m200[39m,
  spatialDensity: [33m0.25225812943716874[39m,
  overlapRatio: [33m0.0048484848484848485[39m,
  updateFrequency: [33m0[39m,
  queryPattern: [32m'random'[39m
}
Selection: {
  algorithm: [32m'spatial'[39m,
  confidence: [33m0.8[39m,
  expectedPerformance: { executionTime: [33m1.110115099197041[39m, memoryUsage: [33m6400[39m },
  reasoning: [
    [32m'Medium object count benefits from spatial optimization'[39m,
    [32m'Spatial hashing reduces collision checks'[39m,
    [32m'Memory overhead acceptable for this size'[39m
  ]
}

Large dataset (1000 objects):
Workload: {
  objectCount: [33m1000[39m,
  spatialDensity: [33m1.401696466650824[39m,
  overlapRatio: [33m0.0052525252525252525[39m,
  updateFrequency: [33m0[39m,
  queryPattern: [32m'clustered'[39m
}
Selection: {
  algorithm: [32m'optimized'[39m,
  confidence: [33m0.95[39m,
  expectedPerformance: { executionTime: [33m6.913007804234662[39m, memoryUsage: [33m17024[39m },
  reasoning: [
    [32m'Large object count requires optimization'[39m,
    [32m'Memory pooling eliminates allocation overhead'[39m,
    [32m'PAW findings show 99.91% allocation reduction'[39m,
    [32m'Best performance for >100 objects'[39m
  ]
}

 âœ“ src/__tests__/optimization/adapters/collision-algorithms-extended.test.ts (15 tests) 70ms
stdout | src/__tests__/paw-debug.test.ts > PAW Debug Investigation > should test actual algorithm execution times
Medium dataset (200 objects) execution times:
Adaptive selection: 8.091ms (98 collisions)
Forced naive: 1.962ms (98 collisions)
Forced optimized: 1.803ms (98 collisions)

 âœ“ src/__tests__/paw-debug.test.ts (2 tests) 62ms
 âœ“ src/__tests__/performance/memory-pool.test.ts (7 tests) 27ms
 âœ“ src/__tests__/performance/measure-async.test.ts (3 tests) 20ms
 âœ“ src/__tests__/geometry/polygon.test.ts (23 tests) 26ms
 âœ“ src/__tests__/performance/benchmark.test.ts (3 tests) 52ms
 âœ“ src/__tests__/performance/timer.test.ts (11 tests) 71ms
 âœ“ src/__tests__/geometry/rectangle.test.ts (40 tests) 30ms
 âœ“ src/__tests__/optimization/adapters/collision-algorithms.test.ts (26 tests) 56ms
 âœ“ src/__tests__/geometry/collision/aabb-collision.test.ts (8 tests) 42ms
 âœ“ src/__tests__/geometry/collision/spatial-collision-optimizer.test.ts (7 tests) 17ms
 âœ“ src/__tests__/performance/types.test.ts (23 tests) 45ms
 âœ“ src/__tests__/union-find/union-find.test.ts (10 tests) 22ms
 âœ“ src/__tests__/geometry/transformations/transform-apply.test.ts (12 tests) 31ms
 âœ“ src/__tests__/performance/measure-sync.test.ts (4 tests) 18ms
 âœ“ src/__tests__/geometry/shapes/polygon-algorithms-transformations.test.ts (8 tests) 14ms
 âœ“ src/__tests__/spatial-hash/spatial-hash.test.ts (16 tests) 36ms
 âœ“ src/__tests__/geometry/transformations/transformation-algorithms.test.ts (31 tests) 47ms
 âœ“ src/__tests__/optimization/algorithm-selector.test.ts (22 tests) 34ms
 âœ“ src/__tests__/geometry/circle.test.ts (18 tests) 14ms
 âœ“ src/__tests__/optimization/adapters/workload-analyzer.test.ts (16 tests) 34ms
 âœ“ src/__tests__/geometry/vectors/geometric-operations.test.ts (8 tests) 11ms
 âœ“ src/__tests__/geometry/shapes/circle-algorithms.test.ts (23 tests) 14ms
 âœ“ src/__tests__/geometry/transformations/transform-basic.test.ts (8 tests) 10ms
 âœ“ src/__tests__/geometry/shapes/rectangle-advanced.test.ts (10 tests) 13ms
 âœ“ src/__tests__/performance/budget-clear.test.ts (7 tests) 22ms
stdout | src/__tests__/paw-optimization-benchmark.test.ts > PAW Optimization Benchmark > Large Dataset Performance (1000+ objects) > should significantly outperform naive for large datasets
Large dataset results:
Naive: 420.355ms
Spatial: 382.183ms
PAW: 57.433ms
Collision counts - Naive: 66813, Spatial: 66813, PAW: 2676

 âœ“ src/__tests__/performance/memory-extended.test.ts (17 tests) 59ms
 âœ“ src/__tests__/geometry/collision/aabb-operations.test.ts (28 tests) 44ms
 âœ“ src/__tests__/spatial-hash/spatial-hash-types.test.ts (18 tests) 41ms
 âœ“ src/__tests__/geometry/shapes/line-basic-operations.test.ts (10 tests) 14ms
 âœ“ src/__tests__/geometry/point.test.ts (25 tests) 23ms
stdout | src/__tests__/paw-optimization-benchmark.test.ts > PAW Optimization Benchmark > Clustered Data Performance > should handle clustered data efficiently
Clustered dataset results:
Naive: 79.903ms
PAW: 16.835ms

 âœ“ src/__tests__/union-find/union-find-types.test.ts (16 tests) 28ms
 âœ“ src/__tests__/geometry/transformations/transform-combine.test.ts (5 tests) 13ms
stdout | src/__tests__/paw-optimization-benchmark.test.ts > PAW Optimization Benchmark > Sequential Data Performance > should handle sequential data efficiently
Sequential dataset results:
Naive: 9.587ms
PAW: 1.207ms

stdout | src/__tests__/paw-optimization-benchmark.test.ts > PAW Optimization Benchmark > Memory Pooling Effectiveness > should reduce memory allocation overhead
Memory pooling results:
No pooling: 5.433ms
With pooling: 4.730ms

stdout | src/__tests__/paw-optimization-benchmark.test.ts > PAW Optimization Benchmark > Algorithm Selection Accuracy > should select appropriate algorithms for different workloads
Algorithm selection results:
Small dataset stats: {
  totalQueries: [33m1[39m,
  averageExecutionTime: [33m0.08905899999990652[39m,
  averageMemoryUsage: [33m0[39m,
  algorithmUsage: { naive: [33m1[39m, spatial: [33m1[39m, optimized: [33m0[39m },
  memoryPoolStats: {
    totalAllocations: [33m1[39m,
    totalDeallocations: [33m1[39m,
    poolHits: [33m1[39m,
    poolMisses: [33m0[39m,
    memorySaved: [33m1472[39m,
    averageAllocationTime: [33m0.007550999998784391[39m,
    peakPoolUsage: [33m1[39m,
    currentPoolUsage: [33m1[39m,
    hitRate: [33m100[39m,
    allocationReduction: [33m100[39m
  },
  performanceHistory: []
}
Large dataset stats: {
  totalQueries: [33m2[39m,
  averageExecutionTime: [33m23.407320500000424[39m,
  averageMemoryUsage: [33m0[39m,
  algorithmUsage: { naive: [33m1[39m, spatial: [33m1[39m, optimized: [33m0[39m },
  memoryPoolStats: {
    totalAllocations: [33m1[39m,
    totalDeallocations: [33m1[39m,
    poolHits: [33m1[39m,
    poolMisses: [33m0[39m,
    memorySaved: [33m1472[39m,
    averageAllocationTime: [33m0.007550999998784391[39m,
    peakPoolUsage: [33m1[39m,
    currentPoolUsage: [33m1[39m,
    hitRate: [33m100[39m,
    allocationReduction: [33m100[39m
  },
  performanceHistory: []
}

 âœ“ src/__tests__/geometry/shapes/rectangle-basic.test.ts (13 tests) 16ms
stdout | src/__tests__/paw-optimization-benchmark.test.ts > PAW Optimization Benchmark > Performance Monitoring > should track performance metrics accurately
Performance monitoring results:
Stats: {
  totalQueries: [33m10[39m,
  averageExecutionTime: [33m10.460518399999819[39m,
  averageMemoryUsage: [33m0[39m,
  algorithmUsage: { naive: [33m0[39m, spatial: [33m10[39m, optimized: [33m0[39m },
  memoryPoolStats: {
    totalAllocations: [33m0[39m,
    totalDeallocations: [33m0[39m,
    poolHits: [33m0[39m,
    poolMisses: [33m0[39m,
    memorySaved: [33m0[39m,
    averageAllocationTime: [33m0[39m,
    peakPoolUsage: [33m0[39m,
    currentPoolUsage: [33m0[39m,
    hitRate: [33m0[39m,
    allocationReduction: [33m0[39m
  },
  performanceHistory: []
}
Report: {
  summary: {
    totalQueries: [33m10[39m,
    averageExecutionTime: [33m10.460518399999819[39m,
    averageMemoryUsage: [33m0[39m,
    hitRate: [33m0[39m,
    isDegraded: [33mtrue[39m
  },
  algorithmUsage: { naive: [33m0[39m, spatial: [33m10[39m, optimized: [33m0[39m },
  memoryPool: {
    totalAllocations: [33m0[39m,
    totalDeallocations: [33m0[39m,
    poolHits: [33m0[39m,
    poolMisses: [33m0[39m,
    memorySaved: [33m0[39m,
    averageAllocationTime: [33m0[39m,
    peakPoolUsage: [33m0[39m,
    currentPoolUsage: [33m0[39m,
    hitRate: [33m0[39m,
    allocationReduction: [33m0[39m
  },
  recommendations: [
    {
      type: [32m'pool_size'[39m,
      description: [32m'Low pool hit rate detected. Consider increasing pool sizes.'[39m,
      impact: [32m'high'[39m,
      implementation: [32m'Increase spatialHashPoolSize and collisionArrayPoolSize in config'[39m
    },
    {
      type: [32m'object_lifecycle'[39m,
      description: [32m'Allocation reduction below optimal. Check object lifecycle management.'[39m,
      impact: [32m'high'[39m,
      implementation: [32m'Ensure proper returnToPool() calls and object reuse patterns'[39m
    }
  ]
}

stdout | src/__tests__/paw-optimization-benchmark.test.ts > PAW Optimization Benchmark > Adaptive Behavior > should adapt to changing workload patterns
Adaptive behavior results:
Final stats: {
  totalQueries: [33m15[39m,
  averageExecutionTime: [33m6.532204799999575[39m,
  averageMemoryUsage: [33m0[39m,
  algorithmUsage: { naive: [33m10[39m, spatial: [33m5[39m, optimized: [33m0[39m },
  memoryPoolStats: {
    totalAllocations: [33m10[39m,
    totalDeallocations: [33m10[39m,
    poolHits: [33m10[39m,
    poolMisses: [33m0[39m,
    memorySaved: [33m14720[39m,
    averageAllocationTime: [33m0.003946899999937159[39m,
    peakPoolUsage: [33m1[39m,
    currentPoolUsage: [33m1[39m,
    hitRate: [33m100[39m,
    allocationReduction: [33m100[39m
  },
  performanceHistory: []
}
Recommendations: []

 âœ“ src/__tests__/paw-optimization-benchmark.test.ts (9 tests) 10306ms
   âœ“ PAW Optimization Benchmark > Medium Dataset Performance (100-500 objects) > should outperform naive for medium datasets  934ms
   âœ“ PAW Optimization Benchmark > Large Dataset Performance (1000+ objects) > should significantly outperform naive for large datasets  7226ms
   âœ“ PAW Optimization Benchmark > Clustered Data Performance > should handle clustered data efficiently  1307ms
 âœ“ src/__tests__/performance/throttle.test.ts (11 tests) 31ms
 âœ“ src/__tests__/geometry/collision/aabb-spatial-hash.test.ts (18 tests) 22ms
 âœ“ src/__tests__/geometry/shapes/line-geometric-operations.test.ts (10 tests) 25ms
 âœ“ src/__tests__/union-find/union-find-batch-operations.test.ts (6 tests) 12ms
 âœ“ src/__tests__/performance/benchmark-class.test.ts (6 tests) 27ms
 âœ“ src/__tests__/geometry/vectors/vector-algorithms.test.ts (21 tests) 39ms
 âœ“ src/__tests__/geometry/collision/aabb-types.test.ts (17 tests) 22ms
 âœ“ src/__tests__/geometry/vectors/scalar-operations.test.ts (3 tests) 13ms
 âœ“ src/__tests__/geometry/collision/aabb-utils.test.ts (18 tests) 27ms
 âœ“ src/__tests__/types/spatial-types.test.ts (27 tests) 97ms
 âœ“ src/__tests__/geometry/shapes/circle-transformations.test.ts (8 tests) 11ms
 âœ“ src/__tests__/geometry/shapes/point-algorithms.basic.test.ts (6 tests) 21ms
 âœ“ src/__tests__/geometry/collision/aabb-batch-collision.test.ts (12 tests) 55ms
 âœ“ src/__tests__/geometry/shapes/line-intersection-distance.test.ts (12 tests) 31ms
 âœ“ src/__tests__/geometry/collision/are-aabbs-touching.test.ts (7 tests) 14ms
 âœ“ src/__tests__/geometry/collision/contains-aabb.test.ts (5 tests) 7ms
 âœ“ src/__tests__/geometry/vectors/mathematical-operations.test.ts (6 tests) 7ms
 âœ“ src/__tests__/geometry/shapes/point-algorithms.test.ts (17 tests) 18ms
 âœ“ src/__tests__/performance/budget-check.test.ts (9 tests) 34ms
 âœ“ src/__tests__/geometry/shapes/circle-basic-operations.test.ts (5 tests) 9ms
 âœ“ src/__tests__/geometry/shapes/polygon-algorithms-creation.test.ts (2 tests) 17ms
 âœ“ src/__tests__/performance/budget-setup.test.ts (3 tests) 10ms
 âœ“ src/__tests__/geometry.test.ts (11 tests) 22ms
 âœ“ src/__tests__/geometry/transformations/transform-inverse.test.ts (6 tests) 10ms
 âœ“ src/__tests__/performance/memory.test.ts (7 tests) 10ms
 âœ“ src/__tests__/geometry/collision/expand-aabb.test.ts (4 tests) 8ms
 âœ“ src/__tests__/geometry/shapes/point-algorithms.utility.test.ts (4 tests) 9ms
 âœ“ src/__tests__/geometry/shapes/polygon-algorithms-spatial.test.ts (11 tests) 10ms
 âœ“ src/__tests__/geometry/collision/intersection-aabb.test.ts (5 tests) 8ms
 âœ“ src/__tests__/geometry/shapes/polygon-algorithms-geometry.test.ts (14 tests) 15ms
 âœ“ src/__tests__/geometry/vectors/basic-operations.test.ts (4 tests) 20ms
 âœ“ src/__tests__/geometry/shapes/point-algorithms.geometry.test.ts (7 tests) 8ms
 âœ“ src/__tests__/geometry/collision/union-aabb.test.ts (4 tests) 8ms
 âœ“ src/__tests__/geometry/shapes/circle-geometric-operations.test.ts (10 tests) 6ms
 âœ“ src/__tests__/geometry/collision/point-in-aabb.test.ts (3 tests) 5ms
 âœ“ src/__tests__/geometry/shapes/rectangle-algorithms.test.ts (4 tests) 10ms

 Test Files  79 passed (79)
      Tests  982 passed (982)
   Start at  01:10:19
   Duration  20.78s (transform 3.14s, setup 0ms, collect 7.38s, tests 13.37s, environment 49.13s, prepare 19.85s)

 % Coverage report from v8
-------------------|---------|----------|---------|---------|-------------------
File               | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
-------------------|---------|----------|---------|---------|-------------------
All files          |   85.22 |    94.06 |   92.32 |   85.22 |                   
 algorithms        |       0 |        0 |       0 |       0 |                   
  ..._coverage.cjs |       0 |        0 |       0 |       0 | 1-195             
 algorithms/src    |   85.54 |     92.3 |   79.16 |   85.54 |                   
  exports.ts       |     100 |      100 |     100 |     100 |                   
  geometry.ts      |     100 |      100 |     100 |     100 |                   
  index.ts         |     100 |      100 |     100 |     100 |                   
  optimized.ts     |   82.85 |       92 |   78.26 |   82.85 | ...99-301,304-306 
  test-setup.ts    |       0 |        0 |       0 |       0 |                   
 ...s/src/geometry |    95.5 |      100 |     100 |    95.5 |                   
  circle.ts        |     100 |      100 |     100 |     100 |                   
  index.ts         |       0 |      100 |     100 |       0 | 5-8               
  point.ts         |     100 |      100 |     100 |     100 |                   
  polygon.ts       |     100 |      100 |     100 |     100 |                   
  rectangle.ts     |     100 |      100 |     100 |     100 |                   
 ...etry/collision |   97.45 |    94.44 |   96.77 |   97.45 |                   
  ...-collision.ts |     100 |      100 |     100 |     100 |                   
  ...-collision.ts |     100 |    86.66 |     100 |     100 | 34                
  aabb-index.ts    |     100 |      100 |     100 |     100 |                   
  ...operations.ts |     100 |      100 |     100 |     100 |                   
  ...atial-hash.ts |   91.83 |      100 |   83.33 |   91.83 | 24-27             
  aabb-types.ts    |       0 |        0 |       0 |       0 |                   
  aabb-utils.ts    |     100 |      100 |     100 |     100 |                   
  ...algorithms.ts |     100 |      100 |     100 |     100 |                   
  ...ction-core.ts |   91.86 |       85 |     100 |   91.86 | 36-37,51-55       
  index.ts         |     100 |      100 |     100 |     100 |                   
  ...-optimizer.ts |     100 |       90 |     100 |     100 | 131               
  ...sion-stats.ts |     100 |      100 |     100 |     100 |                   
 ...eometry/shapes |   97.74 |    99.09 |     100 |   97.74 |                   
  ...algorithms.ts |     100 |      100 |     100 |     100 |                   
  index.ts         |       0 |      100 |     100 |       0 | 19-40             
  ...algorithms.ts |   98.61 |    95.83 |     100 |   98.61 | 101               
  ...algorithms.ts |     100 |      100 |     100 |     100 |                   
  ...algorithms.ts |     100 |      100 |     100 |     100 |                   
  ...e-advanced.ts |     100 |      100 |     100 |     100 |                   
  ...algorithms.ts |     100 |      100 |     100 |     100 |                   
  ...ngle-basic.ts |     100 |      100 |     100 |     100 |                   
  shapes.ts        |       0 |        0 |       0 |       0 |                   
 ...ransformations |   98.88 |      100 |     100 |   98.88 |                   
  index.ts         |       0 |      100 |     100 |       0 | 18                
  ...algorithms.ts |     100 |      100 |     100 |     100 |                   
 ...ometry/vectors |   98.27 |      100 |     100 |   98.27 |                   
  index.ts         |       0 |      100 |     100 |       0 | 17                
  ...algorithms.ts |     100 |      100 |     100 |     100 |                   
 ...c/optimization |     100 |      100 |     100 |     100 |                   
  index.ts         |     100 |      100 |     100 |     100 |                   
 ...ation/adapters |   84.37 |    91.34 |    92.1 |   84.37 |                   
  ...algorithms.ts |   59.34 |    86.66 |     100 |   59.34 | 110-166,168-170   
  index.ts         |       0 |      100 |     100 |       0 | 10-33             
  ...on-adapter.ts |   86.36 |    92.85 |    87.5 |   86.36 | ...84-294,297-316 
  ...ce-monitor.ts |   94.11 |    83.33 |    90.9 |   94.11 | 120-121,184-189   
  ...d-analyzer.ts |     100 |    94.11 |     100 |     100 | 64,89             
 ...imization/core |   83.58 |    86.84 |    91.3 |   83.58 |                   
  ...m-selector.ts |    83.2 |    90.47 |   83.33 |    83.2 | ...85,520-529,537 
  ...emory-pool.ts |   83.94 |    84.72 |     100 |   83.94 | ...76,584,592,600 
 ...rc/performance |   85.83 |    98.51 |    83.6 |   85.83 |                   
  benchmark.ts     |     100 |      100 |     100 |     100 |                   
  budget.ts        |     100 |      100 |     100 |     100 |                   
  framerate.ts     |     100 |      100 |     100 |     100 |                   
  index.ts         |       0 |      100 |     100 |       0 | 20-42             
  ...-pool-core.ts |   82.92 |      100 |      75 |   82.92 | 113-115,118-128   
  ...pool-utils.ts |   69.56 |      100 |   71.42 |   69.56 | ...26-127,138-141 
  memory.ts        |     100 |      100 |     100 |     100 |                   
  throttle.ts      |   72.72 |       90 |      50 |   72.72 | ...35-140,143-150 
  timer.ts         |     100 |      100 |     100 |     100 |                   
  types.ts         |       0 |        0 |       0 |       0 |                   
 ...c/spatial-hash |   88.99 |    92.85 |      92 |   88.99 |                   
  index.ts         |       0 |      100 |     100 |       0 | 19-28             
  ...-hash-core.ts |   89.29 |    90.19 |   89.47 |   89.29 | ...53-355,360-365 
  ...hash-types.ts |       0 |        0 |       0 |       0 |                   
  ...hash-utils.ts |     100 |      100 |     100 |     100 |                   
  spatial-hash.ts  |       0 |      100 |     100 |       0 | 19-25             
 ...thms/src/types |       0 |        0 |       0 |       0 |                   
  ...ance-types.ts |       0 |        0 |       0 |       0 |                   
  spatial-types.ts |       0 |        0 |       0 |       0 |                   
 ...src/union-find |   95.91 |       90 |      96 |   95.91 |                   
  index.ts         |     100 |      100 |     100 |     100 |                   
  ...operations.ts |   91.42 |    80.95 |    87.5 |   91.42 | ...49,164,172-173 
  ...-find-core.ts |   98.33 |    94.73 |     100 |   98.33 | 43                
  ...operations.ts |     100 |     90.9 |     100 |     100 | 68                
  ...find-types.ts |       0 |        0 |       0 |       0 |                   
  ...find-utils.ts |     100 |      100 |     100 |     100 |                   
  union-find.ts    |     100 |      100 |     100 |     100 |                   
-------------------|---------|----------|---------|---------|-------------------
