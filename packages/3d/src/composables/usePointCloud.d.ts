import type { Point3D, PointCloudSettings, SearchIntegrationSettings } from "../types";
export declare function usePointCloud(points: () => Point3D[], settings?: () => PointCloudSettings, searchIntegration?: () => SearchIntegrationSettings): {
    isLoading: any;
    error: any;
    threeJS: any;
    textureLoader: any;
    raycaster: any;
    mouse: any;
    pointCloud: any;
    visiblePoints: any;
    renderStats: any;
    hoveredPoint: any;
    selectedPoints: any;
    isDragging: any;
    dragStart: any;
    tooltipPosition: any;
    selectionGroups: any;
    searchIntegrationData: any;
    queryPointMesh: any;
    pathMeshes: any;
    radiusMesh: any;
    maxPoints: any;
    pointSize: any;
    enableInstancing: any;
    enableLOD: any;
    enableCulling: any;
    lodDistance: any;
    lodLevels: any;
    lodLevel: () => number;
    frustumCulled: () => number;
    occlusionCulled: () => number;
    enableHighlighting: any;
    highlightColor: any;
    highlightSize: any;
    enableSearchIntegration: any;
    searchQueryEmbedding: any;
    searchResults: any;
    reductionMethod: any;
    transformedData: any;
    originalIndices: any;
    highlightQueryPoint: any;
    showSimilarityPaths: any;
    showSimilarityRadius: any;
    radiusThreshold: any;
    maxPathLength: any;
    queryPointColor: any;
    pathColor: any;
    radiusColor: any;
    processedPoints: any;
    initializeThreeJS: any;
    initializeRaycaster: any;
    createPointSelectionHandler: any;
    createPointHoverHandler: any;
    setSelectedPoints: any;
    setHoveredPoint: any;
    setTooltipPosition: any;
    setSearchIntegrationData: any;
    setQueryPointMesh: any;
    setPathMeshes: any;
    setRadiusMesh: any;
    setPointCloud: any;
    setVisiblePoints: any;
    setRenderStats: any;
};
