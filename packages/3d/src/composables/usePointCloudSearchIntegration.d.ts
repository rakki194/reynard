import type { Point3D, SearchIntegrationSettings } from "../types";
export declare function usePointCloudSearchIntegration(searchIntegration?: () => SearchIntegrationSettings): {
    enableSearchIntegration: import("solid-js").Accessor<boolean>;
    searchQueryEmbedding: import("solid-js").Accessor<number[] | undefined>;
    searchResults: import("solid-js").Accessor<{
        [key: string]: any;
        id?: number | string;
        score: number;
        embedding_vector?: number[];
    }[]>;
    reductionMethod: import("solid-js").Accessor<string>;
    transformedData: import("solid-js").Accessor<number[][]>;
    originalIndices: import("solid-js").Accessor<number[]>;
    highlightQueryPoint: import("solid-js").Accessor<boolean>;
    showSimilarityPaths: import("solid-js").Accessor<boolean>;
    showSimilarityRadius: import("solid-js").Accessor<boolean>;
    radiusThreshold: import("solid-js").Accessor<number>;
    maxPathLength: import("solid-js").Accessor<number>;
    queryPointColor: import("solid-js").Accessor<number[]>;
    pathColor: import("solid-js").Accessor<number[]>;
    radiusColor: import("solid-js").Accessor<number[]>;
    searchIntegrationData: import("solid-js").Accessor<unknown>;
    queryPointMesh: import("solid-js").Accessor<unknown>;
    pathMeshes: import("solid-js").Accessor<unknown[]>;
    radiusMesh: import("solid-js").Accessor<unknown>;
    setSearchIntegrationData: import("solid-js").Setter<unknown>;
    setQueryPointMesh: import("solid-js").Setter<unknown>;
    setPathMeshes: import("solid-js").Setter<unknown[]>;
    setRadiusMesh: import("solid-js").Setter<unknown>;
    processPointsWithSearchIntegration: (points: Point3D[]) => Point3D[];
};
