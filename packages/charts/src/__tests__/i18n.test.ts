/**
 * i18n Tests for charts Package
 * Auto-generated by Reynard i18n testing orchestrator
 */

import { describe, it, expect } from 'vitest';
import { runPackageI18nTests } from 'reynard-testing/utils/i18n-package-orchestrator';
import { getPackageI18nConfig } from 'reynard-testing/config/i18n-testing-config';

describe('charts i18n Tests', () => {
  it('should pass all i18n validation checks', async () => {
    const config = getPackageI18nConfig('charts');
    expect(config).toBeDefined();
    
    if (config?.enabled) {
      const result = await runPackageI18nTests(config);
      
      expect(result.success).toBe(true);
      expect(result.errors).toHaveLength(0);
      
      if (config.failOnHardcodedStrings) {
        expect(result.results.hardcodedStrings).toHaveLength(0);
      }
      
      if (config.validateCompleteness) {
        const missingTranslations = result.results.translationValidation.reduce(
          (sum, validation) => sum + validation.missingKeys.length, 0
        );
        expect(missingTranslations).toBe(0);
      }
    }
  });
  
  it('should have proper translation namespaces', () => {
    const config = getPackageI18nConfig('charts');
    expect(config).toBeDefined();
    
    if (config?.enabled) {
      expect(config.namespaces).toContain('common');
      expect(config.namespaces).toContain('charts');
      expect(config.namespaces.length).toBeGreaterThan(0);
    }
  });
  
  it('should have appropriate ignore patterns', () => {
    const config = getPackageI18nConfig('charts');
    expect(config).toBeDefined();
    
    if (config?.enabled) {
      expect(config.ignorePatterns).toBeDefined();
      expect(config.ignorePatterns.length).toBeGreaterThan(0);
    }
  });
});
