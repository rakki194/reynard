/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  HTTPValidationError,
  RAGConfigRequest,
  RAGConfigResponse,
  RAGIndexingStatusResponse,
  RAGIngestRequest,
  RAGIngestResponse,
  RAGQueryRequest,
  RAGQueryResponse,
  RAGStatsResponse,
} from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  RAGConfigRequestFromJSON,
  RAGConfigRequestToJSON,
  RAGConfigResponseFromJSON,
  RAGConfigResponseToJSON,
  RAGIndexingStatusResponseFromJSON,
  RAGIndexingStatusResponseToJSON,
  RAGIngestRequestFromJSON,
  RAGIngestRequestToJSON,
  RAGIngestResponseFromJSON,
  RAGIngestResponseToJSON,
  RAGQueryRequestFromJSON,
  RAGQueryRequestToJSON,
  RAGQueryResponseFromJSON,
  RAGQueryResponseToJSON,
  RAGStatsResponseFromJSON,
  RAGStatsResponseToJSON,
} from "../models/index";

export interface IngestDocumentsApiRagIngestPostRequest {
  rAGIngestRequest: RAGIngestRequest;
}

export interface IngestDocumentsApiRagIngestPost0Request {
  rAGIngestRequest: RAGIngestRequest;
}

export interface IngestDocumentsStreamApiRagIngestStreamPostRequest {
  rAGIngestRequest: RAGIngestRequest;
}

export interface IngestDocumentsStreamApiRagIngestStreamPost0Request {
  rAGIngestRequest: RAGIngestRequest;
}

export interface QueryRagApiRagQueryPostRequest {
  rAGQueryRequest: RAGQueryRequest;
}

export interface QueryRagApiRagQueryPost0Request {
  rAGQueryRequest: RAGQueryRequest;
}

export interface UpdateRagConfigApiRagConfigPostRequest {
  rAGConfigRequest: RAGConfigRequest;
}

export interface UpdateRagConfigApiRagConfigPost0Request {
  rAGConfigRequest: RAGConfigRequest;
}

/**
 * RagApi - interface
 *
 * @export
 * @interface RagApiInterface
 */
export interface RagApiInterface {
  /**
   * Clear the RAG system cache.
   * @summary Clear Cache
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  clearCacheApiRagAdminClearCachePostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  clearCacheApiRagAdminClearCachePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

  /**
   * Clear the RAG system cache.
   * @summary Clear Cache
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  clearCacheApiRagAdminClearCachePost_1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  clearCacheApiRagAdminClearCachePost_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

  /**
   * Get codebase indexing statistics.
   * @summary Get Codebase Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getCodebaseStatsApiRagCodebaseStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Get codebase indexing statistics.
   * Get Codebase Stats
   */
  getCodebaseStatsApiRagCodebaseStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

  /**
   * Get current indexing status.
   * @summary Get Indexing Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getIndexingStatusApiRagAdminIndexingStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  getIndexingStatusApiRagAdminIndexingStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse>;

  /**
   * Get current indexing status.
   * @summary Get Indexing Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getIndexingStatusApiRagAdminIndexingStatusGet_2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  getIndexingStatusApiRagAdminIndexingStatusGet_2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse>;

  /**
   * Get current RAG configuration.
   * @summary Get Rag Config
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagConfigApiRagConfigGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  getRagConfigApiRagConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;

  /**
   * Get current RAG configuration.
   * @summary Get Rag Config
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagConfigApiRagConfigGet_3Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  getRagConfigApiRagConfigGet_3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;

  /**
   * Get RAG system statistics.
   * @summary Get Rag Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagStatsApiRagAdminStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>>;

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  getRagStatsApiRagAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGStatsResponse>;

  /**
   * Get RAG system statistics.
   * @summary Get Rag Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagStatsApiRagAdminStatsGet_4Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>>;

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  getRagStatsApiRagAdminStatsGet_4(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGStatsResponse>;

  /**
   * Check RAG service health.
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  healthCheckApiRagCodebaseHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Check RAG service health.
   * Health Check
   */
  healthCheckApiRagCodebaseHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

  /**
   * Index the Reynard codebase for semantic search.
   * @summary Index Codebase
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  indexCodebaseApiRagCodebaseIndexPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Index the Reynard codebase for semantic search.
   * Index Codebase
   */
  indexCodebaseApiRagCodebaseIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

  /**
   * Ingest documents into the RAG system.
   * @summary Ingest Documents
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsApiRagIngestPostRaw(
    requestParameters: IngestDocumentsApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>>;

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  ingestDocumentsApiRagIngestPost(
    requestParameters: IngestDocumentsApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse>;

  /**
   * Ingest documents into the RAG system.
   * @summary Ingest Documents
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsApiRagIngestPost_5Raw(
    requestParameters: IngestDocumentsApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>>;

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  ingestDocumentsApiRagIngestPost_5(
    requestParameters: IngestDocumentsApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse>;

  /**
   * Stream document ingestion progress.
   * @summary Ingest Documents Stream
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsStreamApiRagIngestStreamPostRaw(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  ingestDocumentsStreamApiRagIngestStreamPost(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Stream document ingestion progress.
   * @summary Ingest Documents Stream
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsStreamApiRagIngestStreamPost_6Raw(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  ingestDocumentsStreamApiRagIngestStreamPost_6(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Perform semantic search using RAG system.
   * @summary Query Rag
   * @param {RAGQueryRequest} rAGQueryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  queryRagApiRagQueryPostRaw(
    requestParameters: QueryRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>>;

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  queryRagApiRagQueryPost(
    requestParameters: QueryRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse>;

  /**
   * Perform semantic search using RAG system.
   * @summary Query Rag
   * @param {RAGQueryRequest} rAGQueryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  queryRagApiRagQueryPost_7Raw(
    requestParameters: QueryRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>>;

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  queryRagApiRagQueryPost_7(
    requestParameters: QueryRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse>;

  /**
   * Rebuild the vector index.
   * @summary Rebuild Index
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  rebuildIndexApiRagAdminRebuildIndexPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  rebuildIndexApiRagAdminRebuildIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

  /**
   * Rebuild the vector index.
   * @summary Rebuild Index
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  rebuildIndexApiRagAdminRebuildIndexPost_8Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  rebuildIndexApiRagAdminRebuildIndexPost_8(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

  /**
   * Scan the codebase and return file information.
   * @summary Scan Codebase
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  scanCodebaseApiRagCodebaseScanPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Scan the codebase and return file information.
   * Scan Codebase
   */
  scanCodebaseApiRagCodebaseScanPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

  /**
   * Update RAG configuration.
   * @summary Update Rag Config
   * @param {RAGConfigRequest} rAGConfigRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  updateRagConfigApiRagConfigPostRaw(
    requestParameters: UpdateRagConfigApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  updateRagConfigApiRagConfigPost(
    requestParameters: UpdateRagConfigApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse>;

  /**
   * Update RAG configuration.
   * @summary Update Rag Config
   * @param {RAGConfigRequest} rAGConfigRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  updateRagConfigApiRagConfigPost_9Raw(
    requestParameters: UpdateRagConfigApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  updateRagConfigApiRagConfigPost_9(
    requestParameters: UpdateRagConfigApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse>;
}

/**
 *
 */
export class RagApi extends runtime.BaseAPI implements RagApiInterface {
  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  async clearCacheApiRagAdminClearCachePostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/admin/clear-cache`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  async clearCacheApiRagAdminClearCachePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
    const response = await this.clearCacheApiRagAdminClearCachePostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  async clearCacheApiRagAdminClearCachePost_1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/admin/clear-cache`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  async clearCacheApiRagAdminClearCachePost_1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.clearCacheApiRagAdminClearCachePost_1Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get codebase indexing statistics.
   * Get Codebase Stats
   */
  async getCodebaseStatsApiRagCodebaseStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/codebase/stats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get codebase indexing statistics.
   * Get Codebase Stats
   */
  async getCodebaseStatsApiRagCodebaseStatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.getCodebaseStatsApiRagCodebaseStatsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  async getIndexingStatusApiRagAdminIndexingStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/admin/indexing-status`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGIndexingStatusResponseFromJSON(jsonValue));
  }

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  async getIndexingStatusApiRagAdminIndexingStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse> {
    const response = await this.getIndexingStatusApiRagAdminIndexingStatusGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  async getIndexingStatusApiRagAdminIndexingStatusGet_2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/admin/indexing-status`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGIndexingStatusResponseFromJSON(jsonValue));
  }

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  async getIndexingStatusApiRagAdminIndexingStatusGet_2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse> {
    const response = await this.getIndexingStatusApiRagAdminIndexingStatusGet_2Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  async getRagConfigApiRagConfigGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/config`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
  }

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  async getRagConfigApiRagConfigGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse> {
    const response = await this.getRagConfigApiRagConfigGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  async getRagConfigApiRagConfigGet_3Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/config`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
  }

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  async getRagConfigApiRagConfigGet_3(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse> {
    const response = await this.getRagConfigApiRagConfigGet_3Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  async getRagStatsApiRagAdminStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/admin/stats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGStatsResponseFromJSON(jsonValue));
  }

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  async getRagStatsApiRagAdminStatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGStatsResponse> {
    const response = await this.getRagStatsApiRagAdminStatsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  async getRagStatsApiRagAdminStatsGet_4Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/admin/stats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGStatsResponseFromJSON(jsonValue));
  }

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  async getRagStatsApiRagAdminStatsGet_4(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGStatsResponse> {
    const response = await this.getRagStatsApiRagAdminStatsGet_4Raw(initOverrides);
    return await response.value();
  }

  /**
   * Check RAG service health.
   * Health Check
   */
  async healthCheckApiRagCodebaseHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/codebase/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Check RAG service health.
   * Health Check
   */
  async healthCheckApiRagCodebaseHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.healthCheckApiRagCodebaseHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Index the Reynard codebase for semantic search.
   * Index Codebase
   */
  async indexCodebaseApiRagCodebaseIndexPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/codebase/index`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Index the Reynard codebase for semantic search.
   * Index Codebase
   */
  async indexCodebaseApiRagCodebaseIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
    const response = await this.indexCodebaseApiRagCodebaseIndexPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  async ingestDocumentsApiRagIngestPostRaw(
    requestParameters: IngestDocumentsApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>> {
    if (requestParameters["rAGIngestRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGIngestRequest",
        'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsApiRagIngestPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/ingest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGIngestResponseFromJSON(jsonValue));
  }

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  async ingestDocumentsApiRagIngestPost(
    requestParameters: IngestDocumentsApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse> {
    const response = await this.ingestDocumentsApiRagIngestPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  async ingestDocumentsApiRagIngestPost_5Raw(
    requestParameters: IngestDocumentsApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>> {
    if (requestParameters["rAGIngestRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGIngestRequest",
        'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsApiRagIngestPost_5().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/ingest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGIngestResponseFromJSON(jsonValue));
  }

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  async ingestDocumentsApiRagIngestPost_5(
    requestParameters: IngestDocumentsApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse> {
    const response = await this.ingestDocumentsApiRagIngestPost_5Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  async ingestDocumentsStreamApiRagIngestStreamPostRaw(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["rAGIngestRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGIngestRequest",
        'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsStreamApiRagIngestStreamPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/ingest/stream`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  async ingestDocumentsStreamApiRagIngestStreamPost(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.ingestDocumentsStreamApiRagIngestStreamPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  async ingestDocumentsStreamApiRagIngestStreamPost_6Raw(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["rAGIngestRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGIngestRequest",
        'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsStreamApiRagIngestStreamPost_6().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/ingest/stream`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  async ingestDocumentsStreamApiRagIngestStreamPost_6(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.ingestDocumentsStreamApiRagIngestStreamPost_6Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  async queryRagApiRagQueryPostRaw(
    requestParameters: QueryRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>> {
    if (requestParameters["rAGQueryRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGQueryRequest",
        'Required parameter "rAGQueryRequest" was null or undefined when calling queryRagApiRagQueryPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/query`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGQueryRequestToJSON(requestParameters["rAGQueryRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGQueryResponseFromJSON(jsonValue));
  }

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  async queryRagApiRagQueryPost(
    requestParameters: QueryRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse> {
    const response = await this.queryRagApiRagQueryPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  async queryRagApiRagQueryPost_7Raw(
    requestParameters: QueryRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>> {
    if (requestParameters["rAGQueryRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGQueryRequest",
        'Required parameter "rAGQueryRequest" was null or undefined when calling queryRagApiRagQueryPost_7().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/query`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGQueryRequestToJSON(requestParameters["rAGQueryRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGQueryResponseFromJSON(jsonValue));
  }

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  async queryRagApiRagQueryPost_7(
    requestParameters: QueryRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse> {
    const response = await this.queryRagApiRagQueryPost_7Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  async rebuildIndexApiRagAdminRebuildIndexPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/admin/rebuild-index`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  async rebuildIndexApiRagAdminRebuildIndexPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.rebuildIndexApiRagAdminRebuildIndexPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  async rebuildIndexApiRagAdminRebuildIndexPost_8Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/admin/rebuild-index`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  async rebuildIndexApiRagAdminRebuildIndexPost_8(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.rebuildIndexApiRagAdminRebuildIndexPost_8Raw(initOverrides);
    return await response.value();
  }

  /**
   * Scan the codebase and return file information.
   * Scan Codebase
   */
  async scanCodebaseApiRagCodebaseScanPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/codebase/scan`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Scan the codebase and return file information.
   * Scan Codebase
   */
  async scanCodebaseApiRagCodebaseScanPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
    const response = await this.scanCodebaseApiRagCodebaseScanPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  async updateRagConfigApiRagConfigPostRaw(
    requestParameters: UpdateRagConfigApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>> {
    if (requestParameters["rAGConfigRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGConfigRequest",
        'Required parameter "rAGConfigRequest" was null or undefined when calling updateRagConfigApiRagConfigPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/config`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGConfigRequestToJSON(requestParameters["rAGConfigRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
  }

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  async updateRagConfigApiRagConfigPost(
    requestParameters: UpdateRagConfigApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse> {
    const response = await this.updateRagConfigApiRagConfigPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  async updateRagConfigApiRagConfigPost_9Raw(
    requestParameters: UpdateRagConfigApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>> {
    if (requestParameters["rAGConfigRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGConfigRequest",
        'Required parameter "rAGConfigRequest" was null or undefined when calling updateRagConfigApiRagConfigPost_9().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/rag/config`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGConfigRequestToJSON(requestParameters["rAGConfigRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
  }

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  async updateRagConfigApiRagConfigPost_9(
    requestParameters: UpdateRagConfigApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse> {
    const response = await this.updateRagConfigApiRagConfigPost_9Raw(requestParameters, initOverrides);
    return await response.value();
  }
}
