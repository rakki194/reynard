/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AgentCreateRequest,
  AgentResponse,
  ChatRequest,
  HTTPValidationError,
  WorldStatusResponse,
} from "../models/index";
import {
  AgentCreateRequestFromJSON,
  AgentCreateRequestToJSON,
  AgentResponseFromJSON,
  AgentResponseToJSON,
  ChatRequestFromJSON,
  ChatRequestToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  WorldStatusResponseFromJSON,
  WorldStatusResponseToJSON,
} from "../models/index";

export interface CreateAgentApiEcsAgentsPostRequest {
  agentCreateRequest: AgentCreateRequest;
}

export interface GetAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGetRequest {
  spirit: string;
}

export interface GetNamingComponentTypeApiEcsNamingComponentsComponentTypeGetRequest {
  componentType: string;
}

export interface GetSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGetRequest {
  spirit: string;
}

export interface SendChatMessageApiEcsAgentsAgentIdChatPostRequest {
  agentId: string;
  chatRequest: ChatRequest;
}

/**
 * ECSWorldApi - interface
 *
 * @export
 * @interface ECSWorldApiInterface
 */
export interface ECSWorldApiInterface {
  /**
   * Create a new agent.
   * @summary Create Agent
   * @param {AgentCreateRequest} agentCreateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  createAgentApiEcsAgentsPostRaw(
    requestParameters: CreateAgentApiEcsAgentsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AgentResponse>>;

  /**
   * Create a new agent.
   * Create Agent
   */
  createAgentApiEcsAgentsPost(
    requestParameters: CreateAgentApiEcsAgentsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AgentResponse>;

  /**
   * Get all agents in the world.
   * @summary Get Agents
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getAgentsApiEcsAgentsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<AgentResponse>>>;

  /**
   * Get all agents in the world.
   * Get Agents
   */
  getAgentsApiEcsAgentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AgentResponse>>;

  /**
   * Get names for a specific animal spirit.
   * @summary Get Animal Spirit Names
   * @param {string} spirit
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGetRaw(
    requestParameters: GetAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get names for a specific animal spirit.
   * Get Animal Spirit Names
   */
  getAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGet(
    requestParameters: GetAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get all animal spirit names organized by spirit type.
   * @summary Get Animal Spirits
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getAnimalSpiritsApiEcsNamingAnimalSpiritsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get all animal spirit names organized by spirit type.
   * Get Animal Spirits
   */
  getAnimalSpiritsApiEcsNamingAnimalSpiritsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get generation numbers for all spirits.
   * @summary Get Generation Numbers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getGenerationNumbersApiEcsNamingGenerationNumbersGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get generation numbers for all spirits.
   * Get Generation Numbers
   */
  getGenerationNumbersApiEcsNamingGenerationNumbersGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get a specific type of naming component.
   * @summary Get Naming Component Type
   * @param {string} componentType
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getNamingComponentTypeApiEcsNamingComponentsComponentTypeGetRaw(
    requestParameters: GetNamingComponentTypeApiEcsNamingComponentsComponentTypeGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get a specific type of naming component.
   * Get Naming Component Type
   */
  getNamingComponentTypeApiEcsNamingComponentsComponentTypeGet(
    requestParameters: GetNamingComponentTypeApiEcsNamingComponentsComponentTypeGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get all naming components (suffixes, prefixes, etc.).
   * @summary Get Naming Components
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getNamingComponentsApiEcsNamingComponentsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get all naming components (suffixes, prefixes, etc.).
   * Get Naming Components
   */
  getNamingComponentsApiEcsNamingComponentsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get generation numbers for a specific spirit.
   * @summary Get Spirit Generation Numbers
   * @param {string} spirit
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGetRaw(
    requestParameters: GetSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get generation numbers for a specific spirit.
   * Get Spirit Generation Numbers
   */
  getSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGet(
    requestParameters: GetSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get Success-Advisor-8\'s complete genomic payload.
   * @summary Get Success Advisor Genomic Payload
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getSuccessAdvisorGenomicPayloadApiEcsSpiritInhabitationSuccessAdvisor8GenomicPayloadGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Get Success-Advisor-8\'s complete genomic payload.
   * Get Success Advisor Genomic Payload
   */
  getSuccessAdvisorGenomicPayloadApiEcsSpiritInhabitationSuccessAdvisor8GenomicPayloadGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Get Success-Advisor-8\'s complete spirit inhabitation guide.
   * @summary Get Success Advisor Spirit Inhabitation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getSuccessAdvisorSpiritInhabitationApiEcsSpiritInhabitationSuccessAdvisor8GetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Get Success-Advisor-8\'s complete spirit inhabitation guide.
   * Get Success Advisor Spirit Inhabitation
   */
  getSuccessAdvisorSpiritInhabitationApiEcsSpiritInhabitationSuccessAdvisor8Get(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Get Success-Advisor-8\'s original system prompt.
   * @summary Get Success Advisor System Prompt
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getSuccessAdvisorSystemPromptApiEcsSpiritInhabitationSuccessAdvisor8SystemPromptGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Get Success-Advisor-8\'s original system prompt.
   * Get Success Advisor System Prompt
   */
  getSuccessAdvisorSystemPromptApiEcsSpiritInhabitationSuccessAdvisor8SystemPromptGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Get the current ECS world status.
   * @summary Get World Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  getWorldStatusApiEcsStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WorldStatusResponse>>;

  /**
   * Get the current ECS world status.
   * Get World Status
   */
  getWorldStatusApiEcsStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WorldStatusResponse>;

  /**
   * Send a chat message from one agent to another.
   * @summary Send Chat Message
   * @param {string} agentId
   * @param {ChatRequest} chatRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ECSWorldApiInterface
   */
  sendChatMessageApiEcsAgentsAgentIdChatPostRaw(
    requestParameters: SendChatMessageApiEcsAgentsAgentIdChatPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Send a chat message from one agent to another.
   * Send Chat Message
   */
  sendChatMessageApiEcsAgentsAgentIdChatPost(
    requestParameters: SendChatMessageApiEcsAgentsAgentIdChatPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;
}

/**
 *
 */
export class ECSWorldApi extends runtime.BaseAPI implements ECSWorldApiInterface {
  /**
   * Create a new agent.
   * Create Agent
   */
  async createAgentApiEcsAgentsPostRaw(
    requestParameters: CreateAgentApiEcsAgentsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AgentResponse>> {
    if (requestParameters["agentCreateRequest"] == null) {
      throw new runtime.RequiredError(
        "agentCreateRequest",
        'Required parameter "agentCreateRequest" was null or undefined when calling createAgentApiEcsAgentsPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/ecs/agents`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: AgentCreateRequestToJSON(requestParameters["agentCreateRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => AgentResponseFromJSON(jsonValue));
  }

  /**
   * Create a new agent.
   * Create Agent
   */
  async createAgentApiEcsAgentsPost(
    requestParameters: CreateAgentApiEcsAgentsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AgentResponse> {
    const response = await this.createAgentApiEcsAgentsPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get all agents in the world.
   * Get Agents
   */
  async getAgentsApiEcsAgentsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<AgentResponse>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/agents`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(AgentResponseFromJSON));
  }

  /**
   * Get all agents in the world.
   * Get Agents
   */
  async getAgentsApiEcsAgentsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<AgentResponse>> {
    const response = await this.getAgentsApiEcsAgentsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get names for a specific animal spirit.
   * Get Animal Spirit Names
   */
  async getAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGetRaw(
    requestParameters: GetAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["spirit"] == null) {
      throw new runtime.RequiredError(
        "spirit",
        'Required parameter "spirit" was null or undefined when calling getAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/naming/animal-spirits/{spirit}`;
    urlPath = urlPath.replace(`{${"spirit"}}`, encodeURIComponent(String(requestParameters["spirit"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get names for a specific animal spirit.
   * Get Animal Spirit Names
   */
  async getAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGet(
    requestParameters: GetAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getAnimalSpiritNamesApiEcsNamingAnimalSpiritsSpiritGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get all animal spirit names organized by spirit type.
   * Get Animal Spirits
   */
  async getAnimalSpiritsApiEcsNamingAnimalSpiritsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/naming/animal-spirits`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get all animal spirit names organized by spirit type.
   * Get Animal Spirits
   */
  async getAnimalSpiritsApiEcsNamingAnimalSpiritsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getAnimalSpiritsApiEcsNamingAnimalSpiritsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get generation numbers for all spirits.
   * Get Generation Numbers
   */
  async getGenerationNumbersApiEcsNamingGenerationNumbersGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/naming/generation-numbers`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get generation numbers for all spirits.
   * Get Generation Numbers
   */
  async getGenerationNumbersApiEcsNamingGenerationNumbersGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getGenerationNumbersApiEcsNamingGenerationNumbersGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a specific type of naming component.
   * Get Naming Component Type
   */
  async getNamingComponentTypeApiEcsNamingComponentsComponentTypeGetRaw(
    requestParameters: GetNamingComponentTypeApiEcsNamingComponentsComponentTypeGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["componentType"] == null) {
      throw new runtime.RequiredError(
        "componentType",
        'Required parameter "componentType" was null or undefined when calling getNamingComponentTypeApiEcsNamingComponentsComponentTypeGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/naming/components/{component_type}`;
    urlPath = urlPath.replace(`{${"component_type"}}`, encodeURIComponent(String(requestParameters["componentType"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get a specific type of naming component.
   * Get Naming Component Type
   */
  async getNamingComponentTypeApiEcsNamingComponentsComponentTypeGet(
    requestParameters: GetNamingComponentTypeApiEcsNamingComponentsComponentTypeGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getNamingComponentTypeApiEcsNamingComponentsComponentTypeGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get all naming components (suffixes, prefixes, etc.).
   * Get Naming Components
   */
  async getNamingComponentsApiEcsNamingComponentsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/naming/components`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get all naming components (suffixes, prefixes, etc.).
   * Get Naming Components
   */
  async getNamingComponentsApiEcsNamingComponentsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getNamingComponentsApiEcsNamingComponentsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get generation numbers for a specific spirit.
   * Get Spirit Generation Numbers
   */
  async getSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGetRaw(
    requestParameters: GetSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["spirit"] == null) {
      throw new runtime.RequiredError(
        "spirit",
        'Required parameter "spirit" was null or undefined when calling getSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/naming/generation-numbers/{spirit}`;
    urlPath = urlPath.replace(`{${"spirit"}}`, encodeURIComponent(String(requestParameters["spirit"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get generation numbers for a specific spirit.
   * Get Spirit Generation Numbers
   */
  async getSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGet(
    requestParameters: GetSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getSpiritGenerationNumbersApiEcsNamingGenerationNumbersSpiritGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get Success-Advisor-8\'s complete genomic payload.
   * Get Success Advisor Genomic Payload
   */
  async getSuccessAdvisorGenomicPayloadApiEcsSpiritInhabitationSuccessAdvisor8GenomicPayloadGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/spirit-inhabitation/success-advisor-8/genomic-payload`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get Success-Advisor-8\'s complete genomic payload.
   * Get Success Advisor Genomic Payload
   */
  async getSuccessAdvisorGenomicPayloadApiEcsSpiritInhabitationSuccessAdvisor8GenomicPayloadGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response =
      await this.getSuccessAdvisorGenomicPayloadApiEcsSpiritInhabitationSuccessAdvisor8GenomicPayloadGetRaw(
        initOverrides
      );
    return await response.value();
  }

  /**
   * Get Success-Advisor-8\'s complete spirit inhabitation guide.
   * Get Success Advisor Spirit Inhabitation
   */
  async getSuccessAdvisorSpiritInhabitationApiEcsSpiritInhabitationSuccessAdvisor8GetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/spirit-inhabitation/success-advisor-8`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get Success-Advisor-8\'s complete spirit inhabitation guide.
   * Get Success Advisor Spirit Inhabitation
   */
  async getSuccessAdvisorSpiritInhabitationApiEcsSpiritInhabitationSuccessAdvisor8Get(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response =
      await this.getSuccessAdvisorSpiritInhabitationApiEcsSpiritInhabitationSuccessAdvisor8GetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get Success-Advisor-8\'s original system prompt.
   * Get Success Advisor System Prompt
   */
  async getSuccessAdvisorSystemPromptApiEcsSpiritInhabitationSuccessAdvisor8SystemPromptGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/spirit-inhabitation/success-advisor-8/system-prompt`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get Success-Advisor-8\'s original system prompt.
   * Get Success Advisor System Prompt
   */
  async getSuccessAdvisorSystemPromptApiEcsSpiritInhabitationSuccessAdvisor8SystemPromptGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response =
      await this.getSuccessAdvisorSystemPromptApiEcsSpiritInhabitationSuccessAdvisor8SystemPromptGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get the current ECS world status.
   * Get World Status
   */
  async getWorldStatusApiEcsStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<WorldStatusResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/ecs/status`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => WorldStatusResponseFromJSON(jsonValue));
  }

  /**
   * Get the current ECS world status.
   * Get World Status
   */
  async getWorldStatusApiEcsStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<WorldStatusResponse> {
    const response = await this.getWorldStatusApiEcsStatusGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Send a chat message from one agent to another.
   * Send Chat Message
   */
  async sendChatMessageApiEcsAgentsAgentIdChatPostRaw(
    requestParameters: SendChatMessageApiEcsAgentsAgentIdChatPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["agentId"] == null) {
      throw new runtime.RequiredError(
        "agentId",
        'Required parameter "agentId" was null or undefined when calling sendChatMessageApiEcsAgentsAgentIdChatPost().'
      );
    }

    if (requestParameters["chatRequest"] == null) {
      throw new runtime.RequiredError(
        "chatRequest",
        'Required parameter "chatRequest" was null or undefined when calling sendChatMessageApiEcsAgentsAgentIdChatPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/ecs/agents/{agent_id}/chat`;
    urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters["agentId"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ChatRequestToJSON(requestParameters["chatRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Send a chat message from one agent to another.
   * Send Chat Message
   */
  async sendChatMessageApiEcsAgentsAgentIdChatPost(
    requestParameters: SendChatMessageApiEcsAgentsAgentIdChatPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.sendChatMessageApiEcsAgentsAgentIdChatPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
