/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { HTTPValidationError } from "../models/index";
import { HTTPValidationErrorFromJSON, HTTPValidationErrorToJSON } from "../models/index";

export interface GetAgentEmailsApiImapEmailsAgentAgentIdGetRequest {
  agentId: string;
  requestBody: { [key: string]: string };
  limit?: number;
}

export interface GetEmailsSummaryApiImapEmailsSummaryGetRequest {
  requestBody: { [key: string]: string };
}

export interface GetImapStatusApiImapStatusGetRequest {
  requestBody: { [key: string]: string };
}

export interface GetRecentEmailsApiImapEmailsRecentGetRequest {
  requestBody: { [key: string]: string };
  days?: number;
  limit?: number;
}

export interface GetUnreadEmailsApiImapEmailsUnreadGetRequest {
  requestBody: { [key: string]: string };
  limit?: number;
}

export interface MarkEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPostRequest {
  messageId: string;
  requestBody: { [key: string]: string };
}

export interface MarkEmailAsReadApiImapEmailsMessageIdMarkReadPostRequest {
  messageId: string;
  requestBody: { [key: string]: string };
}

export interface StartEmailMonitoringApiImapMonitoringStartPostRequest {
  requestBody: { [key: string]: string };
  interval?: number;
}

export interface TestImapConnectionApiImapTestGetRequest {
  requestBody: { [key: string]: string };
}

/**
 * ImapApi - interface
 *
 * @export
 * @interface ImapApiInterface
 */
export interface ImapApiInterface {
  /**
   * Get emails for a specific agent.  Args:     agent_id: Agent ID to get emails for     limit: Maximum number of emails to retrieve      Returns:     List of agent emails
   * @summary Get Agent Emails
   * @param {string} agentId
   * @param {{ [key: string]: string; }} requestBody
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImapApiInterface
   */
  getAgentEmailsApiImapEmailsAgentAgentIdGetRaw(
    requestParameters: GetAgentEmailsApiImapEmailsAgentAgentIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<object>>>;

  /**
   * Get emails for a specific agent.  Args:     agent_id: Agent ID to get emails for     limit: Maximum number of emails to retrieve      Returns:     List of agent emails
   * Get Agent Emails
   */
  getAgentEmailsApiImapEmailsAgentAgentIdGet(
    requestParameters: GetAgentEmailsApiImapEmailsAgentAgentIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<object>>;

  /**
   * Get summary of received emails.  Returns:     Dict containing email statistics
   * @summary Get Emails Summary
   * @param {{ [key: string]: string; }} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImapApiInterface
   */
  getEmailsSummaryApiImapEmailsSummaryGetRaw(
    requestParameters: GetEmailsSummaryApiImapEmailsSummaryGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Get summary of received emails.  Returns:     Dict containing email statistics
   * Get Emails Summary
   */
  getEmailsSummaryApiImapEmailsSummaryGet(
    requestParameters: GetEmailsSummaryApiImapEmailsSummaryGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Get IMAP service status and connection info.  Returns:     Dict containing IMAP service status
   * @summary Get Imap Status
   * @param {{ [key: string]: string; }} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImapApiInterface
   */
  getImapStatusApiImapStatusGetRaw(
    requestParameters: GetImapStatusApiImapStatusGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Get IMAP service status and connection info.  Returns:     Dict containing IMAP service status
   * Get Imap Status
   */
  getImapStatusApiImapStatusGet(
    requestParameters: GetImapStatusApiImapStatusGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Get recent emails from the last N days.  Args:     days: Number of days to look back     limit: Maximum number of emails to retrieve      Returns:     List of recent emails
   * @summary Get Recent Emails
   * @param {{ [key: string]: string; }} requestBody
   * @param {number} [days]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImapApiInterface
   */
  getRecentEmailsApiImapEmailsRecentGetRaw(
    requestParameters: GetRecentEmailsApiImapEmailsRecentGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<object>>>;

  /**
   * Get recent emails from the last N days.  Args:     days: Number of days to look back     limit: Maximum number of emails to retrieve      Returns:     List of recent emails
   * Get Recent Emails
   */
  getRecentEmailsApiImapEmailsRecentGet(
    requestParameters: GetRecentEmailsApiImapEmailsRecentGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<object>>;

  /**
   * Get unread emails.  Args:     limit: Maximum number of emails to retrieve      Returns:     List of unread emails
   * @summary Get Unread Emails
   * @param {{ [key: string]: string; }} requestBody
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImapApiInterface
   */
  getUnreadEmailsApiImapEmailsUnreadGetRaw(
    requestParameters: GetUnreadEmailsApiImapEmailsUnreadGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<object>>>;

  /**
   * Get unread emails.  Args:     limit: Maximum number of emails to retrieve      Returns:     List of unread emails
   * Get Unread Emails
   */
  getUnreadEmailsApiImapEmailsUnreadGet(
    requestParameters: GetUnreadEmailsApiImapEmailsUnreadGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<object>>;

  /**
   * Mark an email as processed.  Args:     message_id: Email message ID      Returns:     Success status
   * @summary Mark Email As Processed
   * @param {string} messageId
   * @param {{ [key: string]: string; }} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImapApiInterface
   */
  markEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPostRaw(
    requestParameters: MarkEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Mark an email as processed.  Args:     message_id: Email message ID      Returns:     Success status
   * Mark Email As Processed
   */
  markEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPost(
    requestParameters: MarkEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Mark an email as read.  Args:     message_id: Email message ID      Returns:     Success status
   * @summary Mark Email As Read
   * @param {string} messageId
   * @param {{ [key: string]: string; }} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImapApiInterface
   */
  markEmailAsReadApiImapEmailsMessageIdMarkReadPostRaw(
    requestParameters: MarkEmailAsReadApiImapEmailsMessageIdMarkReadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Mark an email as read.  Args:     message_id: Email message ID      Returns:     Success status
   * Mark Email As Read
   */
  markEmailAsReadApiImapEmailsMessageIdMarkReadPost(
    requestParameters: MarkEmailAsReadApiImapEmailsMessageIdMarkReadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Start email monitoring in the background.  Args:     interval: Check interval in seconds     background_tasks: FastAPI background tasks      Returns:     Success status
   * @summary Start Email Monitoring
   * @param {{ [key: string]: string; }} requestBody
   * @param {number} [interval]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImapApiInterface
   */
  startEmailMonitoringApiImapMonitoringStartPostRaw(
    requestParameters: StartEmailMonitoringApiImapMonitoringStartPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Start email monitoring in the background.  Args:     interval: Check interval in seconds     background_tasks: FastAPI background tasks      Returns:     Success status
   * Start Email Monitoring
   */
  startEmailMonitoringApiImapMonitoringStartPost(
    requestParameters: StartEmailMonitoringApiImapMonitoringStartPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Test IMAP connection and basic functionality.  Returns:     Test results
   * @summary Test Imap Connection
   * @param {{ [key: string]: string; }} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImapApiInterface
   */
  testImapConnectionApiImapTestGetRaw(
    requestParameters: TestImapConnectionApiImapTestGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Test IMAP connection and basic functionality.  Returns:     Test results
   * Test Imap Connection
   */
  testImapConnectionApiImapTestGet(
    requestParameters: TestImapConnectionApiImapTestGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;
}

/**
 *
 */
export class ImapApi extends runtime.BaseAPI implements ImapApiInterface {
  /**
   * Get emails for a specific agent.  Args:     agent_id: Agent ID to get emails for     limit: Maximum number of emails to retrieve      Returns:     List of agent emails
   * Get Agent Emails
   */
  async getAgentEmailsApiImapEmailsAgentAgentIdGetRaw(
    requestParameters: GetAgentEmailsApiImapEmailsAgentAgentIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<object>>> {
    if (requestParameters["agentId"] == null) {
      throw new runtime.RequiredError(
        "agentId",
        'Required parameter "agentId" was null or undefined when calling getAgentEmailsApiImapEmailsAgentAgentIdGet().'
      );
    }

    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling getAgentEmailsApiImapEmailsAgentAgentIdGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/imap/emails/agent/{agent_id}`;
    urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters["agentId"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get emails for a specific agent.  Args:     agent_id: Agent ID to get emails for     limit: Maximum number of emails to retrieve      Returns:     List of agent emails
   * Get Agent Emails
   */
  async getAgentEmailsApiImapEmailsAgentAgentIdGet(
    requestParameters: GetAgentEmailsApiImapEmailsAgentAgentIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<object>> {
    const response = await this.getAgentEmailsApiImapEmailsAgentAgentIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get summary of received emails.  Returns:     Dict containing email statistics
   * Get Emails Summary
   */
  async getEmailsSummaryApiImapEmailsSummaryGetRaw(
    requestParameters: GetEmailsSummaryApiImapEmailsSummaryGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling getEmailsSummaryApiImapEmailsSummaryGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/imap/emails/summary`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get summary of received emails.  Returns:     Dict containing email statistics
   * Get Emails Summary
   */
  async getEmailsSummaryApiImapEmailsSummaryGet(
    requestParameters: GetEmailsSummaryApiImapEmailsSummaryGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.getEmailsSummaryApiImapEmailsSummaryGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get IMAP service status and connection info.  Returns:     Dict containing IMAP service status
   * Get Imap Status
   */
  async getImapStatusApiImapStatusGetRaw(
    requestParameters: GetImapStatusApiImapStatusGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling getImapStatusApiImapStatusGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/imap/status`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get IMAP service status and connection info.  Returns:     Dict containing IMAP service status
   * Get Imap Status
   */
  async getImapStatusApiImapStatusGet(
    requestParameters: GetImapStatusApiImapStatusGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.getImapStatusApiImapStatusGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get recent emails from the last N days.  Args:     days: Number of days to look back     limit: Maximum number of emails to retrieve      Returns:     List of recent emails
   * Get Recent Emails
   */
  async getRecentEmailsApiImapEmailsRecentGetRaw(
    requestParameters: GetRecentEmailsApiImapEmailsRecentGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<object>>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling getRecentEmailsApiImapEmailsRecentGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["days"] != null) {
      queryParameters["days"] = requestParameters["days"];
    }

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/imap/emails/recent`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get recent emails from the last N days.  Args:     days: Number of days to look back     limit: Maximum number of emails to retrieve      Returns:     List of recent emails
   * Get Recent Emails
   */
  async getRecentEmailsApiImapEmailsRecentGet(
    requestParameters: GetRecentEmailsApiImapEmailsRecentGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<object>> {
    const response = await this.getRecentEmailsApiImapEmailsRecentGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get unread emails.  Args:     limit: Maximum number of emails to retrieve      Returns:     List of unread emails
   * Get Unread Emails
   */
  async getUnreadEmailsApiImapEmailsUnreadGetRaw(
    requestParameters: GetUnreadEmailsApiImapEmailsUnreadGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<object>>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling getUnreadEmailsApiImapEmailsUnreadGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["limit"] != null) {
      queryParameters["limit"] = requestParameters["limit"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/imap/emails/unread`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get unread emails.  Args:     limit: Maximum number of emails to retrieve      Returns:     List of unread emails
   * Get Unread Emails
   */
  async getUnreadEmailsApiImapEmailsUnreadGet(
    requestParameters: GetUnreadEmailsApiImapEmailsUnreadGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<object>> {
    const response = await this.getUnreadEmailsApiImapEmailsUnreadGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Mark an email as processed.  Args:     message_id: Email message ID      Returns:     Success status
   * Mark Email As Processed
   */
  async markEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPostRaw(
    requestParameters: MarkEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["messageId"] == null) {
      throw new runtime.RequiredError(
        "messageId",
        'Required parameter "messageId" was null or undefined when calling markEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPost().'
      );
    }

    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling markEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/imap/emails/{message_id}/mark-processed`;
    urlPath = urlPath.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters["messageId"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Mark an email as processed.  Args:     message_id: Email message ID      Returns:     Success status
   * Mark Email As Processed
   */
  async markEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPost(
    requestParameters: MarkEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.markEmailAsProcessedApiImapEmailsMessageIdMarkProcessedPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Mark an email as read.  Args:     message_id: Email message ID      Returns:     Success status
   * Mark Email As Read
   */
  async markEmailAsReadApiImapEmailsMessageIdMarkReadPostRaw(
    requestParameters: MarkEmailAsReadApiImapEmailsMessageIdMarkReadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["messageId"] == null) {
      throw new runtime.RequiredError(
        "messageId",
        'Required parameter "messageId" was null or undefined when calling markEmailAsReadApiImapEmailsMessageIdMarkReadPost().'
      );
    }

    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling markEmailAsReadApiImapEmailsMessageIdMarkReadPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/imap/emails/{message_id}/mark-read`;
    urlPath = urlPath.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters["messageId"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Mark an email as read.  Args:     message_id: Email message ID      Returns:     Success status
   * Mark Email As Read
   */
  async markEmailAsReadApiImapEmailsMessageIdMarkReadPost(
    requestParameters: MarkEmailAsReadApiImapEmailsMessageIdMarkReadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.markEmailAsReadApiImapEmailsMessageIdMarkReadPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Start email monitoring in the background.  Args:     interval: Check interval in seconds     background_tasks: FastAPI background tasks      Returns:     Success status
   * Start Email Monitoring
   */
  async startEmailMonitoringApiImapMonitoringStartPostRaw(
    requestParameters: StartEmailMonitoringApiImapMonitoringStartPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling startEmailMonitoringApiImapMonitoringStartPost().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["interval"] != null) {
      queryParameters["interval"] = requestParameters["interval"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/imap/monitoring/start`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Start email monitoring in the background.  Args:     interval: Check interval in seconds     background_tasks: FastAPI background tasks      Returns:     Success status
   * Start Email Monitoring
   */
  async startEmailMonitoringApiImapMonitoringStartPost(
    requestParameters: StartEmailMonitoringApiImapMonitoringStartPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.startEmailMonitoringApiImapMonitoringStartPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Test IMAP connection and basic functionality.  Returns:     Test results
   * Test Imap Connection
   */
  async testImapConnectionApiImapTestGetRaw(
    requestParameters: TestImapConnectionApiImapTestGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["requestBody"] == null) {
      throw new runtime.RequiredError(
        "requestBody",
        'Required parameter "requestBody" was null or undefined when calling testImapConnectionApiImapTestGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/imap/test`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters["requestBody"],
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Test IMAP connection and basic functionality.  Returns:     Test results
   * Test Imap Connection
   */
  async testImapConnectionApiImapTestGet(
    requestParameters: TestImapConnectionApiImapTestGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.testImapConnectionApiImapTestGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
