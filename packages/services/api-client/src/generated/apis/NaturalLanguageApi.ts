/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ContextualSearchRequest,
  HTTPValidationError,
  IntelligentSearchRequest,
  NaturalLanguageSearchRequest,
  SearchResponse,
  SuggestionsResponse,
} from "../models/index";
import {
  ContextualSearchRequestFromJSON,
  ContextualSearchRequestToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  IntelligentSearchRequestFromJSON,
  IntelligentSearchRequestToJSON,
  NaturalLanguageSearchRequestFromJSON,
  NaturalLanguageSearchRequestToJSON,
  SearchResponseFromJSON,
  SearchResponseToJSON,
  SuggestionsResponseFromJSON,
  SuggestionsResponseToJSON,
} from "../models/index";

export interface AnalyzeQueryApiSearchAnalyzeQueryGetRequest {
  query: string;
}

export interface ContextualSearchApiSearchContextualPostRequest {
  contextualSearchRequest: ContextualSearchRequest;
}

export interface GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRequest {
  query: string;
  maxSuggestions?: number;
}

export interface IntelligentSearchApiSearchIntelligentPostRequest {
  intelligentSearchRequest: IntelligentSearchRequest;
}

export interface NaturalLanguageSearchApiSearchNaturalLanguagePostRequest {
  naturalLanguageSearchRequest: NaturalLanguageSearchRequest;
}

/**
 * NaturalLanguageApi - interface
 *
 * @export
 * @interface NaturalLanguageApiInterface
 */
export interface NaturalLanguageApiInterface {
  /**
   * Analyze a query to understand its intent and structure.
   * @summary Analyze Query
   * @param {string} query Query to analyze
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NaturalLanguageApiInterface
   */
  analyzeQueryApiSearchAnalyzeQueryGetRaw(
    requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Analyze a query to understand its intent and structure.
   * Analyze Query
   */
  analyzeQueryApiSearchAnalyzeQueryGet(
    requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Perform contextual search with additional context information.
   * @summary Contextual Search
   * @param {ContextualSearchRequest} contextualSearchRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NaturalLanguageApiInterface
   */
  contextualSearchApiSearchContextualPostRaw(
    requestParameters: ContextualSearchApiSearchContextualPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchResponse>>;

  /**
   * Perform contextual search with additional context information.
   * Contextual Search
   */
  contextualSearchApiSearchContextualPost(
    requestParameters: ContextualSearchApiSearchContextualPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchResponse>;

  /**
   * Get intelligent query suggestions based on natural language processing.
   * @summary Get Intelligent Suggestions
   * @param {string} query Query to get suggestions for
   * @param {number} [maxSuggestions] Maximum number of suggestions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NaturalLanguageApiInterface
   */
  getIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRaw(
    requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SuggestionsResponse>>;

  /**
   * Get intelligent query suggestions based on natural language processing.
   * Get Intelligent Suggestions
   */
  getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet(
    requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SuggestionsResponse>;

  /**
   * Check the health of the natural language search service.
   * @summary Health Check Natural Language
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NaturalLanguageApiInterface
   */
  healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Check the health of the natural language search service.
   * Health Check Natural Language
   */
  healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Perform intelligent search that automatically chooses the best approach.
   * @summary Intelligent Search
   * @param {IntelligentSearchRequest} intelligentSearchRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NaturalLanguageApiInterface
   */
  intelligentSearchApiSearchIntelligentPostRaw(
    requestParameters: IntelligentSearchApiSearchIntelligentPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchResponse>>;

  /**
   * Perform intelligent search that automatically chooses the best approach.
   * Intelligent Search
   */
  intelligentSearchApiSearchIntelligentPost(
    requestParameters: IntelligentSearchApiSearchIntelligentPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchResponse>;

  /**
   * Perform natural language search with intelligent query processing.
   * @summary Natural Language Search
   * @param {NaturalLanguageSearchRequest} naturalLanguageSearchRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NaturalLanguageApiInterface
   */
  naturalLanguageSearchApiSearchNaturalLanguagePostRaw(
    requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchResponse>>;

  /**
   * Perform natural language search with intelligent query processing.
   * Natural Language Search
   */
  naturalLanguageSearchApiSearchNaturalLanguagePost(
    requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchResponse>;
}

/**
 *
 */
export class NaturalLanguageApi extends runtime.BaseAPI implements NaturalLanguageApiInterface {
  /**
   * Analyze a query to understand its intent and structure.
   * Analyze Query
   */
  async analyzeQueryApiSearchAnalyzeQueryGetRaw(
    requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["query"] == null) {
      throw new runtime.RequiredError(
        "query",
        'Required parameter "query" was null or undefined when calling analyzeQueryApiSearchAnalyzeQueryGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["query"] != null) {
      queryParameters["query"] = requestParameters["query"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/search/analyze-query`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Analyze a query to understand its intent and structure.
   * Analyze Query
   */
  async analyzeQueryApiSearchAnalyzeQueryGet(
    requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.analyzeQueryApiSearchAnalyzeQueryGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Perform contextual search with additional context information.
   * Contextual Search
   */
  async contextualSearchApiSearchContextualPostRaw(
    requestParameters: ContextualSearchApiSearchContextualPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchResponse>> {
    if (requestParameters["contextualSearchRequest"] == null) {
      throw new runtime.RequiredError(
        "contextualSearchRequest",
        'Required parameter "contextualSearchRequest" was null or undefined when calling contextualSearchApiSearchContextualPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/search/contextual`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ContextualSearchRequestToJSON(requestParameters["contextualSearchRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => SearchResponseFromJSON(jsonValue));
  }

  /**
   * Perform contextual search with additional context information.
   * Contextual Search
   */
  async contextualSearchApiSearchContextualPost(
    requestParameters: ContextualSearchApiSearchContextualPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchResponse> {
    const response = await this.contextualSearchApiSearchContextualPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get intelligent query suggestions based on natural language processing.
   * Get Intelligent Suggestions
   */
  async getIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRaw(
    requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SuggestionsResponse>> {
    if (requestParameters["query"] == null) {
      throw new runtime.RequiredError(
        "query",
        'Required parameter "query" was null or undefined when calling getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["query"] != null) {
      queryParameters["query"] = requestParameters["query"];
    }

    if (requestParameters["maxSuggestions"] != null) {
      queryParameters["max_suggestions"] = requestParameters["maxSuggestions"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/search/suggestions/intelligent`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => SuggestionsResponseFromJSON(jsonValue));
  }

  /**
   * Get intelligent query suggestions based on natural language processing.
   * Get Intelligent Suggestions
   */
  async getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet(
    requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SuggestionsResponse> {
    const response = await this.getIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Check the health of the natural language search service.
   * Health Check Natural Language
   */
  async healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/search/health/natural-language`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Check the health of the natural language search service.
   * Health Check Natural Language
   */
  async healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Perform intelligent search that automatically chooses the best approach.
   * Intelligent Search
   */
  async intelligentSearchApiSearchIntelligentPostRaw(
    requestParameters: IntelligentSearchApiSearchIntelligentPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchResponse>> {
    if (requestParameters["intelligentSearchRequest"] == null) {
      throw new runtime.RequiredError(
        "intelligentSearchRequest",
        'Required parameter "intelligentSearchRequest" was null or undefined when calling intelligentSearchApiSearchIntelligentPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/search/intelligent`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: IntelligentSearchRequestToJSON(requestParameters["intelligentSearchRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => SearchResponseFromJSON(jsonValue));
  }

  /**
   * Perform intelligent search that automatically chooses the best approach.
   * Intelligent Search
   */
  async intelligentSearchApiSearchIntelligentPost(
    requestParameters: IntelligentSearchApiSearchIntelligentPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchResponse> {
    const response = await this.intelligentSearchApiSearchIntelligentPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Perform natural language search with intelligent query processing.
   * Natural Language Search
   */
  async naturalLanguageSearchApiSearchNaturalLanguagePostRaw(
    requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<SearchResponse>> {
    if (requestParameters["naturalLanguageSearchRequest"] == null) {
      throw new runtime.RequiredError(
        "naturalLanguageSearchRequest",
        'Required parameter "naturalLanguageSearchRequest" was null or undefined when calling naturalLanguageSearchApiSearchNaturalLanguagePost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("MCP-Auth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/search/natural-language`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NaturalLanguageSearchRequestToJSON(requestParameters["naturalLanguageSearchRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => SearchResponseFromJSON(jsonValue));
  }

  /**
   * Perform natural language search with intelligent query processing.
   * Natural Language Search
   */
  async naturalLanguageSearchApiSearchNaturalLanguagePost(
    requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<SearchResponse> {
    const response = await this.naturalLanguageSearchApiSearchNaturalLanguagePostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
