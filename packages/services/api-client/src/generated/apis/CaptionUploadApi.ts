/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CaptionResponse, HTTPValidationError } from "../models/index";
import {
  CaptionResponseFromJSON,
  CaptionResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from "../models/index";

export interface UploadAndGenerateCaptionApiCaptionUploadPostRequest {
  file: Blob;
  generatorName: string;
  config?: string | null;
  force?: boolean;
  postProcess?: boolean;
}

/**
 * CaptionUploadApi - interface
 *
 * @export
 * @interface CaptionUploadApiInterface
 */
export interface CaptionUploadApiInterface {
  /**
   * Upload an image and generate a caption for it.
   * @summary Upload And Generate Caption
   * @param {Blob} file
   * @param {string} generatorName
   * @param {string} [config]
   * @param {boolean} [force]
   * @param {boolean} [postProcess]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaptionUploadApiInterface
   */
  uploadAndGenerateCaptionApiCaptionUploadPostRaw(
    requestParameters: UploadAndGenerateCaptionApiCaptionUploadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CaptionResponse>>;

  /**
   * Upload an image and generate a caption for it.
   * Upload And Generate Caption
   */
  uploadAndGenerateCaptionApiCaptionUploadPost(
    requestParameters: UploadAndGenerateCaptionApiCaptionUploadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CaptionResponse>;
}

/**
 *
 */
export class CaptionUploadApi extends runtime.BaseAPI implements CaptionUploadApiInterface {
  /**
   * Upload an image and generate a caption for it.
   * Upload And Generate Caption
   */
  async uploadAndGenerateCaptionApiCaptionUploadPostRaw(
    requestParameters: UploadAndGenerateCaptionApiCaptionUploadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CaptionResponse>> {
    if (requestParameters["file"] == null) {
      throw new runtime.RequiredError(
        "file",
        'Required parameter "file" was null or undefined when calling uploadAndGenerateCaptionApiCaptionUploadPost().'
      );
    }

    if (requestParameters["generatorName"] == null) {
      throw new runtime.RequiredError(
        "generatorName",
        'Required parameter "generatorName" was null or undefined when calling uploadAndGenerateCaptionApiCaptionUploadPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["file"] != null) {
      formParams.append("file", requestParameters["file"] as any);
    }

    if (requestParameters["generatorName"] != null) {
      formParams.append("generator_name", requestParameters["generatorName"] as any);
    }

    if (requestParameters["config"] != null) {
      formParams.append("config", requestParameters["config"] as any);
    }

    if (requestParameters["force"] != null) {
      formParams.append("force", requestParameters["force"] as any);
    }

    if (requestParameters["postProcess"] != null) {
      formParams.append("post_process", requestParameters["postProcess"] as any);
    }

    let urlPath = `/api/caption/upload`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => CaptionResponseFromJSON(jsonValue));
  }

  /**
   * Upload an image and generate a caption for it.
   * Upload And Generate Caption
   */
  async uploadAndGenerateCaptionApiCaptionUploadPost(
    requestParameters: UploadAndGenerateCaptionApiCaptionUploadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CaptionResponse> {
    const response = await this.uploadAndGenerateCaptionApiCaptionUploadPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
