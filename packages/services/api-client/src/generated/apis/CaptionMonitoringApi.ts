/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { HTTPValidationError } from "../models/index";
import { HTTPValidationErrorFromJSON, HTTPValidationErrorToJSON } from "../models/index";

export interface GetCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGetRequest {
  modelName: string;
}

export interface GetModelHealthStatusApiCaptionModelsModelNameHealthGetRequest {
  modelName: string;
}

export interface GetModelUsageStatsApiCaptionModelsModelNameStatsGetRequest {
  modelName: string;
}

/**
 * CaptionMonitoringApi - interface
 *
 * @export
 * @interface CaptionMonitoringApiInterface
 */
export interface CaptionMonitoringApiInterface {
  /**
   * Get circuit breaker state for a specific model.
   * @summary Get Circuit Breaker State
   * @param {string} modelName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaptionMonitoringApiInterface
   */
  getCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGetRaw(
    requestParameters: GetCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get circuit breaker state for a specific model.
   * Get Circuit Breaker State
   */
  getCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGet(
    requestParameters: GetCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get system health status.
   * @summary Get Health Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaptionMonitoringApiInterface
   */
  getHealthStatusApiCaptionHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get system health status.
   * Get Health Status
   */
  getHealthStatusApiCaptionHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

  /**
   * Get health status for a specific model.
   * @summary Get Model Health Status
   * @param {string} modelName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaptionMonitoringApiInterface
   */
  getModelHealthStatusApiCaptionModelsModelNameHealthGetRaw(
    requestParameters: GetModelHealthStatusApiCaptionModelsModelNameHealthGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get health status for a specific model.
   * Get Model Health Status
   */
  getModelHealthStatusApiCaptionModelsModelNameHealthGet(
    requestParameters: GetModelHealthStatusApiCaptionModelsModelNameHealthGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get usage statistics for a specific model.
   * @summary Get Model Usage Stats
   * @param {string} modelName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaptionMonitoringApiInterface
   */
  getModelUsageStatsApiCaptionModelsModelNameStatsGetRaw(
    requestParameters: GetModelUsageStatsApiCaptionModelsModelNameStatsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get usage statistics for a specific model.
   * Get Model Usage Stats
   */
  getModelUsageStatsApiCaptionModelsModelNameStatsGet(
    requestParameters: GetModelUsageStatsApiCaptionModelsModelNameStatsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get request queue status.
   * @summary Get Queue Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaptionMonitoringApiInterface
   */
  getQueueStatusApiCaptionQueueGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get request queue status.
   * Get Queue Status
   */
  getQueueStatusApiCaptionQueueGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

  /**
   * Get comprehensive system statistics and usage metrics.
   * @summary Get System Statistics
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CaptionMonitoringApiInterface
   */
  getSystemStatisticsApiCaptionStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get comprehensive system statistics and usage metrics.
   * Get System Statistics
   */
  getSystemStatisticsApiCaptionStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
}

/**
 *
 */
export class CaptionMonitoringApi extends runtime.BaseAPI implements CaptionMonitoringApiInterface {
  /**
   * Get circuit breaker state for a specific model.
   * Get Circuit Breaker State
   */
  async getCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGetRaw(
    requestParameters: GetCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["modelName"] == null) {
      throw new runtime.RequiredError(
        "modelName",
        'Required parameter "modelName" was null or undefined when calling getCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/caption/models/{model_name}/circuit-breaker`;
    urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters["modelName"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get circuit breaker state for a specific model.
   * Get Circuit Breaker State
   */
  async getCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGet(
    requestParameters: GetCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get system health status.
   * Get Health Status
   */
  async getHealthStatusApiCaptionHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/caption/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get system health status.
   * Get Health Status
   */
  async getHealthStatusApiCaptionHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
    const response = await this.getHealthStatusApiCaptionHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get health status for a specific model.
   * Get Model Health Status
   */
  async getModelHealthStatusApiCaptionModelsModelNameHealthGetRaw(
    requestParameters: GetModelHealthStatusApiCaptionModelsModelNameHealthGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["modelName"] == null) {
      throw new runtime.RequiredError(
        "modelName",
        'Required parameter "modelName" was null or undefined when calling getModelHealthStatusApiCaptionModelsModelNameHealthGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/caption/models/{model_name}/health`;
    urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters["modelName"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get health status for a specific model.
   * Get Model Health Status
   */
  async getModelHealthStatusApiCaptionModelsModelNameHealthGet(
    requestParameters: GetModelHealthStatusApiCaptionModelsModelNameHealthGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getModelHealthStatusApiCaptionModelsModelNameHealthGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get usage statistics for a specific model.
   * Get Model Usage Stats
   */
  async getModelUsageStatsApiCaptionModelsModelNameStatsGetRaw(
    requestParameters: GetModelUsageStatsApiCaptionModelsModelNameStatsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["modelName"] == null) {
      throw new runtime.RequiredError(
        "modelName",
        'Required parameter "modelName" was null or undefined when calling getModelUsageStatsApiCaptionModelsModelNameStatsGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/caption/models/{model_name}/stats`;
    urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters["modelName"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get usage statistics for a specific model.
   * Get Model Usage Stats
   */
  async getModelUsageStatsApiCaptionModelsModelNameStatsGet(
    requestParameters: GetModelUsageStatsApiCaptionModelsModelNameStatsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getModelUsageStatsApiCaptionModelsModelNameStatsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get request queue status.
   * Get Queue Status
   */
  async getQueueStatusApiCaptionQueueGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/caption/queue`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get request queue status.
   * Get Queue Status
   */
  async getQueueStatusApiCaptionQueueGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
    const response = await this.getQueueStatusApiCaptionQueueGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get comprehensive system statistics and usage metrics.
   * Get System Statistics
   */
  async getSystemStatisticsApiCaptionStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/caption/stats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get comprehensive system statistics and usage metrics.
   * Get System Statistics
   */
  async getSystemStatisticsApiCaptionStatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getSystemStatisticsApiCaptionStatsGetRaw(initOverrides);
    return await response.value();
  }
}
