/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ConfigResponse,
  ConfigUpdateRequest,
  HTTPValidationError,
  LazyExportRequest,
  LazyExportResponse,
  LazyLoadingStatusResponse,
  PackageInfoResponse,
  PackageLoadRequest,
  PackageLoadResponse,
} from "../models/index";
import {
  ConfigResponseFromJSON,
  ConfigResponseToJSON,
  ConfigUpdateRequestFromJSON,
  ConfigUpdateRequestToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  LazyExportRequestFromJSON,
  LazyExportRequestToJSON,
  LazyExportResponseFromJSON,
  LazyExportResponseToJSON,
  LazyLoadingStatusResponseFromJSON,
  LazyLoadingStatusResponseToJSON,
  PackageInfoResponseFromJSON,
  PackageInfoResponseToJSON,
  PackageLoadRequestFromJSON,
  PackageLoadRequestToJSON,
  PackageLoadResponseFromJSON,
  PackageLoadResponseToJSON,
} from "../models/index";

export interface CreateLazyExportEndpointApiLazyLoadingExportsPostRequest {
  lazyExportRequest: LazyExportRequest;
}

export interface ForceCleanupEndpointApiLazyLoadingCleanupPostRequest {
  packageName?: string | null;
}

export interface GetLazyExportEndpointApiLazyLoadingExportsPackageNameGetRequest {
  packageName: string;
}

export interface GetPackageInfoEndpointApiLazyLoadingPackagesPackageNameGetRequest {
  packageName: string;
}

export interface LoadPackageEndpointApiLazyLoadingPackagesLoadPostRequest {
  packageLoadRequest: PackageLoadRequest;
}

export interface UnloadPackageEndpointApiLazyLoadingPackagesPackageNameDeleteRequest {
  packageName: string;
}

export interface UpdateConfigEndpointApiLazyLoadingConfigPutRequest {
  configUpdateRequest: ConfigUpdateRequest;
}

/**
 * LazyLoadingApi - interface
 *
 * @export
 * @interface LazyLoadingApiInterface
 */
export interface LazyLoadingApiInterface {
  /**
   * Clear the export registry.
   * @summary Clear Registry Endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  clearRegistryEndpointApiLazyLoadingRegistryDeleteRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Clear the export registry.
   * Clear Registry Endpoint
   */
  clearRegistryEndpointApiLazyLoadingRegistryDelete(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Create a new lazy export for a package.
   * @summary Create Lazy Export Endpoint
   * @param {LazyExportRequest} lazyExportRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  createLazyExportEndpointApiLazyLoadingExportsPostRaw(
    requestParameters: CreateLazyExportEndpointApiLazyLoadingExportsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LazyExportResponse>>;

  /**
   * Create a new lazy export for a package.
   * Create Lazy Export Endpoint
   */
  createLazyExportEndpointApiLazyLoadingExportsPost(
    requestParameters: CreateLazyExportEndpointApiLazyLoadingExportsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LazyExportResponse>;

  /**
   * Force cleanup of packages or all packages.
   * @summary Force Cleanup Endpoint
   * @param {string} [packageName]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  forceCleanupEndpointApiLazyLoadingCleanupPostRaw(
    requestParameters: ForceCleanupEndpointApiLazyLoadingCleanupPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Force cleanup of packages or all packages.
   * Force Cleanup Endpoint
   */
  forceCleanupEndpointApiLazyLoadingCleanupPost(
    requestParameters: ForceCleanupEndpointApiLazyLoadingCleanupPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get information about all registered packages.
   * @summary Get All Packages Endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  getAllPackagesEndpointApiLazyLoadingPackagesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<PackageInfoResponse>>>;

  /**
   * Get information about all registered packages.
   * Get All Packages Endpoint
   */
  getAllPackagesEndpointApiLazyLoadingPackagesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<PackageInfoResponse>>;

  /**
   * Get the current lazy loading configuration.
   * @summary Get Config Endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  getConfigEndpointApiLazyLoadingConfigGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ConfigResponse>>;

  /**
   * Get the current lazy loading configuration.
   * Get Config Endpoint
   */
  getConfigEndpointApiLazyLoadingConfigGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ConfigResponse>;

  /**
   * Get an existing lazy export.
   * @summary Get Lazy Export Endpoint
   * @param {string} packageName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  getLazyExportEndpointApiLazyLoadingExportsPackageNameGetRaw(
    requestParameters: GetLazyExportEndpointApiLazyLoadingExportsPackageNameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LazyExportResponse>>;

  /**
   * Get an existing lazy export.
   * Get Lazy Export Endpoint
   */
  getLazyExportEndpointApiLazyLoadingExportsPackageNameGet(
    requestParameters: GetLazyExportEndpointApiLazyLoadingExportsPackageNameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LazyExportResponse>;

  /**
   * Get the current status of the lazy loading system.
   * @summary Get Lazy Loading Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  getLazyLoadingStatusApiLazyLoadingStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LazyLoadingStatusResponse>>;

  /**
   * Get the current status of the lazy loading system.
   * Get Lazy Loading Status
   */
  getLazyLoadingStatusApiLazyLoadingStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LazyLoadingStatusResponse>;

  /**
   * Get detailed information about a specific package.
   * @summary Get Package Info Endpoint
   * @param {string} packageName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  getPackageInfoEndpointApiLazyLoadingPackagesPackageNameGetRaw(
    requestParameters: GetPackageInfoEndpointApiLazyLoadingPackagesPackageNameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PackageInfoResponse>>;

  /**
   * Get detailed information about a specific package.
   * Get Package Info Endpoint
   */
  getPackageInfoEndpointApiLazyLoadingPackagesPackageNameGet(
    requestParameters: GetPackageInfoEndpointApiLazyLoadingPackagesPackageNameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PackageInfoResponse>;

  /**
   * Load a package using its lazy export.
   * @summary Load Package Endpoint
   * @param {PackageLoadRequest} packageLoadRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  loadPackageEndpointApiLazyLoadingPackagesLoadPostRaw(
    requestParameters: LoadPackageEndpointApiLazyLoadingPackagesLoadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PackageLoadResponse>>;

  /**
   * Load a package using its lazy export.
   * Load Package Endpoint
   */
  loadPackageEndpointApiLazyLoadingPackagesLoadPost(
    requestParameters: LoadPackageEndpointApiLazyLoadingPackagesLoadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PackageLoadResponse>;

  /**
   * Unload a package by forcing cleanup of its lazy export.
   * @summary Unload Package Endpoint
   * @param {string} packageName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  unloadPackageEndpointApiLazyLoadingPackagesPackageNameDeleteRaw(
    requestParameters: UnloadPackageEndpointApiLazyLoadingPackagesPackageNameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Unload a package by forcing cleanup of its lazy export.
   * Unload Package Endpoint
   */
  unloadPackageEndpointApiLazyLoadingPackagesPackageNameDelete(
    requestParameters: UnloadPackageEndpointApiLazyLoadingPackagesPackageNameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Update the lazy loading configuration.
   * @summary Update Config Endpoint
   * @param {ConfigUpdateRequest} configUpdateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LazyLoadingApiInterface
   */
  updateConfigEndpointApiLazyLoadingConfigPutRaw(
    requestParameters: UpdateConfigEndpointApiLazyLoadingConfigPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Update the lazy loading configuration.
   * Update Config Endpoint
   */
  updateConfigEndpointApiLazyLoadingConfigPut(
    requestParameters: UpdateConfigEndpointApiLazyLoadingConfigPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;
}

/**
 *
 */
export class LazyLoadingApi extends runtime.BaseAPI implements LazyLoadingApiInterface {
  /**
   * Clear the export registry.
   * Clear Registry Endpoint
   */
  async clearRegistryEndpointApiLazyLoadingRegistryDeleteRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/lazy-loading/registry`;

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Clear the export registry.
   * Clear Registry Endpoint
   */
  async clearRegistryEndpointApiLazyLoadingRegistryDelete(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.clearRegistryEndpointApiLazyLoadingRegistryDeleteRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create a new lazy export for a package.
   * Create Lazy Export Endpoint
   */
  async createLazyExportEndpointApiLazyLoadingExportsPostRaw(
    requestParameters: CreateLazyExportEndpointApiLazyLoadingExportsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LazyExportResponse>> {
    if (requestParameters["lazyExportRequest"] == null) {
      throw new runtime.RequiredError(
        "lazyExportRequest",
        'Required parameter "lazyExportRequest" was null or undefined when calling createLazyExportEndpointApiLazyLoadingExportsPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/lazy-loading/exports`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LazyExportRequestToJSON(requestParameters["lazyExportRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => LazyExportResponseFromJSON(jsonValue));
  }

  /**
   * Create a new lazy export for a package.
   * Create Lazy Export Endpoint
   */
  async createLazyExportEndpointApiLazyLoadingExportsPost(
    requestParameters: CreateLazyExportEndpointApiLazyLoadingExportsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LazyExportResponse> {
    const response = await this.createLazyExportEndpointApiLazyLoadingExportsPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Force cleanup of packages or all packages.
   * Force Cleanup Endpoint
   */
  async forceCleanupEndpointApiLazyLoadingCleanupPostRaw(
    requestParameters: ForceCleanupEndpointApiLazyLoadingCleanupPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    if (requestParameters["packageName"] != null) {
      queryParameters["package_name"] = requestParameters["packageName"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/lazy-loading/cleanup`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Force cleanup of packages or all packages.
   * Force Cleanup Endpoint
   */
  async forceCleanupEndpointApiLazyLoadingCleanupPost(
    requestParameters: ForceCleanupEndpointApiLazyLoadingCleanupPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.forceCleanupEndpointApiLazyLoadingCleanupPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get information about all registered packages.
   * Get All Packages Endpoint
   */
  async getAllPackagesEndpointApiLazyLoadingPackagesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<PackageInfoResponse>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/lazy-loading/packages`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(PackageInfoResponseFromJSON));
  }

  /**
   * Get information about all registered packages.
   * Get All Packages Endpoint
   */
  async getAllPackagesEndpointApiLazyLoadingPackagesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<PackageInfoResponse>> {
    const response = await this.getAllPackagesEndpointApiLazyLoadingPackagesGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get the current lazy loading configuration.
   * Get Config Endpoint
   */
  async getConfigEndpointApiLazyLoadingConfigGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ConfigResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/lazy-loading/config`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ConfigResponseFromJSON(jsonValue));
  }

  /**
   * Get the current lazy loading configuration.
   * Get Config Endpoint
   */
  async getConfigEndpointApiLazyLoadingConfigGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ConfigResponse> {
    const response = await this.getConfigEndpointApiLazyLoadingConfigGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get an existing lazy export.
   * Get Lazy Export Endpoint
   */
  async getLazyExportEndpointApiLazyLoadingExportsPackageNameGetRaw(
    requestParameters: GetLazyExportEndpointApiLazyLoadingExportsPackageNameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LazyExportResponse>> {
    if (requestParameters["packageName"] == null) {
      throw new runtime.RequiredError(
        "packageName",
        'Required parameter "packageName" was null or undefined when calling getLazyExportEndpointApiLazyLoadingExportsPackageNameGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/lazy-loading/exports/{package_name}`;
    urlPath = urlPath.replace(`{${"package_name"}}`, encodeURIComponent(String(requestParameters["packageName"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => LazyExportResponseFromJSON(jsonValue));
  }

  /**
   * Get an existing lazy export.
   * Get Lazy Export Endpoint
   */
  async getLazyExportEndpointApiLazyLoadingExportsPackageNameGet(
    requestParameters: GetLazyExportEndpointApiLazyLoadingExportsPackageNameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LazyExportResponse> {
    const response = await this.getLazyExportEndpointApiLazyLoadingExportsPackageNameGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get the current status of the lazy loading system.
   * Get Lazy Loading Status
   */
  async getLazyLoadingStatusApiLazyLoadingStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<LazyLoadingStatusResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/lazy-loading/status`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => LazyLoadingStatusResponseFromJSON(jsonValue));
  }

  /**
   * Get the current status of the lazy loading system.
   * Get Lazy Loading Status
   */
  async getLazyLoadingStatusApiLazyLoadingStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<LazyLoadingStatusResponse> {
    const response = await this.getLazyLoadingStatusApiLazyLoadingStatusGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get detailed information about a specific package.
   * Get Package Info Endpoint
   */
  async getPackageInfoEndpointApiLazyLoadingPackagesPackageNameGetRaw(
    requestParameters: GetPackageInfoEndpointApiLazyLoadingPackagesPackageNameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PackageInfoResponse>> {
    if (requestParameters["packageName"] == null) {
      throw new runtime.RequiredError(
        "packageName",
        'Required parameter "packageName" was null or undefined when calling getPackageInfoEndpointApiLazyLoadingPackagesPackageNameGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/lazy-loading/packages/{package_name}`;
    urlPath = urlPath.replace(`{${"package_name"}}`, encodeURIComponent(String(requestParameters["packageName"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => PackageInfoResponseFromJSON(jsonValue));
  }

  /**
   * Get detailed information about a specific package.
   * Get Package Info Endpoint
   */
  async getPackageInfoEndpointApiLazyLoadingPackagesPackageNameGet(
    requestParameters: GetPackageInfoEndpointApiLazyLoadingPackagesPackageNameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PackageInfoResponse> {
    const response = await this.getPackageInfoEndpointApiLazyLoadingPackagesPackageNameGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Load a package using its lazy export.
   * Load Package Endpoint
   */
  async loadPackageEndpointApiLazyLoadingPackagesLoadPostRaw(
    requestParameters: LoadPackageEndpointApiLazyLoadingPackagesLoadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PackageLoadResponse>> {
    if (requestParameters["packageLoadRequest"] == null) {
      throw new runtime.RequiredError(
        "packageLoadRequest",
        'Required parameter "packageLoadRequest" was null or undefined when calling loadPackageEndpointApiLazyLoadingPackagesLoadPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/lazy-loading/packages/load`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PackageLoadRequestToJSON(requestParameters["packageLoadRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => PackageLoadResponseFromJSON(jsonValue));
  }

  /**
   * Load a package using its lazy export.
   * Load Package Endpoint
   */
  async loadPackageEndpointApiLazyLoadingPackagesLoadPost(
    requestParameters: LoadPackageEndpointApiLazyLoadingPackagesLoadPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PackageLoadResponse> {
    const response = await this.loadPackageEndpointApiLazyLoadingPackagesLoadPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Unload a package by forcing cleanup of its lazy export.
   * Unload Package Endpoint
   */
  async unloadPackageEndpointApiLazyLoadingPackagesPackageNameDeleteRaw(
    requestParameters: UnloadPackageEndpointApiLazyLoadingPackagesPackageNameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["packageName"] == null) {
      throw new runtime.RequiredError(
        "packageName",
        'Required parameter "packageName" was null or undefined when calling unloadPackageEndpointApiLazyLoadingPackagesPackageNameDelete().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/lazy-loading/packages/{package_name}`;
    urlPath = urlPath.replace(`{${"package_name"}}`, encodeURIComponent(String(requestParameters["packageName"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Unload a package by forcing cleanup of its lazy export.
   * Unload Package Endpoint
   */
  async unloadPackageEndpointApiLazyLoadingPackagesPackageNameDelete(
    requestParameters: UnloadPackageEndpointApiLazyLoadingPackagesPackageNameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.unloadPackageEndpointApiLazyLoadingPackagesPackageNameDeleteRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update the lazy loading configuration.
   * Update Config Endpoint
   */
  async updateConfigEndpointApiLazyLoadingConfigPutRaw(
    requestParameters: UpdateConfigEndpointApiLazyLoadingConfigPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["configUpdateRequest"] == null) {
      throw new runtime.RequiredError(
        "configUpdateRequest",
        'Required parameter "configUpdateRequest" was null or undefined when calling updateConfigEndpointApiLazyLoadingConfigPut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/lazy-loading/config`;

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ConfigUpdateRequestToJSON(requestParameters["configUpdateRequest"]),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Update the lazy loading configuration.
   * Update Config Endpoint
   */
  async updateConfigEndpointApiLazyLoadingConfigPut(
    requestParameters: UpdateConfigEndpointApiLazyLoadingConfigPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.updateConfigEndpointApiLazyLoadingConfigPutRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
