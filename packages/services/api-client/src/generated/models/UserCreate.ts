/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { UserRole } from "./UserRole";
import { UserRoleFromJSON, UserRoleFromJSONTyped, UserRoleToJSON, UserRoleToJSONTyped } from "./UserRole";

/**
 * User model for registration requests.
 *
 * Accepts a plain password which will be hashed by the server.
 *
 * Attributes:
 *     username (str): Unique username for the user
 *     password (str): Plain text password for registration
 *     email (Optional[str]): User's email address
 *     role (UserRole): The role of the user (admin, regular, guest). Defaults to regular.
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
  /**
   * Unique username for the user. Alphanumeric, underscores, and hyphens only.
   * @type {string}
   * @memberof UserCreate
   */
  username: string;
  /**
   * Plain text password for registration. Must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character.
   * @type {string}
   * @memberof UserCreate
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof UserCreate
   */
  email?: string | null;
  /**
   *
   * @type {UserRole}
   * @memberof UserCreate
   */
  role?: UserRole;
}

/**
 * Check if a given object implements the UserCreate interface.
 */
export function instanceOfUserCreate(value: object): value is UserCreate {
  if (!("username" in value) || value["username"] === undefined) return false;
  if (!("password" in value) || value["password"] === undefined) return false;
  return true;
}

export function UserCreateFromJSON(json: any): UserCreate {
  return UserCreateFromJSONTyped(json, false);
}

export function UserCreateFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserCreate {
  if (json == null) {
    return json;
  }
  return {
    username: json["username"],
    password: json["password"],
    email: json["email"] == null ? undefined : json["email"],
    role: json["role"] == null ? undefined : UserRoleFromJSON(json["role"]),
  };
}

export function UserCreateToJSON(json: any): UserCreate {
  return UserCreateToJSONTyped(json, false);
}

export function UserCreateToJSONTyped(value?: UserCreate | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    username: value["username"],
    password: value["password"],
    email: value["email"],
    role: UserRoleToJSON(value["role"]),
  };
}
