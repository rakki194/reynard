/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { NLWebSuggestion } from "./NLWebSuggestion";
import {
  NLWebSuggestionFromJSON,
  NLWebSuggestionFromJSONTyped,
  NLWebSuggestionToJSON,
  NLWebSuggestionToJSONTyped,
} from "./NLWebSuggestion";

/**
 * Response containing tool suggestions.
 * @export
 * @interface NLWebSuggestionResponse
 */
export interface NLWebSuggestionResponse {
  /**
   * List of tool suggestions
   * @type {Array<NLWebSuggestion>}
   * @memberof NLWebSuggestionResponse
   */
  suggestions: Array<NLWebSuggestion>;
  /**
   * Original query
   * @type {string}
   * @memberof NLWebSuggestionResponse
   */
  query: string;
  /**
   * Processing time in milliseconds
   * @type {number}
   * @memberof NLWebSuggestionResponse
   */
  processingTimeMs: number;
  /**
   * Whether this was served from cache
   * @type {boolean}
   * @memberof NLWebSuggestionResponse
   */
  cacheHit?: boolean;
  /**
   * Total number of tools considered
   * @type {number}
   * @memberof NLWebSuggestionResponse
   */
  totalToolsConsidered: number;
}

/**
 * Check if a given object implements the NLWebSuggestionResponse interface.
 */
export function instanceOfNLWebSuggestionResponse(value: object): value is NLWebSuggestionResponse {
  if (!("suggestions" in value) || value["suggestions"] === undefined) return false;
  if (!("query" in value) || value["query"] === undefined) return false;
  if (!("processingTimeMs" in value) || value["processingTimeMs"] === undefined) return false;
  if (!("totalToolsConsidered" in value) || value["totalToolsConsidered"] === undefined) return false;
  return true;
}

export function NLWebSuggestionResponseFromJSON(json: any): NLWebSuggestionResponse {
  return NLWebSuggestionResponseFromJSONTyped(json, false);
}

export function NLWebSuggestionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): NLWebSuggestionResponse {
  if (json == null) {
    return json;
  }
  return {
    suggestions: (json["suggestions"] as Array<any>).map(NLWebSuggestionFromJSON),
    query: json["query"],
    processingTimeMs: json["processing_time_ms"],
    cacheHit: json["cache_hit"] == null ? undefined : json["cache_hit"],
    totalToolsConsidered: json["total_tools_considered"],
  };
}

export function NLWebSuggestionResponseToJSON(json: any): NLWebSuggestionResponse {
  return NLWebSuggestionResponseToJSONTyped(json, false);
}

export function NLWebSuggestionResponseToJSONTyped(
  value?: NLWebSuggestionResponse | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    suggestions: (value["suggestions"] as Array<any>).map(NLWebSuggestionToJSON),
    query: value["query"],
    processing_time_ms: value["processingTimeMs"],
    cache_hit: value["cacheHit"],
    total_tools_considered: value["totalToolsConsidered"],
  };
}
