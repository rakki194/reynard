/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { CaptionRequest } from "./CaptionRequest";
import {
  CaptionRequestFromJSON,
  CaptionRequestFromJSONTyped,
  CaptionRequestToJSON,
  CaptionRequestToJSONTyped,
} from "./CaptionRequest";

/**
 * Request model for batch caption generation.
 * @export
 * @interface BatchCaptionRequest
 */
export interface BatchCaptionRequest {
  /**
   * List of caption generation tasks
   * @type {Array<CaptionRequest>}
   * @memberof BatchCaptionRequest
   */
  tasks: Array<CaptionRequest>;
  /**
   * Maximum number of concurrent operations
   * @type {number}
   * @memberof BatchCaptionRequest
   */
  maxConcurrent?: number;
}

/**
 * Check if a given object implements the BatchCaptionRequest interface.
 */
export function instanceOfBatchCaptionRequest(value: object): value is BatchCaptionRequest {
  if (!("tasks" in value) || value["tasks"] === undefined) return false;
  return true;
}

export function BatchCaptionRequestFromJSON(json: any): BatchCaptionRequest {
  return BatchCaptionRequestFromJSONTyped(json, false);
}

export function BatchCaptionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BatchCaptionRequest {
  if (json == null) {
    return json;
  }
  return {
    tasks: (json["tasks"] as Array<any>).map(CaptionRequestFromJSON),
    maxConcurrent: json["max_concurrent"] == null ? undefined : json["max_concurrent"],
  };
}

export function BatchCaptionRequestToJSON(json: any): BatchCaptionRequest {
  return BatchCaptionRequestToJSONTyped(json, false);
}

export function BatchCaptionRequestToJSONTyped(
  value?: BatchCaptionRequest | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    tasks: (value["tasks"] as Array<any>).map(CaptionRequestToJSON),
    max_concurrent: value["maxConcurrent"],
  };
}
