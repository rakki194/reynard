/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface ImageFormatResponse
 */
export interface ImageFormatResponse {
  /**
   *
   * @type {string}
   * @memberof ImageFormatResponse
   */
  extension: string;
  /**
   *
   * @type {string}
   * @memberof ImageFormatResponse
   */
  mimeType: string;
  /**
   *
   * @type {boolean}
   * @memberof ImageFormatResponse
   */
  supported: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ImageFormatResponse
   */
  requiresPlugin?: boolean | null;
}

/**
 * Check if a given object implements the ImageFormatResponse interface.
 */
export function instanceOfImageFormatResponse(value: object): value is ImageFormatResponse {
  if (!("extension" in value) || value["extension"] === undefined) return false;
  if (!("mimeType" in value) || value["mimeType"] === undefined) return false;
  if (!("supported" in value) || value["supported"] === undefined) return false;
  return true;
}

export function ImageFormatResponseFromJSON(json: any): ImageFormatResponse {
  return ImageFormatResponseFromJSONTyped(json, false);
}

export function ImageFormatResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageFormatResponse {
  if (json == null) {
    return json;
  }
  return {
    extension: json["extension"],
    mimeType: json["mime_type"],
    supported: json["supported"],
    requiresPlugin: json["requires_plugin"] == null ? undefined : json["requires_plugin"],
  };
}

export function ImageFormatResponseToJSON(json: any): ImageFormatResponse {
  return ImageFormatResponseToJSONTyped(json, false);
}

export function ImageFormatResponseToJSONTyped(
  value?: ImageFormatResponse | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    extension: value["extension"],
    mime_type: value["mimeType"],
    supported: value["supported"],
    requires_plugin: value["requiresPlugin"],
  };
}
