/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Response model for MCP token generation.
 * @export
 * @interface MCPTokenResponse
 */
export interface MCPTokenResponse {
  /**
   * Generated JWT token
   * @type {string}
   * @memberof MCPTokenResponse
   */
  token: string;
  /**
   * Client identifier
   * @type {string}
   * @memberof MCPTokenResponse
   */
  clientId: string;
  /**
   * Granted permissions
   * @type {Array<string>}
   * @memberof MCPTokenResponse
   */
  permissions: Array<string>;
  /**
   * Token expiration timestamp
   * @type {number}
   * @memberof MCPTokenResponse
   */
  expiresAt: number;
}

/**
 * Check if a given object implements the MCPTokenResponse interface.
 */
export function instanceOfMCPTokenResponse(value: object): value is MCPTokenResponse {
  if (!("token" in value) || value["token"] === undefined) return false;
  if (!("clientId" in value) || value["clientId"] === undefined) return false;
  if (!("permissions" in value) || value["permissions"] === undefined) return false;
  if (!("expiresAt" in value) || value["expiresAt"] === undefined) return false;
  return true;
}

export function MCPTokenResponseFromJSON(json: any): MCPTokenResponse {
  return MCPTokenResponseFromJSONTyped(json, false);
}

export function MCPTokenResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MCPTokenResponse {
  if (json == null) {
    return json;
  }
  return {
    token: json["token"],
    clientId: json["client_id"],
    permissions: json["permissions"],
    expiresAt: json["expires_at"],
  };
}

export function MCPTokenResponseToJSON(json: any): MCPTokenResponse {
  return MCPTokenResponseToJSONTyped(json, false);
}

export function MCPTokenResponseToJSONTyped(
  value?: MCPTokenResponse | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    token: value["token"],
    client_id: value["clientId"],
    permissions: value["permissions"],
    expires_at: value["expiresAt"],
  };
}
