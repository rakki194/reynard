/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { RAGIngestItem } from "./RAGIngestItem";
import {
  RAGIngestItemFromJSON,
  RAGIngestItemFromJSONTyped,
  RAGIngestItemToJSON,
  RAGIngestItemToJSONTyped,
} from "./RAGIngestItem";

/**
 * Request model for document ingestion.
 * @export
 * @interface RAGIngestRequest
 */
export interface RAGIngestRequest {
  /**
   * Documents to ingest
   * @type {Array<RAGIngestItem>}
   * @memberof RAGIngestRequest
   */
  items: Array<RAGIngestItem>;
  /**
   *
   * @type {string}
   * @memberof RAGIngestRequest
   */
  model?: string | null;
  /**
   *
   * @type {number}
   * @memberof RAGIngestRequest
   */
  batchSize?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof RAGIngestRequest
   */
  forceReindex?: boolean | null;
}

/**
 * Check if a given object implements the RAGIngestRequest interface.
 */
export function instanceOfRAGIngestRequest(value: object): value is RAGIngestRequest {
  if (!("items" in value) || value["items"] === undefined) return false;
  return true;
}

export function RAGIngestRequestFromJSON(json: any): RAGIngestRequest {
  return RAGIngestRequestFromJSONTyped(json, false);
}

export function RAGIngestRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RAGIngestRequest {
  if (json == null) {
    return json;
  }
  return {
    items: (json["items"] as Array<any>).map(RAGIngestItemFromJSON),
    model: json["model"] == null ? undefined : json["model"],
    batchSize: json["batch_size"] == null ? undefined : json["batch_size"],
    forceReindex: json["force_reindex"] == null ? undefined : json["force_reindex"],
  };
}

export function RAGIngestRequestToJSON(json: any): RAGIngestRequest {
  return RAGIngestRequestToJSONTyped(json, false);
}

export function RAGIngestRequestToJSONTyped(
  value?: RAGIngestRequest | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    items: (value["items"] as Array<any>).map(RAGIngestItemToJSON),
    model: value["model"],
    batch_size: value["batchSize"],
    force_reindex: value["forceReindex"],
  };
}
