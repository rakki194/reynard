/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
/**
 * SystemApi - interface
 *
 * @export
 * @interface SystemApiInterface
 */
export interface SystemApiInterface {
  /**
   * Retrieve current application configuration (development environment only).  This endpoint provides access to the current application configuration including environment settings, debug flags, and service-specific configurations. Access is restricted to development environments for security purposes.  Returns:     dict: Application configuration containing:         - environment: Current deployment environment         - debug: Debug mode status         - services: Service-specific configuration details including:             - enabled: Service activation status             - timeout: Service timeout configurations  Raises:     HTTPException: 404 Not Found if accessed in production environment.
   * @summary Get Configuration
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemApiInterface
   */
  getConfigurationApiConfigGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;
  /**
   * Retrieve current application configuration (development environment only).  This endpoint provides access to the current application configuration including environment settings, debug flags, and service-specific configurations. Access is restricted to development environments for security purposes.  Returns:     dict: Application configuration containing:         - environment: Current deployment environment         - debug: Debug mode status         - services: Service-specific configuration details including:             - enabled: Service activation status             - timeout: Service timeout configurations  Raises:     HTTPException: 404 Not Found if accessed in production environment.
   * Get Configuration
   */
  getConfigurationApiConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
}
/**
 *
 */
export declare class SystemApi extends runtime.BaseAPI implements SystemApiInterface {
  /**
   * Retrieve current application configuration (development environment only).  This endpoint provides access to the current application configuration including environment settings, debug flags, and service-specific configurations. Access is restricted to development environments for security purposes.  Returns:     dict: Application configuration containing:         - environment: Current deployment environment         - debug: Debug mode status         - services: Service-specific configuration details including:             - enabled: Service activation status             - timeout: Service timeout configurations  Raises:     HTTPException: 404 Not Found if accessed in production environment.
   * Get Configuration
   */
  getConfigurationApiConfigGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;
  /**
   * Retrieve current application configuration (development environment only).  This endpoint provides access to the current application configuration including environment settings, debug flags, and service-specific configurations. Access is restricted to development environments for security purposes.  Returns:     dict: Application configuration containing:         - environment: Current deployment environment         - debug: Debug mode status         - services: Service-specific configuration details including:             - enabled: Service activation status             - timeout: Service timeout configurations  Raises:     HTTPException: 404 Not Found if accessed in production environment.
   * Get Configuration
   */
  getConfigurationApiConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
}
