"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComfyApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var ComfyApi = /** @class */ (function (_super) {
    __extends(ComfyApi, _super);
    function ComfyApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Force a health check.
     * Force Health Check
     */
    ComfyApi.prototype.forceHealthCheckApiComfyHealthForceCheckPostRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/comfy/health/force-check";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Force a health check.
     * Force Health Check
     */
    ComfyApi.prototype.forceHealthCheckApiComfyHealthForceCheckPost = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.forceHealthCheckApiComfyHealthForceCheckPostRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the history for a prompt.
     * Get History
     */
    ComfyApi.prototype.getHistoryApiComfyHistoryPromptIdGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['promptId'] == null) {
                            throw new runtime.RequiredError('promptId', 'Required parameter "promptId" was null or undefined when calling getHistoryApiComfyHistoryPromptIdGet().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/comfy/history/{prompt_id}";
                        urlPath = urlPath.replace("{".concat("prompt_id", "}"), encodeURIComponent(String(requestParameters['promptId'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the history for a prompt.
     * Get History
     */
    ComfyApi.prototype.getHistoryApiComfyHistoryPromptIdGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getHistoryApiComfyHistoryPromptIdGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get ComfyUI object information.
     * Get Object Info
     */
    ComfyApi.prototype.getObjectInfoApiComfyObjectInfoGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['refresh'] != null) {
                            queryParameters['refresh'] = requestParameters['refresh'];
                        }
                        headerParameters = {};
                        urlPath = "/api/comfy/object-info";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get ComfyUI object information.
     * Get Object Info
     */
    ComfyApi.prototype.getObjectInfoApiComfyObjectInfoGet = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getObjectInfoApiComfyObjectInfoGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the status of a queued prompt.
     * Get Status
     */
    ComfyApi.prototype.getStatusApiComfyStatusPromptIdGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['promptId'] == null) {
                            throw new runtime.RequiredError('promptId', 'Required parameter "promptId" was null or undefined when calling getStatusApiComfyStatusPromptIdGet().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/comfy/status/{prompt_id}";
                        urlPath = urlPath.replace("{".concat("prompt_id", "}"), encodeURIComponent(String(requestParameters['promptId'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the status of a queued prompt.
     * Get Status
     */
    ComfyApi.prototype.getStatusApiComfyStatusPromptIdGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getStatusApiComfyStatusPromptIdGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Check ComfyUI service health.
     * Health Check
     */
    ComfyApi.prototype.healthCheckApiComfyHealthGetRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/comfy/health";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Check ComfyUI service health.
     * Health Check
     */
    ComfyApi.prototype.healthCheckApiComfyHealthGet = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.healthCheckApiComfyHealthGetRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Ingest a generated image into the gallery.
     * Ingest Generated Image
     */
    ComfyApi.prototype.ingestGeneratedImageApiComfyIngestPostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['file'] == null) {
                            throw new runtime.RequiredError('file', 'Required parameter "file" was null or undefined when calling ingestGeneratedImageApiComfyIngestPost().');
                        }
                        if (requestParameters['promptId'] == null) {
                            throw new runtime.RequiredError('promptId', 'Required parameter "promptId" was null or undefined when calling ingestGeneratedImageApiComfyIngestPost().');
                        }
                        if (requestParameters['workflow'] == null) {
                            throw new runtime.RequiredError('workflow', 'Required parameter "workflow" was null or undefined when calling ingestGeneratedImageApiComfyIngestPost().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        // use FormData to transmit files using content-type "multipart/form-data"
                        useForm = canConsumeForm;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters['file'] != null) {
                            formParams.append('file', requestParameters['file']);
                        }
                        if (requestParameters['promptId'] != null) {
                            formParams.append('prompt_id', requestParameters['promptId']);
                        }
                        if (requestParameters['workflow'] != null) {
                            formParams.append('workflow', requestParameters['workflow']);
                        }
                        if (requestParameters['metadata'] != null) {
                            formParams.append('metadata', requestParameters['metadata']);
                        }
                        urlPath = "/api/comfy/ingest";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Ingest a generated image into the gallery.
     * Ingest Generated Image
     */
    ComfyApi.prototype.ingestGeneratedImageApiComfyIngestPost = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ingestGeneratedImageApiComfyIngestPostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Queue a ComfyUI workflow for execution.
     * Queue Prompt
     */
    ComfyApi.prototype.queuePromptApiComfyQueuePostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['comfyQueueRequest'] == null) {
                            throw new runtime.RequiredError('comfyQueueRequest', 'Required parameter "comfyQueueRequest" was null or undefined when calling queuePromptApiComfyQueuePost().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/comfy/queue";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ComfyQueueRequestToJSON)(requestParameters['comfyQueueRequest']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Queue a ComfyUI workflow for execution.
     * Queue Prompt
     */
    ComfyApi.prototype.queuePromptApiComfyQueuePost = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.queuePromptApiComfyQueuePostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Stream status updates for a prompt.
     * Stream Status
     */
    ComfyApi.prototype.streamStatusApiComfyStreamPromptIdGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['promptId'] == null) {
                            throw new runtime.RequiredError('promptId', 'Required parameter "promptId" was null or undefined when calling streamStatusApiComfyStreamPromptIdGet().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/comfy/stream/{prompt_id}";
                        urlPath = urlPath.replace("{".concat("prompt_id", "}"), encodeURIComponent(String(requestParameters['promptId'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Stream status updates for a prompt.
     * Stream Status
     */
    ComfyApi.prototype.streamStatusApiComfyStreamPromptIdGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.streamStatusApiComfyStreamPromptIdGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Generate an image from text using a simple workflow.
     * Text2Img
     */
    ComfyApi.prototype.text2imgApiComfyText2imgPostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['comfyText2ImgRequest'] == null) {
                            throw new runtime.RequiredError('comfyText2ImgRequest', 'Required parameter "comfyText2ImgRequest" was null or undefined when calling text2imgApiComfyText2imgPost().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/comfy/text2img";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.ComfyText2ImgRequestToJSON)(requestParameters['comfyText2ImgRequest']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Generate an image from text using a simple workflow.
     * Text2Img
     */
    ComfyApi.prototype.text2imgApiComfyText2imgPost = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.text2imgApiComfyText2imgPostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Validate checkpoint and suggest alternatives.
     * Validate Checkpoint
     */
    ComfyApi.prototype.validateCheckpointApiComfyValidateCheckpointCheckpointGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['checkpoint'] == null) {
                            throw new runtime.RequiredError('checkpoint', 'Required parameter "checkpoint" was null or undefined when calling validateCheckpointApiComfyValidateCheckpointCheckpointGet().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/comfy/validate/checkpoint/{checkpoint}";
                        urlPath = urlPath.replace("{".concat("checkpoint", "}"), encodeURIComponent(String(requestParameters['checkpoint'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Validate checkpoint and suggest alternatives.
     * Validate Checkpoint
     */
    ComfyApi.prototype.validateCheckpointApiComfyValidateCheckpointCheckpointGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateCheckpointApiComfyValidateCheckpointCheckpointGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Validate LoRA and suggest alternatives.
     * Validate Lora
     */
    ComfyApi.prototype.validateLoraApiComfyValidateLoraLoraGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['lora'] == null) {
                            throw new runtime.RequiredError('lora', 'Required parameter "lora" was null or undefined when calling validateLoraApiComfyValidateLoraLoraGet().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/comfy/validate/lora/{lora}";
                        urlPath = urlPath.replace("{".concat("lora", "}"), encodeURIComponent(String(requestParameters['lora'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Validate LoRA and suggest alternatives.
     * Validate Lora
     */
    ComfyApi.prototype.validateLoraApiComfyValidateLoraLoraGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateLoraApiComfyValidateLoraLoraGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Validate sampler and suggest alternatives.
     * Validate Sampler
     */
    ComfyApi.prototype.validateSamplerApiComfyValidateSamplerSamplerGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['sampler'] == null) {
                            throw new runtime.RequiredError('sampler', 'Required parameter "sampler" was null or undefined when calling validateSamplerApiComfyValidateSamplerSamplerGet().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/comfy/validate/sampler/{sampler}";
                        urlPath = urlPath.replace("{".concat("sampler", "}"), encodeURIComponent(String(requestParameters['sampler'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Validate sampler and suggest alternatives.
     * Validate Sampler
     */
    ComfyApi.prototype.validateSamplerApiComfyValidateSamplerSamplerGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateSamplerApiComfyValidateSamplerSamplerGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Validate scheduler and suggest alternatives.
     * Validate Scheduler
     */
    ComfyApi.prototype.validateSchedulerApiComfyValidateSchedulerSchedulerGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['scheduler'] == null) {
                            throw new runtime.RequiredError('scheduler', 'Required parameter "scheduler" was null or undefined when calling validateSchedulerApiComfyValidateSchedulerSchedulerGet().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/comfy/validate/scheduler/{scheduler}";
                        urlPath = urlPath.replace("{".concat("scheduler", "}"), encodeURIComponent(String(requestParameters['scheduler'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Validate scheduler and suggest alternatives.
     * Validate Scheduler
     */
    ComfyApi.prototype.validateSchedulerApiComfyValidateSchedulerSchedulerGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateSchedulerApiComfyValidateSchedulerSchedulerGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * View a generated image.
     * View Image
     */
    ComfyApi.prototype.viewImageApiComfyViewGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['filename'] == null) {
                            throw new runtime.RequiredError('filename', 'Required parameter "filename" was null or undefined when calling viewImageApiComfyViewGet().');
                        }
                        queryParameters = {};
                        if (requestParameters['filename'] != null) {
                            queryParameters['filename'] = requestParameters['filename'];
                        }
                        if (requestParameters['subfolder'] != null) {
                            queryParameters['subfolder'] = requestParameters['subfolder'];
                        }
                        if (requestParameters['type'] != null) {
                            queryParameters['type'] = requestParameters['type'];
                        }
                        headerParameters = {};
                        urlPath = "/api/comfy/view";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * View a generated image.
     * View Image
     */
    ComfyApi.prototype.viewImageApiComfyViewGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.viewImageApiComfyViewGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ComfyApi;
}(runtime.BaseAPI));
exports.ComfyApi = ComfyApi;
