"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TtsApi = void 0;
var runtime = require("../runtime");
var index_1 = require("../models/index");
/**
 *
 */
var TtsApi = /** @class */ (function (_super) {
    __extends(TtsApi, _super);
    function TtsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    TtsApi.prototype.cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/tts/api/tts/admin/cleanup";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    TtsApi.prototype.cleanupAudioFilesApiTtsApiTtsAdminCleanupPost = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get generated audio file.
     * Get Audio File
     */
    TtsApi.prototype.getAudioFileApiTtsApiTtsAudioFilenameGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['filename'] == null) {
                            throw new runtime.RequiredError('filename', 'Required parameter "filename" was null or undefined when calling getAudioFileApiTtsApiTtsAudioFilenameGet().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/tts/api/tts/audio/{filename}";
                        urlPath = urlPath.replace("{".concat("filename", "}"), encodeURIComponent(String(requestParameters['filename'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get generated audio file.
     * Get Audio File
     */
    TtsApi.prototype.getAudioFileApiTtsApiTtsAudioFilenameGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAudioFileApiTtsApiTtsAudioFilenameGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get generated audio file.
     * Get Audio File
     */
    TtsApi.prototype.getAudioFileApiTtsApiTtsAudioFilenameGet_1Raw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['filename'] == null) {
                            throw new runtime.RequiredError('filename', 'Required parameter "filename" was null or undefined when calling getAudioFileApiTtsApiTtsAudioFilenameGet_1().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/tts/api/tts/audio/{filename}";
                        urlPath = urlPath.replace("{".concat("filename", "}"), encodeURIComponent(String(requestParameters['filename'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get generated audio file.
     * Get Audio File
     */
    TtsApi.prototype.getAudioFileApiTtsApiTtsAudioFilenameGet_1 = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAudioFileApiTtsApiTtsAudioFilenameGet_1Raw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    TtsApi.prototype.getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/tts/api/tts/admin/backends";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    TtsApi.prototype.getAvailableBackendsApiTtsApiTtsAdminBackendsGet = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    TtsApi.prototype.getTtsConfigApiTtsApiTtsConfigGetRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/tts/api/tts/config";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.TTSConfigResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    TtsApi.prototype.getTtsConfigApiTtsApiTtsConfigGet = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTtsConfigApiTtsApiTtsConfigGetRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    TtsApi.prototype.getTtsConfigApiTtsApiTtsConfigGet_2Raw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/tts/api/tts/config";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.TTSConfigResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    TtsApi.prototype.getTtsConfigApiTtsApiTtsConfigGet_2 = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTtsConfigApiTtsApiTtsConfigGet_2Raw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    TtsApi.prototype.getTtsStatsApiTtsApiTtsAdminStatsGetRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/tts/api/tts/admin/stats";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.TTSStatsResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    TtsApi.prototype.getTtsStatsApiTtsApiTtsAdminStatsGet = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Perform TTS service health check.
     * Health Check
     */
    TtsApi.prototype.healthCheckApiTtsApiTtsAdminHealthGetRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/tts/api/tts/admin/health";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Perform TTS service health check.
     * Health Check
     */
    TtsApi.prototype.healthCheckApiTtsApiTtsAdminHealthGet = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    TtsApi.prototype.reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['backendName'] == null) {
                            throw new runtime.RequiredError('backendName', 'Required parameter "backendName" was null or undefined when calling reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        urlPath = "/api/tts/api/tts/admin/backends/{backend_name}/reload";
                        urlPath = urlPath.replace("{".concat("backend_name", "}"), encodeURIComponent(String(requestParameters['backendName'])));
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    TtsApi.prototype.reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    TtsApi.prototype.synthesizeBatchApiTtsApiTtsSynthesizeBatchPostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tTSBatchRequest'] == null) {
                            throw new runtime.RequiredError('tTSBatchRequest', 'Required parameter "tTSBatchRequest" was null or undefined when calling synthesizeBatchApiTtsApiTtsSynthesizeBatchPost().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/tts/api/tts/synthesize/batch";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.TTSBatchRequestToJSON)(requestParameters['tTSBatchRequest']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.TTSBatchResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    TtsApi.prototype.synthesizeBatchApiTtsApiTtsSynthesizeBatchPost = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.synthesizeBatchApiTtsApiTtsSynthesizeBatchPostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    TtsApi.prototype.synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3Raw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tTSBatchRequest'] == null) {
                            throw new runtime.RequiredError('tTSBatchRequest', 'Required parameter "tTSBatchRequest" was null or undefined when calling synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/tts/api/tts/synthesize/batch";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.TTSBatchRequestToJSON)(requestParameters['tTSBatchRequest']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.TTSBatchResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    TtsApi.prototype.synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3 = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3Raw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    TtsApi.prototype.synthesizeTextApiTtsApiTtsSynthesizePostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tTSSynthesisRequest'] == null) {
                            throw new runtime.RequiredError('tTSSynthesisRequest', 'Required parameter "tTSSynthesisRequest" was null or undefined when calling synthesizeTextApiTtsApiTtsSynthesizePost().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/tts/api/tts/synthesize";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.TTSSynthesisRequestToJSON)(requestParameters['tTSSynthesisRequest']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.TTSSynthesisResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    TtsApi.prototype.synthesizeTextApiTtsApiTtsSynthesizePost = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.synthesizeTextApiTtsApiTtsSynthesizePostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    TtsApi.prototype.synthesizeTextApiTtsApiTtsSynthesizePost_4Raw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tTSSynthesisRequest'] == null) {
                            throw new runtime.RequiredError('tTSSynthesisRequest', 'Required parameter "tTSSynthesisRequest" was null or undefined when calling synthesizeTextApiTtsApiTtsSynthesizePost_4().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/tts/api/tts/synthesize";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.TTSSynthesisRequestToJSON)(requestParameters['tTSSynthesisRequest']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.TTSSynthesisResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    TtsApi.prototype.synthesizeTextApiTtsApiTtsSynthesizePost_4 = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.synthesizeTextApiTtsApiTtsSynthesizePost_4Raw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    TtsApi.prototype.synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['text'] == null) {
                            throw new runtime.RequiredError('text', 'Required parameter "text" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost().');
                        }
                        if (requestParameters['referenceAudio'] == null) {
                            throw new runtime.RequiredError('referenceAudio', 'Required parameter "referenceAudio" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        // use FormData to transmit files using content-type "multipart/form-data"
                        useForm = canConsumeForm;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters['text'] != null) {
                            formParams.append('text', requestParameters['text']);
                        }
                        if (requestParameters['referenceAudio'] != null) {
                            formParams.append('reference_audio', requestParameters['referenceAudio']);
                        }
                        if (requestParameters['speed'] != null) {
                            formParams.append('speed', requestParameters['speed']);
                        }
                        if (requestParameters['lang'] != null) {
                            formParams.append('lang', requestParameters['lang']);
                        }
                        urlPath = "/api/tts/api/tts/voice-clone";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    TtsApi.prototype.synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    TtsApi.prototype.synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5Raw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['text'] == null) {
                            throw new runtime.RequiredError('text', 'Required parameter "text" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5().');
                        }
                        if (requestParameters['referenceAudio'] == null) {
                            throw new runtime.RequiredError('referenceAudio', 'Required parameter "referenceAudio" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        // use FormData to transmit files using content-type "multipart/form-data"
                        useForm = canConsumeForm;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters['text'] != null) {
                            formParams.append('text', requestParameters['text']);
                        }
                        if (requestParameters['referenceAudio'] != null) {
                            formParams.append('reference_audio', requestParameters['referenceAudio']);
                        }
                        if (requestParameters['speed'] != null) {
                            formParams.append('speed', requestParameters['speed']);
                        }
                        if (requestParameters['lang'] != null) {
                            formParams.append('lang', requestParameters['lang']);
                        }
                        urlPath = "/api/tts/api/tts/voice-clone";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    TtsApi.prototype.synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5 = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5Raw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    TtsApi.prototype.updateTtsConfigApiTtsApiTtsConfigPostRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tTSConfigRequest'] == null) {
                            throw new runtime.RequiredError('tTSConfigRequest', 'Required parameter "tTSConfigRequest" was null or undefined when calling updateTtsConfigApiTtsApiTtsConfigPost().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/tts/api/tts/config";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.TTSConfigRequestToJSON)(requestParameters['tTSConfigRequest']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.TTSConfigResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    TtsApi.prototype.updateTtsConfigApiTtsApiTtsConfigPost = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateTtsConfigApiTtsApiTtsConfigPostRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    TtsApi.prototype.updateTtsConfigApiTtsApiTtsConfigPost_6Raw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, urlPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters['tTSConfigRequest'] == null) {
                            throw new runtime.RequiredError('tTSConfigRequest', 'Required parameter "tTSConfigRequest" was null or undefined when calling updateTtsConfigApiTtsApiTtsConfigPost_6().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        urlPath = "/api/tts/api/tts/config";
                        return [4 /*yield*/, this.request({
                                path: urlPath,
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: (0, index_1.TTSConfigRequestToJSON)(requestParameters['tTSConfigRequest']),
                            }, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.TTSConfigResponseFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    TtsApi.prototype.updateTtsConfigApiTtsApiTtsConfigPost_6 = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateTtsConfigApiTtsApiTtsConfigPost_6Raw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return TtsApi;
}(runtime.BaseAPI));
exports.TtsApi = TtsApi;
