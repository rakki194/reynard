/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import type {
  RAGConfigRequest,
  RAGConfigResponse,
  RAGIndexingStatusResponse,
  RAGIngestRequest,
  RAGIngestResponse,
  RAGQueryRequest,
  RAGQueryResponse,
  RAGStatsResponse,
} from "../models/index";
export interface IngestDocumentsApiRagIngestPostRequest {
  rAGIngestRequest: RAGIngestRequest;
}
export interface IngestDocumentsApiRagIngestPost0Request {
  rAGIngestRequest: RAGIngestRequest;
}
export interface IngestDocumentsStreamApiRagIngestStreamPostRequest {
  rAGIngestRequest: RAGIngestRequest;
}
export interface IngestDocumentsStreamApiRagIngestStreamPost0Request {
  rAGIngestRequest: RAGIngestRequest;
}
export interface QueryRagApiRagQueryPostRequest {
  rAGQueryRequest: RAGQueryRequest;
}
export interface QueryRagApiRagQueryPost0Request {
  rAGQueryRequest: RAGQueryRequest;
}
export interface UpdateRagConfigApiRagConfigPostRequest {
  rAGConfigRequest: RAGConfigRequest;
}
export interface UpdateRagConfigApiRagConfigPost0Request {
  rAGConfigRequest: RAGConfigRequest;
}
/**
 * RagApi - interface
 *
 * @export
 * @interface RagApiInterface
 */
export interface RagApiInterface {
  /**
   * Clear the RAG system cache.
   * @summary Clear Cache
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  clearCacheApiRagAdminClearCachePostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  clearCacheApiRagAdminClearCachePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Clear the RAG system cache.
   * @summary Clear Cache
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  clearCacheApiRagAdminClearCachePost_1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  clearCacheApiRagAdminClearCachePost_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Get codebase indexing statistics.
   * @summary Get Codebase Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getCodebaseStatsApiRagApiRagCodebaseStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;
  /**
   * Get codebase indexing statistics.
   * Get Codebase Stats
   */
  getCodebaseStatsApiRagApiRagCodebaseStatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;
  /**
   * Get current indexing status.
   * @summary Get Indexing Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getIndexingStatusApiRagAdminIndexingStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;
  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  getIndexingStatusApiRagAdminIndexingStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse>;
  /**
   * Get current indexing status.
   * @summary Get Indexing Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getIndexingStatusApiRagAdminIndexingStatusGet_2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;
  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  getIndexingStatusApiRagAdminIndexingStatusGet_2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse>;
  /**
   * Get current RAG configuration.
   * @summary Get Rag Config
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagConfigApiRagConfigGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;
  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  getRagConfigApiRagConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
  /**
   * Get current RAG configuration.
   * @summary Get Rag Config
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagConfigApiRagConfigGet_3Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;
  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  getRagConfigApiRagConfigGet_3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
  /**
   * Get RAG system statistics.
   * @summary Get Rag Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagStatsApiRagAdminStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>>;
  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  getRagStatsApiRagAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGStatsResponse>;
  /**
   * Get RAG system statistics.
   * @summary Get Rag Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagStatsApiRagAdminStatsGet_4Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>>;
  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  getRagStatsApiRagAdminStatsGet_4(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGStatsResponse>;
  /**
   * Check codebase indexer health.
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  healthCheckApiRagApiRagCodebaseHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;
  /**
   * Check codebase indexer health.
   * Health Check
   */
  healthCheckApiRagApiRagCodebaseHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
  /**
   * Index the Reynard codebase for semantic search.
   * @summary Index Codebase
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  indexCodebaseApiRagApiRagCodebaseIndexPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Index the Reynard codebase for semantic search.
   * Index Codebase
   */
  indexCodebaseApiRagApiRagCodebaseIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Ingest documents into the RAG system.
   * @summary Ingest Documents
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsApiRagIngestPostRaw(
    requestParameters: IngestDocumentsApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>>;
  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  ingestDocumentsApiRagIngestPost(
    requestParameters: IngestDocumentsApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse>;
  /**
   * Ingest documents into the RAG system.
   * @summary Ingest Documents
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsApiRagIngestPost_5Raw(
    requestParameters: IngestDocumentsApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>>;
  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  ingestDocumentsApiRagIngestPost_5(
    requestParameters: IngestDocumentsApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse>;
  /**
   * Stream document ingestion progress.
   * @summary Ingest Documents Stream
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsStreamApiRagIngestStreamPostRaw(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  ingestDocumentsStreamApiRagIngestStreamPost(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;
  /**
   * Stream document ingestion progress.
   * @summary Ingest Documents Stream
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsStreamApiRagIngestStreamPost_6Raw(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  ingestDocumentsStreamApiRagIngestStreamPost_6(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;
  /**
   * Perform semantic search using RAG system.
   * @summary Query Rag
   * @param {RAGQueryRequest} rAGQueryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  queryRagApiRagQueryPostRaw(
    requestParameters: QueryRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>>;
  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  queryRagApiRagQueryPost(
    requestParameters: QueryRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse>;
  /**
   * Perform semantic search using RAG system.
   * @summary Query Rag
   * @param {RAGQueryRequest} rAGQueryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  queryRagApiRagQueryPost_7Raw(
    requestParameters: QueryRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>>;
  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  queryRagApiRagQueryPost_7(
    requestParameters: QueryRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse>;
  /**
   * Rebuild the vector index.
   * @summary Rebuild Index
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  rebuildIndexApiRagAdminRebuildIndexPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  rebuildIndexApiRagAdminRebuildIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Rebuild the vector index.
   * @summary Rebuild Index
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  rebuildIndexApiRagAdminRebuildIndexPost_8Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  rebuildIndexApiRagAdminRebuildIndexPost_8(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Scan the codebase and return file information.
   * @summary Scan Codebase
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  scanCodebaseApiRagApiRagCodebaseScanPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Scan the codebase and return file information.
   * Scan Codebase
   */
  scanCodebaseApiRagApiRagCodebaseScanPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Update RAG configuration.
   * @summary Update Rag Config
   * @param {RAGConfigRequest} rAGConfigRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  updateRagConfigApiRagConfigPostRaw(
    requestParameters: UpdateRagConfigApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;
  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  updateRagConfigApiRagConfigPost(
    requestParameters: UpdateRagConfigApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse>;
  /**
   * Update RAG configuration.
   * @summary Update Rag Config
   * @param {RAGConfigRequest} rAGConfigRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  updateRagConfigApiRagConfigPost_9Raw(
    requestParameters: UpdateRagConfigApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;
  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  updateRagConfigApiRagConfigPost_9(
    requestParameters: UpdateRagConfigApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse>;
}
/**
 *
 */
export declare class RagApi extends runtime.BaseAPI implements RagApiInterface {
  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  clearCacheApiRagAdminClearCachePostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  clearCacheApiRagAdminClearCachePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  clearCacheApiRagAdminClearCachePost_1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  clearCacheApiRagAdminClearCachePost_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Get codebase indexing statistics.
   * Get Codebase Stats
   */
  getCodebaseStatsApiRagApiRagCodebaseStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;
  /**
   * Get codebase indexing statistics.
   * Get Codebase Stats
   */
  getCodebaseStatsApiRagApiRagCodebaseStatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;
  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  getIndexingStatusApiRagAdminIndexingStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;
  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  getIndexingStatusApiRagAdminIndexingStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse>;
  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  getIndexingStatusApiRagAdminIndexingStatusGet_2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;
  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  getIndexingStatusApiRagAdminIndexingStatusGet_2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse>;
  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  getRagConfigApiRagConfigGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;
  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  getRagConfigApiRagConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  getRagConfigApiRagConfigGet_3Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;
  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  getRagConfigApiRagConfigGet_3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  getRagStatsApiRagAdminStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>>;
  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  getRagStatsApiRagAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGStatsResponse>;
  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  getRagStatsApiRagAdminStatsGet_4Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>>;
  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  getRagStatsApiRagAdminStatsGet_4(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGStatsResponse>;
  /**
   * Check codebase indexer health.
   * Health Check
   */
  healthCheckApiRagApiRagCodebaseHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;
  /**
   * Check codebase indexer health.
   * Health Check
   */
  healthCheckApiRagApiRagCodebaseHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
  /**
   * Index the Reynard codebase for semantic search.
   * Index Codebase
   */
  indexCodebaseApiRagApiRagCodebaseIndexPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Index the Reynard codebase for semantic search.
   * Index Codebase
   */
  indexCodebaseApiRagApiRagCodebaseIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  ingestDocumentsApiRagIngestPostRaw(
    requestParameters: IngestDocumentsApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>>;
  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  ingestDocumentsApiRagIngestPost(
    requestParameters: IngestDocumentsApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse>;
  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  ingestDocumentsApiRagIngestPost_5Raw(
    requestParameters: IngestDocumentsApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>>;
  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  ingestDocumentsApiRagIngestPost_5(
    requestParameters: IngestDocumentsApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse>;
  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  ingestDocumentsStreamApiRagIngestStreamPostRaw(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  ingestDocumentsStreamApiRagIngestStreamPost(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;
  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  ingestDocumentsStreamApiRagIngestStreamPost_6Raw(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  ingestDocumentsStreamApiRagIngestStreamPost_6(
    requestParameters: IngestDocumentsStreamApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;
  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  queryRagApiRagQueryPostRaw(
    requestParameters: QueryRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>>;
  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  queryRagApiRagQueryPost(
    requestParameters: QueryRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse>;
  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  queryRagApiRagQueryPost_7Raw(
    requestParameters: QueryRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>>;
  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  queryRagApiRagQueryPost_7(
    requestParameters: QueryRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse>;
  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  rebuildIndexApiRagAdminRebuildIndexPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  rebuildIndexApiRagAdminRebuildIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  rebuildIndexApiRagAdminRebuildIndexPost_8Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  rebuildIndexApiRagAdminRebuildIndexPost_8(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Scan the codebase and return file information.
   * Scan Codebase
   */
  scanCodebaseApiRagApiRagCodebaseScanPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;
  /**
   * Scan the codebase and return file information.
   * Scan Codebase
   */
  scanCodebaseApiRagApiRagCodebaseScanPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  updateRagConfigApiRagConfigPostRaw(
    requestParameters: UpdateRagConfigApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;
  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  updateRagConfigApiRagConfigPost(
    requestParameters: UpdateRagConfigApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse>;
  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  updateRagConfigApiRagConfigPost_9Raw(
    requestParameters: UpdateRagConfigApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;
  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  updateRagConfigApiRagConfigPost_9(
    requestParameters: UpdateRagConfigApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse>;
}
