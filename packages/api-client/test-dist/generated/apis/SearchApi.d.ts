/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { HybridSearchRequest, IndexRequest, SearchRequest, SemanticSearchRequest, SyntaxSearchRequest } from '../models/index';
export interface GetQuerySuggestionsApiSearchSuggestionsGetRequest {
    query: string;
    maxSuggestions?: number;
}
export interface HybridSearchApiSearchHybridPostRequest {
    hybridSearchRequest: HybridSearchRequest;
}
export interface IndexCodebaseApiSearchIndexPostRequest {
    indexRequest: IndexRequest;
}
export interface SemanticSearchApiSearchSemanticPostRequest {
    semanticSearchRequest: SemanticSearchRequest;
}
export interface SmartSearchApiSearchSearchPostRequest {
    searchRequest: SearchRequest;
}
export interface SyntaxSearchApiSearchSyntaxPostRequest {
    syntaxSearchRequest: SyntaxSearchRequest;
}
/**
 * SearchApi - interface
 *
 * @export
 * @interface SearchApiInterface
 */
export interface SearchApiInterface {
    /**
     * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
     * @summary Get Query Suggestions
     * @param {string} query Query to get suggestions for
     * @param {number} [maxSuggestions] Maximum suggestions to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    getQuerySuggestionsApiSearchSuggestionsGetRaw(requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
     * Get Query Suggestions
     */
    getQuerySuggestionsApiSearchSuggestionsGet(requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
     * @summary Get Search Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    getSearchStatsApiSearchStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
     * Get Search Stats
     */
    getSearchStatsApiSearchStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    healthCheckApiSearchHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: string | null;
    }>>;
    /**
     * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
     * Health Check
     */
    healthCheckApiSearchHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: string | null;
    }>;
    /**
     * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
     * @summary Hybrid Search
     * @param {HybridSearchRequest} hybridSearchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    hybridSearchApiSearchHybridPostRaw(requestParameters: HybridSearchApiSearchHybridPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
     * Hybrid Search
     */
    hybridSearchApiSearchHybridPost(requestParameters: HybridSearchApiSearchHybridPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
     * @summary Index Codebase
     * @param {IndexRequest} indexRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    indexCodebaseApiSearchIndexPostRaw(requestParameters: IndexCodebaseApiSearchIndexPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
     * Index Codebase
     */
    indexCodebaseApiSearchIndexPost(requestParameters: IndexCodebaseApiSearchIndexPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
     * @summary Semantic Search
     * @param {SemanticSearchRequest} semanticSearchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    semanticSearchApiSearchSemanticPostRaw(requestParameters: SemanticSearchApiSearchSemanticPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
     * Semantic Search
     */
    semanticSearchApiSearchSemanticPost(requestParameters: SemanticSearchApiSearchSemanticPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
     * @summary Smart Search
     * @param {SearchRequest} searchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    smartSearchApiSearchSearchPostRaw(requestParameters: SmartSearchApiSearchSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
     * Smart Search
     */
    smartSearchApiSearchSearchPost(requestParameters: SmartSearchApiSearchSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
     * @summary Syntax Search
     * @param {SyntaxSearchRequest} syntaxSearchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    syntaxSearchApiSearchSyntaxPostRaw(requestParameters: SyntaxSearchApiSearchSyntaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
     * Syntax Search
     */
    syntaxSearchApiSearchSyntaxPost(requestParameters: SyntaxSearchApiSearchSyntaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
}
/**
 *
 */
export declare class SearchApi extends runtime.BaseAPI implements SearchApiInterface {
    /**
     * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
     * Get Query Suggestions
     */
    getQuerySuggestionsApiSearchSuggestionsGetRaw(requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
     * Get Query Suggestions
     */
    getQuerySuggestionsApiSearchSuggestionsGet(requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
     * Get Search Stats
     */
    getSearchStatsApiSearchStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
     * Get Search Stats
     */
    getSearchStatsApiSearchStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
     * Health Check
     */
    healthCheckApiSearchHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: string | null;
    }>>;
    /**
     * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
     * Health Check
     */
    healthCheckApiSearchHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: string | null;
    }>;
    /**
     * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
     * Hybrid Search
     */
    hybridSearchApiSearchHybridPostRaw(requestParameters: HybridSearchApiSearchHybridPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
     * Hybrid Search
     */
    hybridSearchApiSearchHybridPost(requestParameters: HybridSearchApiSearchHybridPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
     * Index Codebase
     */
    indexCodebaseApiSearchIndexPostRaw(requestParameters: IndexCodebaseApiSearchIndexPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
     * Index Codebase
     */
    indexCodebaseApiSearchIndexPost(requestParameters: IndexCodebaseApiSearchIndexPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
     * Semantic Search
     */
    semanticSearchApiSearchSemanticPostRaw(requestParameters: SemanticSearchApiSearchSemanticPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
     * Semantic Search
     */
    semanticSearchApiSearchSemanticPost(requestParameters: SemanticSearchApiSearchSemanticPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
     * Smart Search
     */
    smartSearchApiSearchSearchPostRaw(requestParameters: SmartSearchApiSearchSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
     * Smart Search
     */
    smartSearchApiSearchSearchPost(requestParameters: SmartSearchApiSearchSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
     * Syntax Search
     */
    syntaxSearchApiSearchSyntaxPostRaw(requestParameters: SyntaxSearchApiSearchSyntaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
     * Syntax Search
     */
    syntaxSearchApiSearchSyntaxPost(requestParameters: SyntaxSearchApiSearchSyntaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
}
