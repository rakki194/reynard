"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfToolConfigListResponse = instanceOfToolConfigListResponse;
exports.ToolConfigListResponseFromJSON = ToolConfigListResponseFromJSON;
exports.ToolConfigListResponseFromJSONTyped = ToolConfigListResponseFromJSONTyped;
exports.ToolConfigListResponseToJSON = ToolConfigListResponseToJSON;
exports.ToolConfigListResponseToJSONTyped = ToolConfigListResponseToJSONTyped;
var runtime_1 = require("../runtime");
var ToolConfigResponse_1 = require("./ToolConfigResponse");
/**
 * Check if a given object implements the ToolConfigListResponse interface.
 */
function instanceOfToolConfigListResponse(value) {
    if (!('tools' in value) || value['tools'] === undefined)
        return false;
    if (!('totalTools' in value) || value['totalTools'] === undefined)
        return false;
    if (!('enabledTools' in value) || value['enabledTools'] === undefined)
        return false;
    if (!('disabledTools' in value) || value['disabledTools'] === undefined)
        return false;
    return true;
}
function ToolConfigListResponseFromJSON(json) {
    return ToolConfigListResponseFromJSONTyped(json, false);
}
function ToolConfigListResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'tools': ((0, runtime_1.mapValues)(json['tools'], ToolConfigResponse_1.ToolConfigResponseFromJSON)),
        'totalTools': json['total_tools'],
        'enabledTools': json['enabled_tools'],
        'disabledTools': json['disabled_tools'],
    };
}
function ToolConfigListResponseToJSON(json) {
    return ToolConfigListResponseToJSONTyped(json, false);
}
function ToolConfigListResponseToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'tools': ((0, runtime_1.mapValues)(value['tools'], ToolConfigResponse_1.ToolConfigResponseToJSON)),
        'total_tools': value['totalTools'],
        'enabled_tools': value['enabledTools'],
        'disabled_tools': value['disabledTools'],
    };
}
