"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfBatchCaptionRequest = instanceOfBatchCaptionRequest;
exports.BatchCaptionRequestFromJSON = BatchCaptionRequestFromJSON;
exports.BatchCaptionRequestFromJSONTyped = BatchCaptionRequestFromJSONTyped;
exports.BatchCaptionRequestToJSON = BatchCaptionRequestToJSON;
exports.BatchCaptionRequestToJSONTyped = BatchCaptionRequestToJSONTyped;
var CaptionRequest_1 = require("./CaptionRequest");
/**
 * Check if a given object implements the BatchCaptionRequest interface.
 */
function instanceOfBatchCaptionRequest(value) {
  if (!("tasks" in value) || value["tasks"] === undefined) return false;
  return true;
}
function BatchCaptionRequestFromJSON(json) {
  return BatchCaptionRequestFromJSONTyped(json, false);
}
function BatchCaptionRequestFromJSONTyped(json, ignoreDiscriminator) {
  if (json == null) {
    return json;
  }
  return {
    tasks: json["tasks"].map(CaptionRequest_1.CaptionRequestFromJSON),
    maxConcurrent: json["max_concurrent"] == null ? undefined : json["max_concurrent"],
  };
}
function BatchCaptionRequestToJSON(json) {
  return BatchCaptionRequestToJSONTyped(json, false);
}
function BatchCaptionRequestToJSONTyped(value, ignoreDiscriminator) {
  if (ignoreDiscriminator === void 0) {
    ignoreDiscriminator = false;
  }
  if (value == null) {
    return value;
  }
  return {
    tasks: value["tasks"].map(CaptionRequest_1.CaptionRequestToJSON),
    max_concurrent: value["maxConcurrent"],
  };
}
