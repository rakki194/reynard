"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfSemanticSearchRequest = instanceOfSemanticSearchRequest;
exports.SemanticSearchRequestFromJSON = SemanticSearchRequestFromJSON;
exports.SemanticSearchRequestFromJSONTyped = SemanticSearchRequestFromJSONTyped;
exports.SemanticSearchRequestToJSON = SemanticSearchRequestToJSON;
exports.SemanticSearchRequestToJSONTyped = SemanticSearchRequestToJSONTyped;
/**
 * Check if a given object implements the SemanticSearchRequest interface.
 */
function instanceOfSemanticSearchRequest(value) {
    if (!('query' in value) || value['query'] === undefined)
        return false;
    return true;
}
function SemanticSearchRequestFromJSON(json) {
    return SemanticSearchRequestFromJSONTyped(json, false);
}
function SemanticSearchRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'query': json['query'],
        'maxResults': json['max_results'] == null ? undefined : json['max_results'],
        'fileTypes': json['file_types'] == null ? undefined : json['file_types'],
        'directories': json['directories'] == null ? undefined : json['directories'],
        'caseSensitive': json['case_sensitive'] == null ? undefined : json['case_sensitive'],
        'wholeWord': json['whole_word'] == null ? undefined : json['whole_word'],
        'contextLines': json['context_lines'] == null ? undefined : json['context_lines'],
        'similarityThreshold': json['similarity_threshold'] == null ? undefined : json['similarity_threshold'],
        'model': json['model'] == null ? undefined : json['model'],
        'searchType': json['search_type'] == null ? undefined : json['search_type'],
    };
}
function SemanticSearchRequestToJSON(json) {
    return SemanticSearchRequestToJSONTyped(json, false);
}
function SemanticSearchRequestToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'query': value['query'],
        'max_results': value['maxResults'],
        'file_types': value['fileTypes'],
        'directories': value['directories'],
        'case_sensitive': value['caseSensitive'],
        'whole_word': value['wholeWord'],
        'context_lines': value['contextLines'],
        'similarity_threshold': value['similarityThreshold'],
        'model': value['model'],
        'search_type': value['searchType'],
    };
}
