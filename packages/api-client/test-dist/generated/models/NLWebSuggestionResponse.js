"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfNLWebSuggestionResponse = instanceOfNLWebSuggestionResponse;
exports.NLWebSuggestionResponseFromJSON = NLWebSuggestionResponseFromJSON;
exports.NLWebSuggestionResponseFromJSONTyped = NLWebSuggestionResponseFromJSONTyped;
exports.NLWebSuggestionResponseToJSON = NLWebSuggestionResponseToJSON;
exports.NLWebSuggestionResponseToJSONTyped = NLWebSuggestionResponseToJSONTyped;
var NLWebSuggestion_1 = require("./NLWebSuggestion");
/**
 * Check if a given object implements the NLWebSuggestionResponse interface.
 */
function instanceOfNLWebSuggestionResponse(value) {
    if (!('suggestions' in value) || value['suggestions'] === undefined)
        return false;
    if (!('query' in value) || value['query'] === undefined)
        return false;
    if (!('processingTimeMs' in value) || value['processingTimeMs'] === undefined)
        return false;
    if (!('totalToolsConsidered' in value) || value['totalToolsConsidered'] === undefined)
        return false;
    return true;
}
function NLWebSuggestionResponseFromJSON(json) {
    return NLWebSuggestionResponseFromJSONTyped(json, false);
}
function NLWebSuggestionResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'suggestions': (json['suggestions'].map(NLWebSuggestion_1.NLWebSuggestionFromJSON)),
        'query': json['query'],
        'processingTimeMs': json['processing_time_ms'],
        'cacheHit': json['cache_hit'] == null ? undefined : json['cache_hit'],
        'totalToolsConsidered': json['total_tools_considered'],
    };
}
function NLWebSuggestionResponseToJSON(json) {
    return NLWebSuggestionResponseToJSONTyped(json, false);
}
function NLWebSuggestionResponseToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'suggestions': (value['suggestions'].map(NLWebSuggestion_1.NLWebSuggestionToJSON)),
        'query': value['query'],
        'processing_time_ms': value['processingTimeMs'],
        'cache_hit': value['cacheHit'],
        'total_tools_considered': value['totalToolsConsidered'],
    };
}
