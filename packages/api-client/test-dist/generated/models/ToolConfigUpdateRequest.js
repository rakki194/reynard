"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfToolConfigUpdateRequest = instanceOfToolConfigUpdateRequest;
exports.ToolConfigUpdateRequestFromJSON = ToolConfigUpdateRequestFromJSON;
exports.ToolConfigUpdateRequestFromJSONTyped = ToolConfigUpdateRequestFromJSONTyped;
exports.ToolConfigUpdateRequestToJSON = ToolConfigUpdateRequestToJSON;
exports.ToolConfigUpdateRequestToJSONTyped = ToolConfigUpdateRequestToJSONTyped;
/**
 * Check if a given object implements the ToolConfigUpdateRequest interface.
 */
function instanceOfToolConfigUpdateRequest(value) {
    if (!('toolName' in value) || value['toolName'] === undefined)
        return false;
    return true;
}
function ToolConfigUpdateRequestFromJSON(json) {
    return ToolConfigUpdateRequestFromJSONTyped(json, false);
}
function ToolConfigUpdateRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'toolName': json['tool_name'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'config': json['config'] == null ? undefined : json['config'],
    };
}
function ToolConfigUpdateRequestToJSON(json) {
    return ToolConfigUpdateRequestToJSONTyped(json, false);
}
function ToolConfigUpdateRequestToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'tool_name': value['toolName'],
        'enabled': value['enabled'],
        'config': value['config'],
    };
}
