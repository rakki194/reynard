/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { TTSStatsResponseFromJSON, } from "../models/index";
/**
 *
 */
export class TtsAdminApi extends runtime.BaseAPI {
    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    async cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/admin/cleanup`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    async cleanupAudioFilesApiTtsApiTtsAdminCleanupPost(initOverrides) {
        const response = await this.cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    async getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/admin/backends`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    async getAvailableBackendsApiTtsApiTtsAdminBackendsGet(initOverrides) {
        const response = await this.getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    async getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/admin/stats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TTSStatsResponseFromJSON(jsonValue));
    }
    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    async getTtsStatsApiTtsApiTtsAdminStatsGet(initOverrides) {
        const response = await this.getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Perform TTS service health check.
     * Health Check
     */
    async healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/admin/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Perform TTS service health check.
     * Health Check
     */
    async healthCheckApiTtsApiTtsAdminHealthGet(initOverrides) {
        const response = await this.healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    async reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw(requestParameters, initOverrides) {
        if (requestParameters["backendName"] == null) {
            throw new runtime.RequiredError("backendName", 'Required parameter "backendName" was null or undefined when calling reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/admin/backends/{backend_name}/reload`;
        urlPath = urlPath.replace(`{${"backend_name"}}`, encodeURIComponent(String(requestParameters["backendName"])));
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    async reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost(requestParameters, initOverrides) {
        const response = await this.reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
