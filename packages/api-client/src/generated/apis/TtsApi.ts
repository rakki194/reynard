/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  TTSBatchRequest,
  TTSBatchResponse,
  TTSConfigRequest,
  TTSConfigResponse,
  TTSStatsResponse,
  TTSSynthesisRequest,
  TTSSynthesisResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TTSBatchRequestFromJSON,
    TTSBatchRequestToJSON,
    TTSBatchResponseFromJSON,
    TTSBatchResponseToJSON,
    TTSConfigRequestFromJSON,
    TTSConfigRequestToJSON,
    TTSConfigResponseFromJSON,
    TTSConfigResponseToJSON,
    TTSStatsResponseFromJSON,
    TTSStatsResponseToJSON,
    TTSSynthesisRequestFromJSON,
    TTSSynthesisRequestToJSON,
    TTSSynthesisResponseFromJSON,
    TTSSynthesisResponseToJSON,
} from '../models/index';

export interface GetAudioFileApiTtsApiTtsAudioFilenameGetRequest {
    filename: string;
}

export interface GetAudioFileApiTtsApiTtsAudioFilenameGet0Request {
    filename: string;
}

// Removed duplicate interface - defined in TtsAdminApi

export interface SynthesizeBatchApiTtsApiTtsSynthesizeBatchPostRequest {
    tTSBatchRequest: TTSBatchRequest;
}

export interface SynthesizeBatchApiTtsApiTtsSynthesizeBatchPost0Request {
    tTSBatchRequest: TTSBatchRequest;
}

export interface SynthesizeTextApiTtsApiTtsSynthesizePostRequest {
    tTSSynthesisRequest: TTSSynthesisRequest;
}

export interface SynthesizeTextApiTtsApiTtsSynthesizePost0Request {
    tTSSynthesisRequest: TTSSynthesisRequest;
}

export interface SynthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRequest {
    text: string;
    referenceAudio: Blob;
    speed?: number;
    lang?: string;
}

export interface SynthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost0Request {
    text: string;
    referenceAudio: Blob;
    speed?: number;
    lang?: string;
}

export interface UpdateTtsConfigApiTtsApiTtsConfigPostRequest {
    tTSConfigRequest: TTSConfigRequest;
}

export interface UpdateTtsConfigApiTtsApiTtsConfigPost0Request {
    tTSConfigRequest: TTSConfigRequest;
}

/**
 * TtsApi - interface
 * 
 * @export
 * @interface TtsApiInterface
 */
export interface TtsApiInterface {
    /**
     * Clean up old audio files.
     * @summary Cleanup Audio Files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    cleanupAudioFilesApiTtsApiTtsAdminCleanupPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get generated audio file.
     * @summary Get Audio File
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    getAudioFileApiTtsApiTtsAudioFilenameGetRaw(requestParameters: GetAudioFileApiTtsApiTtsAudioFilenameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get generated audio file.
     * Get Audio File
     */
    getAudioFileApiTtsApiTtsAudioFilenameGet(requestParameters: GetAudioFileApiTtsApiTtsAudioFilenameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get generated audio file.
     * @summary Get Audio File
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    getAudioFileApiTtsApiTtsAudioFilenameGet_1Raw(requestParameters: GetAudioFileApiTtsApiTtsAudioFilenameGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get generated audio file.
     * Get Audio File
     */
    getAudioFileApiTtsApiTtsAudioFilenameGet_1(requestParameters: GetAudioFileApiTtsApiTtsAudioFilenameGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get list of available TTS backends.
     * @summary Get Available Backends
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    getAvailableBackendsApiTtsApiTtsAdminBackendsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get current TTS configuration.
     * @summary Get Tts Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    getTtsConfigApiTtsApiTtsConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSConfigResponse>>;

    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    getTtsConfigApiTtsApiTtsConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSConfigResponse>;

    /**
     * Get current TTS configuration.
     * @summary Get Tts Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    getTtsConfigApiTtsApiTtsConfigGet_2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSConfigResponse>>;

    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    getTtsConfigApiTtsApiTtsConfigGet_2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSConfigResponse>;

    /**
     * Get TTS service statistics.
     * @summary Get Tts Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSStatsResponse>>;

    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    getTtsStatsApiTtsApiTtsAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSStatsResponse>;

    /**
     * Perform TTS service health check.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Perform TTS service health check.
     * Health Check
     */
    healthCheckApiTtsApiTtsAdminHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Reload a specific TTS backend.
     * @summary Reload Backend
     * @param {string} backendName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    // Removed duplicate methods - defined in TtsAdminApi

    /**
     * Synthesize multiple texts to speech.
     * @summary Synthesize Batch
     * @param {TTSBatchRequest} tTSBatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    synthesizeBatchApiTtsApiTtsSynthesizeBatchPostRaw(requestParameters: SynthesizeBatchApiTtsApiTtsSynthesizeBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSBatchResponse>>;

    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    synthesizeBatchApiTtsApiTtsSynthesizeBatchPost(requestParameters: SynthesizeBatchApiTtsApiTtsSynthesizeBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSBatchResponse>;

    /**
     * Synthesize multiple texts to speech.
     * @summary Synthesize Batch
     * @param {TTSBatchRequest} tTSBatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3Raw(requestParameters: SynthesizeBatchApiTtsApiTtsSynthesizeBatchPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSBatchResponse>>;

    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3(requestParameters: SynthesizeBatchApiTtsApiTtsSynthesizeBatchPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSBatchResponse>;

    /**
     * Synthesize text to speech.
     * @summary Synthesize Text
     * @param {TTSSynthesisRequest} tTSSynthesisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    synthesizeTextApiTtsApiTtsSynthesizePostRaw(requestParameters: SynthesizeTextApiTtsApiTtsSynthesizePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSSynthesisResponse>>;

    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    synthesizeTextApiTtsApiTtsSynthesizePost(requestParameters: SynthesizeTextApiTtsApiTtsSynthesizePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSSynthesisResponse>;

    /**
     * Synthesize text to speech.
     * @summary Synthesize Text
     * @param {TTSSynthesisRequest} tTSSynthesisRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    synthesizeTextApiTtsApiTtsSynthesizePost_4Raw(requestParameters: SynthesizeTextApiTtsApiTtsSynthesizePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSSynthesisResponse>>;

    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    synthesizeTextApiTtsApiTtsSynthesizePost_4(requestParameters: SynthesizeTextApiTtsApiTtsSynthesizePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSSynthesisResponse>;

    /**
     * Synthesize text with voice cloning using XTTS.
     * @summary Synthesize With Voice Clone
     * @param {string} text 
     * @param {Blob} referenceAudio 
     * @param {number} [speed] 
     * @param {string} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRaw(requestParameters: SynthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost(requestParameters: SynthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Synthesize text with voice cloning using XTTS.
     * @summary Synthesize With Voice Clone
     * @param {string} text 
     * @param {Blob} referenceAudio 
     * @param {number} [speed] 
     * @param {string} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5Raw(requestParameters: SynthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5(requestParameters: SynthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Update TTS configuration.
     * @summary Update Tts Config
     * @param {TTSConfigRequest} tTSConfigRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    updateTtsConfigApiTtsApiTtsConfigPostRaw(requestParameters: UpdateTtsConfigApiTtsApiTtsConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSConfigResponse>>;

    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    updateTtsConfigApiTtsApiTtsConfigPost(requestParameters: UpdateTtsConfigApiTtsApiTtsConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSConfigResponse>;

    /**
     * Update TTS configuration.
     * @summary Update Tts Config
     * @param {TTSConfigRequest} tTSConfigRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApiInterface
     */
    updateTtsConfigApiTtsApiTtsConfigPost_6Raw(requestParameters: UpdateTtsConfigApiTtsApiTtsConfigPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSConfigResponse>>;

    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    updateTtsConfigApiTtsApiTtsConfigPost_6(requestParameters: UpdateTtsConfigApiTtsApiTtsConfigPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSConfigResponse>;

}

/**
 * 
 */
export class TtsApi extends runtime.BaseAPI implements TtsApiInterface {

    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    async cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/admin/cleanup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    async cleanupAudioFilesApiTtsApiTtsAdminCleanupPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get generated audio file.
     * Get Audio File
     */
    async getAudioFileApiTtsApiTtsAudioFilenameGetRaw(requestParameters: GetAudioFileApiTtsApiTtsAudioFilenameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['filename'] == null) {
            throw new runtime.RequiredError(
                'filename',
                'Required parameter "filename" was null or undefined when calling getAudioFileApiTtsApiTtsAudioFilenameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/audio/{filename}`;
        urlPath = urlPath.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters['filename'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get generated audio file.
     * Get Audio File
     */
    async getAudioFileApiTtsApiTtsAudioFilenameGet(requestParameters: GetAudioFileApiTtsApiTtsAudioFilenameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getAudioFileApiTtsApiTtsAudioFilenameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get generated audio file.
     * Get Audio File
     */
    async getAudioFileApiTtsApiTtsAudioFilenameGet_1Raw(requestParameters: GetAudioFileApiTtsApiTtsAudioFilenameGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['filename'] == null) {
            throw new runtime.RequiredError(
                'filename',
                'Required parameter "filename" was null or undefined when calling getAudioFileApiTtsApiTtsAudioFilenameGet_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/audio/{filename}`;
        urlPath = urlPath.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters['filename'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get generated audio file.
     * Get Audio File
     */
    async getAudioFileApiTtsApiTtsAudioFilenameGet_1(requestParameters: GetAudioFileApiTtsApiTtsAudioFilenameGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getAudioFileApiTtsApiTtsAudioFilenameGet_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    async getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/admin/backends`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    async getAvailableBackendsApiTtsApiTtsAdminBackendsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    async getTtsConfigApiTtsApiTtsConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/config`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TTSConfigResponseFromJSON(jsonValue));
    }

    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    async getTtsConfigApiTtsApiTtsConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSConfigResponse> {
        const response = await this.getTtsConfigApiTtsApiTtsConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    async getTtsConfigApiTtsApiTtsConfigGet_2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/config`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TTSConfigResponseFromJSON(jsonValue));
    }

    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    async getTtsConfigApiTtsApiTtsConfigGet_2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSConfigResponse> {
        const response = await this.getTtsConfigApiTtsApiTtsConfigGet_2Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    async getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/admin/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TTSStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    async getTtsStatsApiTtsApiTtsAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSStatsResponse> {
        const response = await this.getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Perform TTS service health check.
     * Health Check
     */
    async healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/admin/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Perform TTS service health check.
     * Health Check
     */
    async healthCheckApiTtsApiTtsAdminHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    async reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw(requestParameters: any, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['backendName'] == null) {
            throw new runtime.RequiredError(
                'backendName',
                'Required parameter "backendName" was null or undefined when calling reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/admin/backends/{backend_name}/reload`;
        urlPath = urlPath.replace(`{${"backend_name"}}`, encodeURIComponent(String(requestParameters['backendName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    async reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost(requestParameters: any, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    async synthesizeBatchApiTtsApiTtsSynthesizeBatchPostRaw(requestParameters: SynthesizeBatchApiTtsApiTtsSynthesizeBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSBatchResponse>> {
        if (requestParameters['tTSBatchRequest'] == null) {
            throw new runtime.RequiredError(
                'tTSBatchRequest',
                'Required parameter "tTSBatchRequest" was null or undefined when calling synthesizeBatchApiTtsApiTtsSynthesizeBatchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tts/api/tts/synthesize/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TTSBatchRequestToJSON(requestParameters['tTSBatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TTSBatchResponseFromJSON(jsonValue));
    }

    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    async synthesizeBatchApiTtsApiTtsSynthesizeBatchPost(requestParameters: SynthesizeBatchApiTtsApiTtsSynthesizeBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSBatchResponse> {
        const response = await this.synthesizeBatchApiTtsApiTtsSynthesizeBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    async synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3Raw(requestParameters: SynthesizeBatchApiTtsApiTtsSynthesizeBatchPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSBatchResponse>> {
        if (requestParameters['tTSBatchRequest'] == null) {
            throw new runtime.RequiredError(
                'tTSBatchRequest',
                'Required parameter "tTSBatchRequest" was null or undefined when calling synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tts/api/tts/synthesize/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TTSBatchRequestToJSON(requestParameters['tTSBatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TTSBatchResponseFromJSON(jsonValue));
    }

    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    async synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3(requestParameters: SynthesizeBatchApiTtsApiTtsSynthesizeBatchPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSBatchResponse> {
        const response = await this.synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    async synthesizeTextApiTtsApiTtsSynthesizePostRaw(requestParameters: SynthesizeTextApiTtsApiTtsSynthesizePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSSynthesisResponse>> {
        if (requestParameters['tTSSynthesisRequest'] == null) {
            throw new runtime.RequiredError(
                'tTSSynthesisRequest',
                'Required parameter "tTSSynthesisRequest" was null or undefined when calling synthesizeTextApiTtsApiTtsSynthesizePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tts/api/tts/synthesize`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TTSSynthesisRequestToJSON(requestParameters['tTSSynthesisRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TTSSynthesisResponseFromJSON(jsonValue));
    }

    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    async synthesizeTextApiTtsApiTtsSynthesizePost(requestParameters: SynthesizeTextApiTtsApiTtsSynthesizePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSSynthesisResponse> {
        const response = await this.synthesizeTextApiTtsApiTtsSynthesizePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    async synthesizeTextApiTtsApiTtsSynthesizePost_4Raw(requestParameters: SynthesizeTextApiTtsApiTtsSynthesizePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSSynthesisResponse>> {
        if (requestParameters['tTSSynthesisRequest'] == null) {
            throw new runtime.RequiredError(
                'tTSSynthesisRequest',
                'Required parameter "tTSSynthesisRequest" was null or undefined when calling synthesizeTextApiTtsApiTtsSynthesizePost_4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tts/api/tts/synthesize`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TTSSynthesisRequestToJSON(requestParameters['tTSSynthesisRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TTSSynthesisResponseFromJSON(jsonValue));
    }

    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    async synthesizeTextApiTtsApiTtsSynthesizePost_4(requestParameters: SynthesizeTextApiTtsApiTtsSynthesizePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSSynthesisResponse> {
        const response = await this.synthesizeTextApiTtsApiTtsSynthesizePost_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    async synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRaw(requestParameters: SynthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['text'] == null) {
            throw new runtime.RequiredError(
                'text',
                'Required parameter "text" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost().'
            );
        }

        if (requestParameters['referenceAudio'] == null) {
            throw new runtime.RequiredError(
                'referenceAudio',
                'Required parameter "referenceAudio" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['text'] != null) {
            formParams.append('text', requestParameters['text'] as any);
        }

        if (requestParameters['referenceAudio'] != null) {
            formParams.append('reference_audio', requestParameters['referenceAudio'] as any);
        }

        if (requestParameters['speed'] != null) {
            formParams.append('speed', requestParameters['speed'] as any);
        }

        if (requestParameters['lang'] != null) {
            formParams.append('lang', requestParameters['lang'] as any);
        }


        let urlPath = `/api/tts/api/tts/voice-clone`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    async synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost(requestParameters: SynthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    async synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5Raw(requestParameters: SynthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['text'] == null) {
            throw new runtime.RequiredError(
                'text',
                'Required parameter "text" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5().'
            );
        }

        if (requestParameters['referenceAudio'] == null) {
            throw new runtime.RequiredError(
                'referenceAudio',
                'Required parameter "referenceAudio" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['text'] != null) {
            formParams.append('text', requestParameters['text'] as any);
        }

        if (requestParameters['referenceAudio'] != null) {
            formParams.append('reference_audio', requestParameters['referenceAudio'] as any);
        }

        if (requestParameters['speed'] != null) {
            formParams.append('speed', requestParameters['speed'] as any);
        }

        if (requestParameters['lang'] != null) {
            formParams.append('lang', requestParameters['lang'] as any);
        }


        let urlPath = `/api/tts/api/tts/voice-clone`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    async synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5(requestParameters: SynthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    async updateTtsConfigApiTtsApiTtsConfigPostRaw(requestParameters: UpdateTtsConfigApiTtsApiTtsConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSConfigResponse>> {
        if (requestParameters['tTSConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'tTSConfigRequest',
                'Required parameter "tTSConfigRequest" was null or undefined when calling updateTtsConfigApiTtsApiTtsConfigPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tts/api/tts/config`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TTSConfigRequestToJSON(requestParameters['tTSConfigRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TTSConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    async updateTtsConfigApiTtsApiTtsConfigPost(requestParameters: UpdateTtsConfigApiTtsApiTtsConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSConfigResponse> {
        const response = await this.updateTtsConfigApiTtsApiTtsConfigPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    async updateTtsConfigApiTtsApiTtsConfigPost_6Raw(requestParameters: UpdateTtsConfigApiTtsApiTtsConfigPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSConfigResponse>> {
        if (requestParameters['tTSConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'tTSConfigRequest',
                'Required parameter "tTSConfigRequest" was null or undefined when calling updateTtsConfigApiTtsApiTtsConfigPost_6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tts/api/tts/config`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TTSConfigRequestToJSON(requestParameters['tTSConfigRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TTSConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    async updateTtsConfigApiTtsApiTtsConfigPost_6(requestParameters: UpdateTtsConfigApiTtsApiTtsConfigPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSConfigResponse> {
        const response = await this.updateTtsConfigApiTtsApiTtsConfigPost_6Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
