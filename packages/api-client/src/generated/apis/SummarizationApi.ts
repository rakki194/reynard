/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BatchSummarizationRequest,
  ContentTypeDetectionRequest,
  ContentTypeDetectionResponse,
  HTTPValidationError,
  HealthCheckResponse,
  SummarizationConfigRequest,
  SummarizationConfigResponse,
  SummarizationRequest,
  SummarizationResponse,
  SummarizationStatsResponse,
} from '../models/index';
import {
    BatchSummarizationRequestFromJSON,
    BatchSummarizationRequestToJSON,
    ContentTypeDetectionRequestFromJSON,
    ContentTypeDetectionRequestToJSON,
    ContentTypeDetectionResponseFromJSON,
    ContentTypeDetectionResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HealthCheckResponseFromJSON,
    HealthCheckResponseToJSON,
    SummarizationConfigRequestFromJSON,
    SummarizationConfigRequestToJSON,
    SummarizationConfigResponseFromJSON,
    SummarizationConfigResponseToJSON,
    SummarizationRequestFromJSON,
    SummarizationRequestToJSON,
    SummarizationResponseFromJSON,
    SummarizationResponseToJSON,
    SummarizationStatsResponseFromJSON,
    SummarizationStatsResponseToJSON,
} from '../models/index';

export interface DetectContentTypeApiSummarizationDetectContentTypePostRequest {
    contentTypeDetectionRequest: ContentTypeDetectionRequest;
}

export interface SummarizeBatchApiSummarizationSummarizeBatchPostRequest {
    batchSummarizationRequest: BatchSummarizationRequest;
}

export interface SummarizeTextApiSummarizationSummarizePostRequest {
    summarizationRequest: SummarizationRequest;
}

export interface SummarizeTextStreamApiSummarizationSummarizeStreamPostRequest {
    summarizationRequest: SummarizationRequest;
}

export interface UpdateConfigApiSummarizationConfigPostRequest {
    summarizationConfigRequest: SummarizationConfigRequest;
}

/**
 * SummarizationApi - interface
 * 
 * @export
 * @interface SummarizationApiInterface
 */
export interface SummarizationApiInterface {
    /**
     * Automatically detect the content type of text.  This endpoint analyzes text and determines the most appropriate content type for summarization.
     * @summary Detect Content Type
     * @param {ContentTypeDetectionRequest} contentTypeDetectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummarizationApiInterface
     */
    detectContentTypeApiSummarizationDetectContentTypePostRaw(requestParameters: DetectContentTypeApiSummarizationDetectContentTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentTypeDetectionResponse>>;

    /**
     * Automatically detect the content type of text.  This endpoint analyzes text and determines the most appropriate content type for summarization.
     * Detect Content Type
     */
    detectContentTypeApiSummarizationDetectContentTypePost(requestParameters: DetectContentTypeApiSummarizationDetectContentTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentTypeDetectionResponse>;

    /**
     * Get list of available models for summarization.  Returns the list of models that can be used for text summarization.
     * @summary Get Available Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummarizationApiInterface
     */
    getAvailableModelsApiSummarizationModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get list of available models for summarization.  Returns the list of models that can be used for text summarization.
     * Get Available Models
     */
    getAvailableModelsApiSummarizationModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get current summarization service configuration.  Returns the current configuration parameters for the summarization service.
     * @summary Get Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummarizationApiInterface
     */
    getConfigApiSummarizationConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummarizationConfigResponse>>;

    /**
     * Get current summarization service configuration.  Returns the current configuration parameters for the summarization service.
     * Get Config
     */
    getConfigApiSummarizationConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummarizationConfigResponse>;

    /**
     * Get performance statistics for the summarization service.  Returns detailed statistics about service usage, performance, and available capabilities.
     * @summary Get Performance Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummarizationApiInterface
     */
    getPerformanceStatsApiSummarizationStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummarizationStatsResponse>>;

    /**
     * Get performance statistics for the summarization service.  Returns detailed statistics about service usage, performance, and available capabilities.
     * Get Performance Stats
     */
    getPerformanceStatsApiSummarizationStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummarizationStatsResponse>;

    /**
     * Get supported content types and their summarizers.  Returns information about which content types are supported and which summarizers handle each type.
     * @summary Get Supported Content Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummarizationApiInterface
     */
    getSupportedContentTypesApiSummarizationContentTypesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get supported content types and their summarizers.  Returns information about which content types are supported and which summarizers handle each type.
     * Get Supported Content Types
     */
    getSupportedContentTypesApiSummarizationContentTypesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Perform health check on the summarization service.  Returns the current health status and detailed information about service availability and configuration.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummarizationApiInterface
     */
    healthCheckApiSummarizationHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckResponse>>;

    /**
     * Perform health check on the summarization service.  Returns the current health status and detailed information about service availability and configuration.
     * Health Check
     */
    healthCheckApiSummarizationHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckResponse>;

    /**
     * Process a batch of summarization requests.  This endpoint allows processing multiple summarization requests in a single call with optional streaming support.
     * @summary Summarize Batch
     * @param {BatchSummarizationRequest} batchSummarizationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummarizationApiInterface
     */
    summarizeBatchApiSummarizationSummarizeBatchPostRaw(requestParameters: SummarizeBatchApiSummarizationSummarizeBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Process a batch of summarization requests.  This endpoint allows processing multiple summarization requests in a single call with optional streaming support.
     * Summarize Batch
     */
    summarizeBatchApiSummarizationSummarizeBatchPost(requestParameters: SummarizeBatchApiSummarizationSummarizeBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Summarize text with specified options.  This endpoint provides text summarization with support for different content types, summary levels, and customization options.
     * @summary Summarize Text
     * @param {SummarizationRequest} summarizationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummarizationApiInterface
     */
    summarizeTextApiSummarizationSummarizePostRaw(requestParameters: SummarizeTextApiSummarizationSummarizePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummarizationResponse>>;

    /**
     * Summarize text with specified options.  This endpoint provides text summarization with support for different content types, summary levels, and customization options.
     * Summarize Text
     */
    summarizeTextApiSummarizationSummarizePost(requestParameters: SummarizeTextApiSummarizationSummarizePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummarizationResponse>;

    /**
     * Stream text summarization with progress updates.  This endpoint provides real-time streaming of summarization progress using Server-Sent Events (SSE).
     * @summary Summarize Text Stream
     * @param {SummarizationRequest} summarizationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummarizationApiInterface
     */
    summarizeTextStreamApiSummarizationSummarizeStreamPostRaw(requestParameters: SummarizeTextStreamApiSummarizationSummarizeStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Stream text summarization with progress updates.  This endpoint provides real-time streaming of summarization progress using Server-Sent Events (SSE).
     * Summarize Text Stream
     */
    summarizeTextStreamApiSummarizationSummarizeStreamPost(requestParameters: SummarizeTextStreamApiSummarizationSummarizeStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Update summarization service configuration.  Allows updating various configuration parameters for the summarization service.
     * @summary Update Config
     * @param {SummarizationConfigRequest} summarizationConfigRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummarizationApiInterface
     */
    updateConfigApiSummarizationConfigPostRaw(requestParameters: UpdateConfigApiSummarizationConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummarizationConfigResponse>>;

    /**
     * Update summarization service configuration.  Allows updating various configuration parameters for the summarization service.
     * Update Config
     */
    updateConfigApiSummarizationConfigPost(requestParameters: UpdateConfigApiSummarizationConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummarizationConfigResponse>;

}

/**
 * 
 */
export class SummarizationApi extends runtime.BaseAPI implements SummarizationApiInterface {

    /**
     * Automatically detect the content type of text.  This endpoint analyzes text and determines the most appropriate content type for summarization.
     * Detect Content Type
     */
    async detectContentTypeApiSummarizationDetectContentTypePostRaw(requestParameters: DetectContentTypeApiSummarizationDetectContentTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContentTypeDetectionResponse>> {
        if (requestParameters['contentTypeDetectionRequest'] == null) {
            throw new runtime.RequiredError(
                'contentTypeDetectionRequest',
                'Required parameter "contentTypeDetectionRequest" was null or undefined when calling detectContentTypeApiSummarizationDetectContentTypePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/summarization/detect-content-type`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContentTypeDetectionRequestToJSON(requestParameters['contentTypeDetectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentTypeDetectionResponseFromJSON(jsonValue));
    }

    /**
     * Automatically detect the content type of text.  This endpoint analyzes text and determines the most appropriate content type for summarization.
     * Detect Content Type
     */
    async detectContentTypeApiSummarizationDetectContentTypePost(requestParameters: DetectContentTypeApiSummarizationDetectContentTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContentTypeDetectionResponse> {
        const response = await this.detectContentTypeApiSummarizationDetectContentTypePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of available models for summarization.  Returns the list of models that can be used for text summarization.
     * Get Available Models
     */
    async getAvailableModelsApiSummarizationModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/summarization/models`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get list of available models for summarization.  Returns the list of models that can be used for text summarization.
     * Get Available Models
     */
    async getAvailableModelsApiSummarizationModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getAvailableModelsApiSummarizationModelsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current summarization service configuration.  Returns the current configuration parameters for the summarization service.
     * Get Config
     */
    async getConfigApiSummarizationConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummarizationConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/summarization/config`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SummarizationConfigResponseFromJSON(jsonValue));
    }

    /**
     * Get current summarization service configuration.  Returns the current configuration parameters for the summarization service.
     * Get Config
     */
    async getConfigApiSummarizationConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummarizationConfigResponse> {
        const response = await this.getConfigApiSummarizationConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get performance statistics for the summarization service.  Returns detailed statistics about service usage, performance, and available capabilities.
     * Get Performance Stats
     */
    async getPerformanceStatsApiSummarizationStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummarizationStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/summarization/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SummarizationStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get performance statistics for the summarization service.  Returns detailed statistics about service usage, performance, and available capabilities.
     * Get Performance Stats
     */
    async getPerformanceStatsApiSummarizationStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummarizationStatsResponse> {
        const response = await this.getPerformanceStatsApiSummarizationStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get supported content types and their summarizers.  Returns information about which content types are supported and which summarizers handle each type.
     * Get Supported Content Types
     */
    async getSupportedContentTypesApiSummarizationContentTypesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/summarization/content-types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get supported content types and their summarizers.  Returns information about which content types are supported and which summarizers handle each type.
     * Get Supported Content Types
     */
    async getSupportedContentTypesApiSummarizationContentTypesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getSupportedContentTypesApiSummarizationContentTypesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Perform health check on the summarization service.  Returns the current health status and detailed information about service availability and configuration.
     * Health Check
     */
    async healthCheckApiSummarizationHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/summarization/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckResponseFromJSON(jsonValue));
    }

    /**
     * Perform health check on the summarization service.  Returns the current health status and detailed information about service availability and configuration.
     * Health Check
     */
    async healthCheckApiSummarizationHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckResponse> {
        const response = await this.healthCheckApiSummarizationHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Process a batch of summarization requests.  This endpoint allows processing multiple summarization requests in a single call with optional streaming support.
     * Summarize Batch
     */
    async summarizeBatchApiSummarizationSummarizeBatchPostRaw(requestParameters: SummarizeBatchApiSummarizationSummarizeBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['batchSummarizationRequest'] == null) {
            throw new runtime.RequiredError(
                'batchSummarizationRequest',
                'Required parameter "batchSummarizationRequest" was null or undefined when calling summarizeBatchApiSummarizationSummarizeBatchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/summarization/summarize/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BatchSummarizationRequestToJSON(requestParameters['batchSummarizationRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Process a batch of summarization requests.  This endpoint allows processing multiple summarization requests in a single call with optional streaming support.
     * Summarize Batch
     */
    async summarizeBatchApiSummarizationSummarizeBatchPost(requestParameters: SummarizeBatchApiSummarizationSummarizeBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.summarizeBatchApiSummarizationSummarizeBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Summarize text with specified options.  This endpoint provides text summarization with support for different content types, summary levels, and customization options.
     * Summarize Text
     */
    async summarizeTextApiSummarizationSummarizePostRaw(requestParameters: SummarizeTextApiSummarizationSummarizePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummarizationResponse>> {
        if (requestParameters['summarizationRequest'] == null) {
            throw new runtime.RequiredError(
                'summarizationRequest',
                'Required parameter "summarizationRequest" was null or undefined when calling summarizeTextApiSummarizationSummarizePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/summarization/summarize`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SummarizationRequestToJSON(requestParameters['summarizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SummarizationResponseFromJSON(jsonValue));
    }

    /**
     * Summarize text with specified options.  This endpoint provides text summarization with support for different content types, summary levels, and customization options.
     * Summarize Text
     */
    async summarizeTextApiSummarizationSummarizePost(requestParameters: SummarizeTextApiSummarizationSummarizePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummarizationResponse> {
        const response = await this.summarizeTextApiSummarizationSummarizePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stream text summarization with progress updates.  This endpoint provides real-time streaming of summarization progress using Server-Sent Events (SSE).
     * Summarize Text Stream
     */
    async summarizeTextStreamApiSummarizationSummarizeStreamPostRaw(requestParameters: SummarizeTextStreamApiSummarizationSummarizeStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['summarizationRequest'] == null) {
            throw new runtime.RequiredError(
                'summarizationRequest',
                'Required parameter "summarizationRequest" was null or undefined when calling summarizeTextStreamApiSummarizationSummarizeStreamPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/summarization/summarize/stream`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SummarizationRequestToJSON(requestParameters['summarizationRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stream text summarization with progress updates.  This endpoint provides real-time streaming of summarization progress using Server-Sent Events (SSE).
     * Summarize Text Stream
     */
    async summarizeTextStreamApiSummarizationSummarizeStreamPost(requestParameters: SummarizeTextStreamApiSummarizationSummarizeStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.summarizeTextStreamApiSummarizationSummarizeStreamPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update summarization service configuration.  Allows updating various configuration parameters for the summarization service.
     * Update Config
     */
    async updateConfigApiSummarizationConfigPostRaw(requestParameters: UpdateConfigApiSummarizationConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SummarizationConfigResponse>> {
        if (requestParameters['summarizationConfigRequest'] == null) {
            throw new runtime.RequiredError(
                'summarizationConfigRequest',
                'Required parameter "summarizationConfigRequest" was null or undefined when calling updateConfigApiSummarizationConfigPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/summarization/config`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SummarizationConfigRequestToJSON(requestParameters['summarizationConfigRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SummarizationConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update summarization service configuration.  Allows updating various configuration parameters for the summarization service.
     * Update Config
     */
    async updateConfigApiSummarizationConfigPost(requestParameters: UpdateConfigApiSummarizationConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SummarizationConfigResponse> {
        const response = await this.updateConfigApiSummarizationConfigPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
