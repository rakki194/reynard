/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BodySendBulkEmailApiEmailSendBulkPost,
  BodySendEmailApiEmailSendPost,
  EmailBulkResponse,
  EmailSendResponse,
  EmailStatusModel,
  HTTPValidationError,
} from '../models/index';
import {
    BodySendBulkEmailApiEmailSendBulkPostFromJSON,
    BodySendBulkEmailApiEmailSendBulkPostToJSON,
    BodySendEmailApiEmailSendPostFromJSON,
    BodySendEmailApiEmailSendPostToJSON,
    EmailBulkResponseFromJSON,
    EmailBulkResponseToJSON,
    EmailSendResponseFromJSON,
    EmailSendResponseToJSON,
    EmailStatusModelFromJSON,
    EmailStatusModelToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface GetEmailStatusApiEmailStatusGetRequest {
    requestBody: { [key: string]: string; };
}

export interface SendBulkEmailApiEmailSendBulkPostRequest {
    bodySendBulkEmailApiEmailSendBulkPost: BodySendBulkEmailApiEmailSendBulkPost;
}

export interface SendEmailApiEmailSendPostRequest {
    bodySendEmailApiEmailSendPost: BodySendEmailApiEmailSendPost;
}

export interface SendSimpleEmailApiEmailSendSimplePostRequest {
    toEmail: string;
    subject: string;
    body: string;
    requestBody: { [key: string]: string; };
    htmlBody?: string;
}

export interface TestEmailConnectionApiEmailTestPostRequest {
    requestBody: { [key: string]: string; };
}

/**
 * EmailApi - interface
 * 
 * @export
 * @interface EmailApiInterface
 */
export interface EmailApiInterface {
    /**
     * Get email service status.  Args:     current_user: Current authenticated user  Returns:     EmailStatusModel: Email service status
     * @summary Get Email Status
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    getEmailStatusApiEmailStatusGetRaw(requestParameters: GetEmailStatusApiEmailStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStatusModel>>;

    /**
     * Get email service status.  Args:     current_user: Current authenticated user  Returns:     EmailStatusModel: Email service status
     * Get Email Status
     */
    getEmailStatusApiEmailStatusGet(requestParameters: GetEmailStatusApiEmailStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStatusModel>;

    /**
     * Send bulk emails.  Args:     request: Bulk email request     current_user: Current authenticated user  Returns:     EmailBulkResponse: Bulk send results
     * @summary Send Bulk Email
     * @param {BodySendBulkEmailApiEmailSendBulkPost} bodySendBulkEmailApiEmailSendBulkPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    sendBulkEmailApiEmailSendBulkPostRaw(requestParameters: SendBulkEmailApiEmailSendBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailBulkResponse>>;

    /**
     * Send bulk emails.  Args:     request: Bulk email request     current_user: Current authenticated user  Returns:     EmailBulkResponse: Bulk send results
     * Send Bulk Email
     */
    sendBulkEmailApiEmailSendBulkPost(requestParameters: SendBulkEmailApiEmailSendBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailBulkResponse>;

    /**
     * Send an email.  Args:     request: Email send request     current_user: Current authenticated user  Returns:     EmailSendResponse: Send result
     * @summary Send Email
     * @param {BodySendEmailApiEmailSendPost} bodySendEmailApiEmailSendPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    sendEmailApiEmailSendPostRaw(requestParameters: SendEmailApiEmailSendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendResponse>>;

    /**
     * Send an email.  Args:     request: Email send request     current_user: Current authenticated user  Returns:     EmailSendResponse: Send result
     * Send Email
     */
    sendEmailApiEmailSendPost(requestParameters: SendEmailApiEmailSendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendResponse>;

    /**
     * Send a simple email.  Args:     to_email: Recipient email address     subject: Email subject     body: Email body     html_body: Optional HTML body     current_user: Current authenticated user  Returns:     EmailSendResponse: Send result
     * @summary Send Simple Email
     * @param {string} toEmail 
     * @param {string} subject 
     * @param {string} body 
     * @param {{ [key: string]: string; }} requestBody 
     * @param {string} [htmlBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    sendSimpleEmailApiEmailSendSimplePostRaw(requestParameters: SendSimpleEmailApiEmailSendSimplePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendResponse>>;

    /**
     * Send a simple email.  Args:     to_email: Recipient email address     subject: Email subject     body: Email body     html_body: Optional HTML body     current_user: Current authenticated user  Returns:     EmailSendResponse: Send result
     * Send Simple Email
     */
    sendSimpleEmailApiEmailSendSimplePost(requestParameters: SendSimpleEmailApiEmailSendSimplePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendResponse>;

    /**
     * Test email service connection.  Args:     current_user: Current authenticated user  Returns:     Dict: Test result
     * @summary Test Email Connection
     * @param {{ [key: string]: string; }} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApiInterface
     */
    testEmailConnectionApiEmailTestPostRaw(requestParameters: TestEmailConnectionApiEmailTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Test email service connection.  Args:     current_user: Current authenticated user  Returns:     Dict: Test result
     * Test Email Connection
     */
    testEmailConnectionApiEmailTestPost(requestParameters: TestEmailConnectionApiEmailTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class EmailApi extends runtime.BaseAPI implements EmailApiInterface {

    /**
     * Get email service status.  Args:     current_user: Current authenticated user  Returns:     EmailStatusModel: Email service status
     * Get Email Status
     */
    async getEmailStatusApiEmailStatusGetRaw(requestParameters: GetEmailStatusApiEmailStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStatusModel>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling getEmailStatusApiEmailStatusGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/email/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailStatusModelFromJSON(jsonValue));
    }

    /**
     * Get email service status.  Args:     current_user: Current authenticated user  Returns:     EmailStatusModel: Email service status
     * Get Email Status
     */
    async getEmailStatusApiEmailStatusGet(requestParameters: GetEmailStatusApiEmailStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStatusModel> {
        const response = await this.getEmailStatusApiEmailStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send bulk emails.  Args:     request: Bulk email request     current_user: Current authenticated user  Returns:     EmailBulkResponse: Bulk send results
     * Send Bulk Email
     */
    async sendBulkEmailApiEmailSendBulkPostRaw(requestParameters: SendBulkEmailApiEmailSendBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailBulkResponse>> {
        if (requestParameters['bodySendBulkEmailApiEmailSendBulkPost'] == null) {
            throw new runtime.RequiredError(
                'bodySendBulkEmailApiEmailSendBulkPost',
                'Required parameter "bodySendBulkEmailApiEmailSendBulkPost" was null or undefined when calling sendBulkEmailApiEmailSendBulkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/email/send-bulk`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodySendBulkEmailApiEmailSendBulkPostToJSON(requestParameters['bodySendBulkEmailApiEmailSendBulkPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailBulkResponseFromJSON(jsonValue));
    }

    /**
     * Send bulk emails.  Args:     request: Bulk email request     current_user: Current authenticated user  Returns:     EmailBulkResponse: Bulk send results
     * Send Bulk Email
     */
    async sendBulkEmailApiEmailSendBulkPost(requestParameters: SendBulkEmailApiEmailSendBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailBulkResponse> {
        const response = await this.sendBulkEmailApiEmailSendBulkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send an email.  Args:     request: Email send request     current_user: Current authenticated user  Returns:     EmailSendResponse: Send result
     * Send Email
     */
    async sendEmailApiEmailSendPostRaw(requestParameters: SendEmailApiEmailSendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendResponse>> {
        if (requestParameters['bodySendEmailApiEmailSendPost'] == null) {
            throw new runtime.RequiredError(
                'bodySendEmailApiEmailSendPost',
                'Required parameter "bodySendEmailApiEmailSendPost" was null or undefined when calling sendEmailApiEmailSendPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/email/send`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodySendEmailApiEmailSendPostToJSON(requestParameters['bodySendEmailApiEmailSendPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSendResponseFromJSON(jsonValue));
    }

    /**
     * Send an email.  Args:     request: Email send request     current_user: Current authenticated user  Returns:     EmailSendResponse: Send result
     * Send Email
     */
    async sendEmailApiEmailSendPost(requestParameters: SendEmailApiEmailSendPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendResponse> {
        const response = await this.sendEmailApiEmailSendPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a simple email.  Args:     to_email: Recipient email address     subject: Email subject     body: Email body     html_body: Optional HTML body     current_user: Current authenticated user  Returns:     EmailSendResponse: Send result
     * Send Simple Email
     */
    async sendSimpleEmailApiEmailSendSimplePostRaw(requestParameters: SendSimpleEmailApiEmailSendSimplePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailSendResponse>> {
        if (requestParameters['toEmail'] == null) {
            throw new runtime.RequiredError(
                'toEmail',
                'Required parameter "toEmail" was null or undefined when calling sendSimpleEmailApiEmailSendSimplePost().'
            );
        }

        if (requestParameters['subject'] == null) {
            throw new runtime.RequiredError(
                'subject',
                'Required parameter "subject" was null or undefined when calling sendSimpleEmailApiEmailSendSimplePost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling sendSimpleEmailApiEmailSendSimplePost().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling sendSimpleEmailApiEmailSendSimplePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['toEmail'] != null) {
            queryParameters['to_email'] = requestParameters['toEmail'];
        }

        if (requestParameters['subject'] != null) {
            queryParameters['subject'] = requestParameters['subject'];
        }

        if (requestParameters['body'] != null) {
            queryParameters['body'] = requestParameters['body'];
        }

        if (requestParameters['htmlBody'] != null) {
            queryParameters['html_body'] = requestParameters['htmlBody'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/email/send-simple`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailSendResponseFromJSON(jsonValue));
    }

    /**
     * Send a simple email.  Args:     to_email: Recipient email address     subject: Email subject     body: Email body     html_body: Optional HTML body     current_user: Current authenticated user  Returns:     EmailSendResponse: Send result
     * Send Simple Email
     */
    async sendSimpleEmailApiEmailSendSimplePost(requestParameters: SendSimpleEmailApiEmailSendSimplePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailSendResponse> {
        const response = await this.sendSimpleEmailApiEmailSendSimplePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test email service connection.  Args:     current_user: Current authenticated user  Returns:     Dict: Test result
     * Test Email Connection
     */
    async testEmailConnectionApiEmailTestPostRaw(requestParameters: TestEmailConnectionApiEmailTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling testEmailConnectionApiEmailTestPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/email/test`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Test email service connection.  Args:     current_user: Current authenticated user  Returns:     Dict: Test result
     * Test Email Connection
     */
    async testEmailConnectionApiEmailTestPost(requestParameters: TestEmailConnectionApiEmailTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.testEmailConnectionApiEmailTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
