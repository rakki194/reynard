/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ExecutorConfigRequest,
  ExecutorStateResponse,
  ExecutorStatsResponse,
  HTTPValidationError,
  TaskExecutionRequest,
  TaskInfoResponse,
} from "../models/index";
import {
  ExecutorConfigRequestFromJSON,
  ExecutorConfigRequestToJSON,
  ExecutorStateResponseFromJSON,
  ExecutorStateResponseToJSON,
  ExecutorStatsResponseFromJSON,
  ExecutorStatsResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  TaskExecutionRequestFromJSON,
  TaskExecutionRequestToJSON,
  TaskInfoResponseFromJSON,
  TaskInfoResponseToJSON,
} from "../models/index";

export interface ExecuteTaskApiExecutorApiExecutorExecutePostRequest {
  taskExecutionRequest: TaskExecutionRequest;
}

export interface ExecuteTaskApiExecutorApiExecutorExecutePost0Request {
  taskExecutionRequest: TaskExecutionRequest;
}

export interface InitializeExecutorApiExecutorApiExecutorInitializePostRequest {
  executorConfigRequest?: ExecutorConfigRequest;
}

export interface InitializeExecutorApiExecutorApiExecutorInitializePost0Request {
  executorConfigRequest?: ExecutorConfigRequest;
}

export interface ShutdownExecutorApiExecutorApiExecutorShutdownPostRequest {
  wait?: boolean;
}

export interface ShutdownExecutorApiExecutorApiExecutorShutdownPost0Request {
  wait?: boolean;
}

/**
 * ExecutorApi - interface
 *
 * @export
 * @interface ExecutorApiInterface
 */
export interface ExecutorApiInterface {
  /**
   * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
   * @summary Execute Task
   * @param {TaskExecutionRequest} taskExecutionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  executeTaskApiExecutorApiExecutorExecutePostRaw(
    requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
   * Execute Task
   */
  executeTaskApiExecutorApiExecutorExecutePost(
    requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
   * @summary Execute Task
   * @param {TaskExecutionRequest} taskExecutionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  executeTaskApiExecutorApiExecutorExecutePost_1Raw(
    requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
   * Execute Task
   */
  executeTaskApiExecutorApiExecutorExecutePost_1(
    requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get information about active tasks.
   * @summary Get Active Tasks
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  getActiveTasksApiExecutorApiExecutorActiveTasksGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<TaskInfoResponse>>>;

  /**
   * Get information about active tasks.
   * Get Active Tasks
   */
  getActiveTasksApiExecutorApiExecutorActiveTasksGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<TaskInfoResponse>>;

  /**
   * Get information about active tasks.
   * @summary Get Active Tasks
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  getActiveTasksApiExecutorApiExecutorActiveTasksGet_2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<TaskInfoResponse>>>;

  /**
   * Get information about active tasks.
   * Get Active Tasks
   */
  getActiveTasksApiExecutorApiExecutorActiveTasksGet_2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<TaskInfoResponse>>;

  /**
   * Get the current state of the executor.
   * @summary Get Executor State
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  getExecutorStateApiExecutorApiExecutorStateGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExecutorStateResponse>>;

  /**
   * Get the current state of the executor.
   * Get Executor State
   */
  getExecutorStateApiExecutorApiExecutorStateGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExecutorStateResponse>;

  /**
   * Get the current state of the executor.
   * @summary Get Executor State
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  getExecutorStateApiExecutorApiExecutorStateGet_3Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExecutorStateResponse>>;

  /**
   * Get the current state of the executor.
   * Get Executor State
   */
  getExecutorStateApiExecutorApiExecutorStateGet_3(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExecutorStateResponse>;

  /**
   * Get executor statistics.
   * @summary Get Executor Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  getExecutorStatsApiExecutorApiExecutorStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExecutorStatsResponse>>;

  /**
   * Get executor statistics.
   * Get Executor Stats
   */
  getExecutorStatsApiExecutorApiExecutorStatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExecutorStatsResponse>;

  /**
   * Get executor statistics.
   * @summary Get Executor Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  getExecutorStatsApiExecutorApiExecutorStatsGet_4Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExecutorStatsResponse>>;

  /**
   * Get executor statistics.
   * Get Executor Stats
   */
  getExecutorStatsApiExecutorApiExecutorStatsGet_4(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExecutorStatsResponse>;

  /**
   * Health check endpoint for the executor service.
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  healthCheckApiExecutorApiExecutorHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Health check endpoint for the executor service.
   * Health Check
   */
  healthCheckApiExecutorApiExecutorHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Health check endpoint for the executor service.
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  healthCheckApiExecutorApiExecutorHealthGet_5Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Health check endpoint for the executor service.
   * Health Check
   */
  healthCheckApiExecutorApiExecutorHealthGet_5(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Initialize the executor with optional configuration.
   * @summary Initialize Executor
   * @param {ExecutorConfigRequest} [executorConfigRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  initializeExecutorApiExecutorApiExecutorInitializePostRaw(
    requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Initialize the executor with optional configuration.
   * Initialize Executor
   */
  initializeExecutorApiExecutorApiExecutorInitializePost(
    requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Initialize the executor with optional configuration.
   * @summary Initialize Executor
   * @param {ExecutorConfigRequest} [executorConfigRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  initializeExecutorApiExecutorApiExecutorInitializePost_6Raw(
    requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Initialize the executor with optional configuration.
   * Initialize Executor
   */
  initializeExecutorApiExecutorApiExecutorInitializePost_6(
    requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Shutdown the executor.
   * @summary Shutdown Executor
   * @param {boolean} [wait]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  shutdownExecutorApiExecutorApiExecutorShutdownPostRaw(
    requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Shutdown the executor.
   * Shutdown Executor
   */
  shutdownExecutorApiExecutorApiExecutorShutdownPost(
    requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Shutdown the executor.
   * @summary Shutdown Executor
   * @param {boolean} [wait]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecutorApiInterface
   */
  shutdownExecutorApiExecutorApiExecutorShutdownPost_7Raw(
    requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Shutdown the executor.
   * Shutdown Executor
   */
  shutdownExecutorApiExecutorApiExecutorShutdownPost_7(
    requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;
}

/**
 *
 */
export class ExecutorApi
  extends runtime.BaseAPI
  implements ExecutorApiInterface
{
  /**
   * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
   * Execute Task
   */
  async executeTaskApiExecutorApiExecutorExecutePostRaw(
    requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["taskExecutionRequest"] == null) {
      throw new runtime.RequiredError(
        "taskExecutionRequest",
        'Required parameter "taskExecutionRequest" was null or undefined when calling executeTaskApiExecutorApiExecutorExecutePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/executor/api/executor/execute`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: TaskExecutionRequestToJSON(
          requestParameters["taskExecutionRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
   * Execute Task
   */
  async executeTaskApiExecutorApiExecutorExecutePost(
    requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.executeTaskApiExecutorApiExecutorExecutePostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
   * Execute Task
   */
  async executeTaskApiExecutorApiExecutorExecutePost_1Raw(
    requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["taskExecutionRequest"] == null) {
      throw new runtime.RequiredError(
        "taskExecutionRequest",
        'Required parameter "taskExecutionRequest" was null or undefined when calling executeTaskApiExecutorApiExecutorExecutePost_1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/executor/api/executor/execute`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: TaskExecutionRequestToJSON(
          requestParameters["taskExecutionRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
   * Execute Task
   */
  async executeTaskApiExecutorApiExecutorExecutePost_1(
    requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.executeTaskApiExecutorApiExecutorExecutePost_1Raw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get information about active tasks.
   * Get Active Tasks
   */
  async getActiveTasksApiExecutorApiExecutorActiveTasksGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<TaskInfoResponse>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/executor/api/executor/active-tasks`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(TaskInfoResponseFromJSON),
    );
  }

  /**
   * Get information about active tasks.
   * Get Active Tasks
   */
  async getActiveTasksApiExecutorApiExecutorActiveTasksGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<TaskInfoResponse>> {
    const response =
      await this.getActiveTasksApiExecutorApiExecutorActiveTasksGetRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get information about active tasks.
   * Get Active Tasks
   */
  async getActiveTasksApiExecutorApiExecutorActiveTasksGet_2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<TaskInfoResponse>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/executor/api/executor/active-tasks`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(TaskInfoResponseFromJSON),
    );
  }

  /**
   * Get information about active tasks.
   * Get Active Tasks
   */
  async getActiveTasksApiExecutorApiExecutorActiveTasksGet_2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<TaskInfoResponse>> {
    const response =
      await this.getActiveTasksApiExecutorApiExecutorActiveTasksGet_2Raw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get the current state of the executor.
   * Get Executor State
   */
  async getExecutorStateApiExecutorApiExecutorStateGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExecutorStateResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/executor/api/executor/state`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExecutorStateResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get the current state of the executor.
   * Get Executor State
   */
  async getExecutorStateApiExecutorApiExecutorStateGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExecutorStateResponse> {
    const response =
      await this.getExecutorStateApiExecutorApiExecutorStateGetRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get the current state of the executor.
   * Get Executor State
   */
  async getExecutorStateApiExecutorApiExecutorStateGet_3Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExecutorStateResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/executor/api/executor/state`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExecutorStateResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get the current state of the executor.
   * Get Executor State
   */
  async getExecutorStateApiExecutorApiExecutorStateGet_3(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExecutorStateResponse> {
    const response =
      await this.getExecutorStateApiExecutorApiExecutorStateGet_3Raw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get executor statistics.
   * Get Executor Stats
   */
  async getExecutorStatsApiExecutorApiExecutorStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExecutorStatsResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/executor/api/executor/stats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExecutorStatsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get executor statistics.
   * Get Executor Stats
   */
  async getExecutorStatsApiExecutorApiExecutorStatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExecutorStatsResponse> {
    const response =
      await this.getExecutorStatsApiExecutorApiExecutorStatsGetRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get executor statistics.
   * Get Executor Stats
   */
  async getExecutorStatsApiExecutorApiExecutorStatsGet_4Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExecutorStatsResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/executor/api/executor/stats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ExecutorStatsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get executor statistics.
   * Get Executor Stats
   */
  async getExecutorStatsApiExecutorApiExecutorStatsGet_4(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExecutorStatsResponse> {
    const response =
      await this.getExecutorStatsApiExecutorApiExecutorStatsGet_4Raw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Health check endpoint for the executor service.
   * Health Check
   */
  async healthCheckApiExecutorApiExecutorHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/executor/api/executor/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Health check endpoint for the executor service.
   * Health Check
   */
  async healthCheckApiExecutorApiExecutorHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.healthCheckApiExecutorApiExecutorHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Health check endpoint for the executor service.
   * Health Check
   */
  async healthCheckApiExecutorApiExecutorHealthGet_5Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/executor/api/executor/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Health check endpoint for the executor service.
   * Health Check
   */
  async healthCheckApiExecutorApiExecutorHealthGet_5(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.healthCheckApiExecutorApiExecutorHealthGet_5Raw(initOverrides);
    return await response.value();
  }

  /**
   * Initialize the executor with optional configuration.
   * Initialize Executor
   */
  async initializeExecutorApiExecutorApiExecutorInitializePostRaw(
    requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/executor/api/executor/initialize`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ExecutorConfigRequestToJSON(
          requestParameters["executorConfigRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Initialize the executor with optional configuration.
   * Initialize Executor
   */
  async initializeExecutorApiExecutorApiExecutorInitializePost(
    requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.initializeExecutorApiExecutorApiExecutorInitializePostRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Initialize the executor with optional configuration.
   * Initialize Executor
   */
  async initializeExecutorApiExecutorApiExecutorInitializePost_6Raw(
    requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/executor/api/executor/initialize`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ExecutorConfigRequestToJSON(
          requestParameters["executorConfigRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Initialize the executor with optional configuration.
   * Initialize Executor
   */
  async initializeExecutorApiExecutorApiExecutorInitializePost_6(
    requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePost0Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.initializeExecutorApiExecutorApiExecutorInitializePost_6Raw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Shutdown the executor.
   * Shutdown Executor
   */
  async shutdownExecutorApiExecutorApiExecutorShutdownPostRaw(
    requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    if (requestParameters["wait"] != null) {
      queryParameters["wait"] = requestParameters["wait"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/executor/api/executor/shutdown`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Shutdown the executor.
   * Shutdown Executor
   */
  async shutdownExecutorApiExecutorApiExecutorShutdownPost(
    requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.shutdownExecutorApiExecutorApiExecutorShutdownPostRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Shutdown the executor.
   * Shutdown Executor
   */
  async shutdownExecutorApiExecutorApiExecutorShutdownPost_7Raw(
    requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    if (requestParameters["wait"] != null) {
      queryParameters["wait"] = requestParameters["wait"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/executor/api/executor/shutdown`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Shutdown the executor.
   * Shutdown Executor
   */
  async shutdownExecutorApiExecutorApiExecutorShutdownPost_7(
    requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPost0Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.shutdownExecutorApiExecutorApiExecutorShutdownPost_7Raw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }
}
