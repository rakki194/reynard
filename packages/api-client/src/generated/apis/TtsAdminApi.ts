/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  TTSStatsResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TTSStatsResponseFromJSON,
    TTSStatsResponseToJSON,
} from '../models/index';

export interface ReloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRequest {
    backendName: string;
}

/**
 * TtsAdminApi - interface
 * 
 * @export
 * @interface TtsAdminApiInterface
 */
export interface TtsAdminApiInterface {
    /**
     * Clean up old audio files.
     * @summary Cleanup Audio Files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsAdminApiInterface
     */
    cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    cleanupAudioFilesApiTtsApiTtsAdminCleanupPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get list of available TTS backends.
     * @summary Get Available Backends
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsAdminApiInterface
     */
    getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    getAvailableBackendsApiTtsApiTtsAdminBackendsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get TTS service statistics.
     * @summary Get Tts Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsAdminApiInterface
     */
    getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSStatsResponse>>;

    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    getTtsStatsApiTtsApiTtsAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSStatsResponse>;

    /**
     * Perform TTS service health check.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsAdminApiInterface
     */
    healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Perform TTS service health check.
     * Health Check
     */
    healthCheckApiTtsApiTtsAdminHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Reload a specific TTS backend.
     * @summary Reload Backend
     * @param {string} backendName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsAdminApiInterface
     */
    reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw(requestParameters: ReloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost(requestParameters: ReloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class TtsAdminApi extends runtime.BaseAPI implements TtsAdminApiInterface {

    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    async cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/admin/cleanup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    async cleanupAudioFilesApiTtsApiTtsAdminCleanupPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    async getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/admin/backends`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    async getAvailableBackendsApiTtsApiTtsAdminBackendsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    async getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TTSStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/admin/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TTSStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    async getTtsStatsApiTtsApiTtsAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TTSStatsResponse> {
        const response = await this.getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Perform TTS service health check.
     * Health Check
     */
    async healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/admin/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Perform TTS service health check.
     * Health Check
     */
    async healthCheckApiTtsApiTtsAdminHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    async reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw(requestParameters: ReloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['backendName'] == null) {
            throw new runtime.RequiredError(
                'backendName',
                'Required parameter "backendName" was null or undefined when calling reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tts/api/tts/admin/backends/{backend_name}/reload`;
        urlPath = urlPath.replace(`{${"backend_name"}}`, encodeURIComponent(String(requestParameters['backendName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    async reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost(requestParameters: ReloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
