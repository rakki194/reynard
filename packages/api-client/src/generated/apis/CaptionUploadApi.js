/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { CaptionResponseFromJSON, } from "../models/index";
/**
 *
 */
export class CaptionUploadApi extends runtime.BaseAPI {
    /**
     * Upload an image and generate a caption for it.
     * Upload And Generate Caption
     */
    async uploadAndGenerateCaptionApiCaptionUploadPostRaw(requestParameters, initOverrides) {
        if (requestParameters["file"] == null) {
            throw new runtime.RequiredError("file", 'Required parameter "file" was null or undefined when calling uploadAndGenerateCaptionApiCaptionUploadPost().');
        }
        if (requestParameters["generatorName"] == null) {
            throw new runtime.RequiredError("generatorName", 'Required parameter "generatorName" was null or undefined when calling uploadAndGenerateCaptionApiCaptionUploadPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const consumes = [{ contentType: "multipart/form-data" }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters["file"] != null) {
            formParams.append("file", requestParameters["file"]);
        }
        if (requestParameters["generatorName"] != null) {
            formParams.append("generator_name", requestParameters["generatorName"]);
        }
        if (requestParameters["config"] != null) {
            formParams.append("config", requestParameters["config"]);
        }
        if (requestParameters["force"] != null) {
            formParams.append("force", requestParameters["force"]);
        }
        if (requestParameters["postProcess"] != null) {
            formParams.append("post_process", requestParameters["postProcess"]);
        }
        let urlPath = `/api/caption/upload`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => CaptionResponseFromJSON(jsonValue));
    }
    /**
     * Upload an image and generate a caption for it.
     * Upload And Generate Caption
     */
    async uploadAndGenerateCaptionApiCaptionUploadPost(requestParameters, initOverrides) {
        const response = await this.uploadAndGenerateCaptionApiCaptionUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
