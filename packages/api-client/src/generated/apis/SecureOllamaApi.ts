/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  SecureChatRequest,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SecureChatRequestFromJSON,
    SecureChatRequestToJSON,
} from '../models/index';

export interface SecureChatApiSecureOllamaChatPostRequest {
    secureChatRequest: SecureChatRequest;
}

/**
 * SecureOllamaApi - interface
 * 
 * @export
 * @interface SecureOllamaApiInterface
 */
export interface SecureOllamaApiInterface {
    /**
     * Secure chat endpoint with input validation and authentication.
     * @summary Secure Chat
     * @param {SecureChatRequest} secureChatRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureOllamaApiInterface
     */
    secureChatApiSecureOllamaChatPostRaw(requestParameters: SecureChatApiSecureOllamaChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Secure chat endpoint with input validation and authentication.
     * Secure Chat
     */
    secureChatApiSecureOllamaChatPost(requestParameters: SecureChatApiSecureOllamaChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Secure config endpoint with authentication.
     * @summary Secure Get Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureOllamaApiInterface
     */
    secureGetConfigApiSecureOllamaConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Secure config endpoint with authentication.
     * Secure Get Config
     */
    secureGetConfigApiSecureOllamaConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Secure models endpoint with authentication.
     * @summary Secure Get Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureOllamaApiInterface
     */
    secureGetModelsApiSecureOllamaModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Secure models endpoint with authentication.
     * Secure Get Models
     */
    secureGetModelsApiSecureOllamaModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class SecureOllamaApi extends runtime.BaseAPI implements SecureOllamaApiInterface {

    /**
     * Secure chat endpoint with input validation and authentication.
     * Secure Chat
     */
    async secureChatApiSecureOllamaChatPostRaw(requestParameters: SecureChatApiSecureOllamaChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['secureChatRequest'] == null) {
            throw new runtime.RequiredError(
                'secureChatRequest',
                'Required parameter "secureChatRequest" was null or undefined when calling secureChatApiSecureOllamaChatPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/secure/ollama/chat`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecureChatRequestToJSON(requestParameters['secureChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Secure chat endpoint with input validation and authentication.
     * Secure Chat
     */
    async secureChatApiSecureOllamaChatPost(requestParameters: SecureChatApiSecureOllamaChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.secureChatApiSecureOllamaChatPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Secure config endpoint with authentication.
     * Secure Get Config
     */
    async secureGetConfigApiSecureOllamaConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/secure/ollama/config`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Secure config endpoint with authentication.
     * Secure Get Config
     */
    async secureGetConfigApiSecureOllamaConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.secureGetConfigApiSecureOllamaConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Secure models endpoint with authentication.
     * Secure Get Models
     */
    async secureGetModelsApiSecureOllamaModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/secure/ollama/models`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Secure models endpoint with authentication.
     * Secure Get Models
     */
    async secureGetModelsApiSecureOllamaModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.secureGetModelsApiSecureOllamaModelsGetRaw(initOverrides);
        return await response.value();
    }

}
