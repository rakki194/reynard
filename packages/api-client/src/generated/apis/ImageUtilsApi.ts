/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AspectRatioResponse,
  HTTPValidationError,
  ImageDimensionsRequest,
  ImageFormatResponse,
  ImageProcessingServiceInfoResponse,
  ImageValidationRequest,
  ResizeDimensionsRequest,
  ResizeDimensionsResponse,
  ValidationResponse,
} from "../models/index";
import {
  AspectRatioResponseFromJSON,
  AspectRatioResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  ImageDimensionsRequestFromJSON,
  ImageDimensionsRequestToJSON,
  ImageFormatResponseFromJSON,
  ImageFormatResponseToJSON,
  ImageProcessingServiceInfoResponseFromJSON,
  ImageProcessingServiceInfoResponseToJSON,
  ImageValidationRequestFromJSON,
  ImageValidationRequestToJSON,
  ResizeDimensionsRequestFromJSON,
  ResizeDimensionsRequestToJSON,
  ResizeDimensionsResponseFromJSON,
  ResizeDimensionsResponseToJSON,
  ValidationResponseFromJSON,
  ValidationResponseToJSON,
} from "../models/index";

export interface CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPostRequest {
  resizeDimensionsRequest: ResizeDimensionsRequest;
}

export interface CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost0Request {
  resizeDimensionsRequest: ResizeDimensionsRequest;
}

export interface CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost1Request {
  resizeDimensionsRequest: ResizeDimensionsRequest;
}

export interface GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPostRequest {
  imageDimensionsRequest: ImageDimensionsRequest;
}

export interface GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost0Request {
  imageDimensionsRequest: ImageDimensionsRequest;
}

export interface GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost1Request {
  imageDimensionsRequest: ImageDimensionsRequest;
}

export interface GetDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGetRequest {
  modelType: string;
}

export interface GetDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet0Request {
  modelType: string;
}

export interface GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGetRequest {
  extension: string;
}

export interface GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet0Request {
  extension: string;
}

export interface GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet1Request {
  extension: string;
}

export interface ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPostRequest {
  imageDimensionsRequest: ImageDimensionsRequest;
}

export interface ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost0Request {
  imageDimensionsRequest: ImageDimensionsRequest;
}

export interface ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost1Request {
  imageDimensionsRequest: ImageDimensionsRequest;
}

export interface ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPostRequest {
  imageValidationRequest: ImageValidationRequest;
}

export interface ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost0Request {
  imageValidationRequest: ImageValidationRequest;
}

export interface ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost1Request {
  imageValidationRequest: ImageValidationRequest;
}

/**
 * ImageUtilsApi - interface
 *
 * @export
 * @interface ImageUtilsApiInterface
 */
export interface ImageUtilsApiInterface {
  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * @summary Calculate Resize Dimensions
   * @param {ResizeDimensionsRequest} resizeDimensionsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPostRaw(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResizeDimensionsResponse>>;

  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * Calculate Resize Dimensions
   */
  calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResizeDimensionsResponse>;

  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * @summary Calculate Resize Dimensions
   * @param {ResizeDimensionsRequest} resizeDimensionsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_1Raw(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResizeDimensionsResponse>>;

  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * Calculate Resize Dimensions
   */
  calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_1(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResizeDimensionsResponse>;

  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * @summary Calculate Resize Dimensions
   * @param {ResizeDimensionsRequest} resizeDimensionsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_2Raw(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResizeDimensionsResponse>>;

  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * Calculate Resize Dimensions
   */
  calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_2(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResizeDimensionsResponse>;

  /**
   * Calculate aspect ratio for given dimensions.
   * @summary Get Aspect Ratio
   * @param {ImageDimensionsRequest} imageDimensionsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPostRaw(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AspectRatioResponse>>;

  /**
   * Calculate aspect ratio for given dimensions.
   * Get Aspect Ratio
   */
  getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AspectRatioResponse>;

  /**
   * Calculate aspect ratio for given dimensions.
   * @summary Get Aspect Ratio
   * @param {ImageDimensionsRequest} imageDimensionsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_3Raw(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AspectRatioResponse>>;

  /**
   * Calculate aspect ratio for given dimensions.
   * Get Aspect Ratio
   */
  getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_3(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AspectRatioResponse>;

  /**
   * Calculate aspect ratio for given dimensions.
   * @summary Get Aspect Ratio
   * @param {ImageDimensionsRequest} imageDimensionsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_4Raw(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AspectRatioResponse>>;

  /**
   * Calculate aspect ratio for given dimensions.
   * Get Aspect Ratio
   */
  getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_4(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AspectRatioResponse>;

  /**
   * Get default normalization values for a model type.
   * @summary Get Default Normalization
   * @param {string} modelType
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGetRaw(
    requestParameters: GetDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get default normalization values for a model type.
   * Get Default Normalization
   */
  getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet(
    requestParameters: GetDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get default normalization values for a model type.
   * @summary Get Default Normalization
   * @param {string} modelType
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet_5Raw(
    requestParameters: GetDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get default normalization values for a model type.
   * Get Default Normalization
   */
  getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet_5(
    requestParameters: GetDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Get format information for a specific extension.
   * @summary Get Format Info
   * @param {string} extension
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGetRaw(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageFormatResponse>>;

  /**
   * Get format information for a specific extension.
   * Get Format Info
   */
  getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageFormatResponse>;

  /**
   * Get format information for a specific extension.
   * @summary Get Format Info
   * @param {string} extension
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_6Raw(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageFormatResponse>>;

  /**
   * Get format information for a specific extension.
   * Get Format Info
   */
  getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_6(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageFormatResponse>;

  /**
   * Get format information for a specific extension.
   * @summary Get Format Info
   * @param {string} extension
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_7Raw(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageFormatResponse>>;

  /**
   * Get format information for a specific extension.
   * Get Format Info
   */
  getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_7(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageFormatResponse>;

  /**
   * Get image processing service information.
   * @summary Get Service Info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageProcessingServiceInfoResponse>>;

  /**
   * Get image processing service information.
   * Get Service Info
   */
  getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageProcessingServiceInfoResponse>;

  /**
   * Get image processing service information.
   * @summary Get Service Info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_8Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageProcessingServiceInfoResponse>>;

  /**
   * Get image processing service information.
   * Get Service Info
   */
  getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_8(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageProcessingServiceInfoResponse>;

  /**
   * Get image processing service information.
   * @summary Get Service Info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_9Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageProcessingServiceInfoResponse>>;

  /**
   * Get image processing service information.
   * Get Service Info
   */
  getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_9(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageProcessingServiceInfoResponse>;

  /**
   * Get list of supported image formats.
   * @summary Get Supported Formats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string | null>>>;

  /**
   * Get list of supported image formats.
   * Get Supported Formats
   */
  getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string | null>>;

  /**
   * Get list of supported image formats.
   * @summary Get Supported Formats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_10Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string | null>>>;

  /**
   * Get list of supported image formats.
   * Get Supported Formats
   */
  getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_10(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string | null>>;

  /**
   * Get list of supported image formats.
   * @summary Get Supported Formats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_11Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string | null>>>;

  /**
   * Get list of supported image formats.
   * Get Supported Formats
   */
  getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_11(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string | null>>;

  /**
   * Health check endpoint for the image utils service.
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  healthCheckApiImageUtilsApiImageUtilsHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Health check endpoint for the image utils service.
   * Health Check
   */
  healthCheckApiImageUtilsApiImageUtilsHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Health check endpoint for the image utils service.
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  healthCheckApiImageUtilsApiImageUtilsHealthGet_12Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Health check endpoint for the image utils service.
   * Health Check
   */
  healthCheckApiImageUtilsApiImageUtilsHealthGet_12(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Check if AVIF format is supported.
   * @summary Is Avif Supported
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Check if AVIF format is supported.
   * Is Avif Supported
   */
  isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Check if AVIF format is supported.
   * @summary Is Avif Supported
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet_13Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Check if AVIF format is supported.
   * Is Avif Supported
   */
  isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet_13(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Check if JXL format is supported.
   * @summary Is Jxl Supported
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Check if JXL format is supported.
   * Is Jxl Supported
   */
  isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Check if JXL format is supported.
   * @summary Is Jxl Supported
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet_14Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Check if JXL format is supported.
   * Is Jxl Supported
   */
  isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet_14(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Validate image dimensions.
   * @summary Validate Dimensions
   * @param {ImageDimensionsRequest} imageDimensionsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPostRaw(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>>;

  /**
   * Validate image dimensions.
   * Validate Dimensions
   */
  validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse>;

  /**
   * Validate image dimensions.
   * @summary Validate Dimensions
   * @param {ImageDimensionsRequest} imageDimensionsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_15Raw(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>>;

  /**
   * Validate image dimensions.
   * Validate Dimensions
   */
  validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_15(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse>;

  /**
   * Validate image dimensions.
   * @summary Validate Dimensions
   * @param {ImageDimensionsRequest} imageDimensionsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_16Raw(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>>;

  /**
   * Validate image dimensions.
   * Validate Dimensions
   */
  validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_16(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse>;

  /**
   * Validate an image file path.
   * @summary Validate Image Path
   * @param {ImageValidationRequest} imageValidationRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPostRaw(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>>;

  /**
   * Validate an image file path.
   * Validate Image Path
   */
  validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse>;

  /**
   * Validate an image file path.
   * @summary Validate Image Path
   * @param {ImageValidationRequest} imageValidationRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_17Raw(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>>;

  /**
   * Validate an image file path.
   * Validate Image Path
   */
  validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_17(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse>;

  /**
   * Validate an image file path.
   * @summary Validate Image Path
   * @param {ImageValidationRequest} imageValidationRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImageUtilsApiInterface
   */
  validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_18Raw(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>>;

  /**
   * Validate an image file path.
   * Validate Image Path
   */
  validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_18(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse>;
}

/**
 *
 */
export class ImageUtilsApi extends runtime.BaseAPI implements ImageUtilsApiInterface {
  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * Calculate Resize Dimensions
   */
  async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPostRaw(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResizeDimensionsResponse>> {
    if (requestParameters["resizeDimensionsRequest"] == null) {
      throw new runtime.RequiredError(
        "resizeDimensionsRequest",
        'Required parameter "resizeDimensionsRequest" was null or undefined when calling calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/resize-dimensions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ResizeDimensionsRequestToJSON(requestParameters["resizeDimensionsRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ResizeDimensionsResponseFromJSON(jsonValue));
  }

  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * Calculate Resize Dimensions
   */
  async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResizeDimensionsResponse> {
    const response = await this.calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * Calculate Resize Dimensions
   */
  async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_1Raw(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResizeDimensionsResponse>> {
    if (requestParameters["resizeDimensionsRequest"] == null) {
      throw new runtime.RequiredError(
        "resizeDimensionsRequest",
        'Required parameter "resizeDimensionsRequest" was null or undefined when calling calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_1().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/resize-dimensions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ResizeDimensionsRequestToJSON(requestParameters["resizeDimensionsRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ResizeDimensionsResponseFromJSON(jsonValue));
  }

  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * Calculate Resize Dimensions
   */
  async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_1(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResizeDimensionsResponse> {
    const response =
      await this.calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_1Raw(
        requestParameters,
        initOverrides
      );
    return await response.value();
  }

  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * Calculate Resize Dimensions
   */
  async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_2Raw(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ResizeDimensionsResponse>> {
    if (requestParameters["resizeDimensionsRequest"] == null) {
      throw new runtime.RequiredError(
        "resizeDimensionsRequest",
        'Required parameter "resizeDimensionsRequest" was null or undefined when calling calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_2().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/resize-dimensions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ResizeDimensionsRequestToJSON(requestParameters["resizeDimensionsRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ResizeDimensionsResponseFromJSON(jsonValue));
  }

  /**
   * Calculate resize dimensions maintaining aspect ratio.
   * Calculate Resize Dimensions
   */
  async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_2(
    requestParameters: CalculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ResizeDimensionsResponse> {
    const response =
      await this.calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_2Raw(
        requestParameters,
        initOverrides
      );
    return await response.value();
  }

  /**
   * Calculate aspect ratio for given dimensions.
   * Get Aspect Ratio
   */
  async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPostRaw(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AspectRatioResponse>> {
    if (requestParameters["imageDimensionsRequest"] == null) {
      throw new runtime.RequiredError(
        "imageDimensionsRequest",
        'Required parameter "imageDimensionsRequest" was null or undefined when calling getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/aspect-ratio`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => AspectRatioResponseFromJSON(jsonValue));
  }

  /**
   * Calculate aspect ratio for given dimensions.
   * Get Aspect Ratio
   */
  async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AspectRatioResponse> {
    const response = await this.getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Calculate aspect ratio for given dimensions.
   * Get Aspect Ratio
   */
  async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_3Raw(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AspectRatioResponse>> {
    if (requestParameters["imageDimensionsRequest"] == null) {
      throw new runtime.RequiredError(
        "imageDimensionsRequest",
        'Required parameter "imageDimensionsRequest" was null or undefined when calling getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_3().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/aspect-ratio`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => AspectRatioResponseFromJSON(jsonValue));
  }

  /**
   * Calculate aspect ratio for given dimensions.
   * Get Aspect Ratio
   */
  async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_3(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AspectRatioResponse> {
    const response = await this.getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_3Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Calculate aspect ratio for given dimensions.
   * Get Aspect Ratio
   */
  async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_4Raw(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<AspectRatioResponse>> {
    if (requestParameters["imageDimensionsRequest"] == null) {
      throw new runtime.RequiredError(
        "imageDimensionsRequest",
        'Required parameter "imageDimensionsRequest" was null or undefined when calling getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_4().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/aspect-ratio`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => AspectRatioResponseFromJSON(jsonValue));
  }

  /**
   * Calculate aspect ratio for given dimensions.
   * Get Aspect Ratio
   */
  async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_4(
    requestParameters: GetAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<AspectRatioResponse> {
    const response = await this.getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_4Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get default normalization values for a model type.
   * Get Default Normalization
   */
  async getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGetRaw(
    requestParameters: GetDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["modelType"] == null) {
      throw new runtime.RequiredError(
        "modelType",
        'Required parameter "modelType" was null or undefined when calling getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/normalization/{model_type}`;
    urlPath = urlPath.replace(`{${"model_type"}}`, encodeURIComponent(String(requestParameters["modelType"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get default normalization values for a model type.
   * Get Default Normalization
   */
  async getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet(
    requestParameters: GetDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get default normalization values for a model type.
   * Get Default Normalization
   */
  async getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet_5Raw(
    requestParameters: GetDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["modelType"] == null) {
      throw new runtime.RequiredError(
        "modelType",
        'Required parameter "modelType" was null or undefined when calling getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet_5().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/normalization/{model_type}`;
    urlPath = urlPath.replace(`{${"model_type"}}`, encodeURIComponent(String(requestParameters["modelType"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get default normalization values for a model type.
   * Get Default Normalization
   */
  async getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet_5(
    requestParameters: GetDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet_5Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get format information for a specific extension.
   * Get Format Info
   */
  async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGetRaw(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageFormatResponse>> {
    if (requestParameters["extension"] == null) {
      throw new runtime.RequiredError(
        "extension",
        'Required parameter "extension" was null or undefined when calling getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/format/{extension}`;
    urlPath = urlPath.replace(`{${"extension"}}`, encodeURIComponent(String(requestParameters["extension"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ImageFormatResponseFromJSON(jsonValue));
  }

  /**
   * Get format information for a specific extension.
   * Get Format Info
   */
  async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageFormatResponse> {
    const response = await this.getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get format information for a specific extension.
   * Get Format Info
   */
  async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_6Raw(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageFormatResponse>> {
    if (requestParameters["extension"] == null) {
      throw new runtime.RequiredError(
        "extension",
        'Required parameter "extension" was null or undefined when calling getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_6().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/format/{extension}`;
    urlPath = urlPath.replace(`{${"extension"}}`, encodeURIComponent(String(requestParameters["extension"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ImageFormatResponseFromJSON(jsonValue));
  }

  /**
   * Get format information for a specific extension.
   * Get Format Info
   */
  async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_6(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageFormatResponse> {
    const response = await this.getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_6Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get format information for a specific extension.
   * Get Format Info
   */
  async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_7Raw(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageFormatResponse>> {
    if (requestParameters["extension"] == null) {
      throw new runtime.RequiredError(
        "extension",
        'Required parameter "extension" was null or undefined when calling getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_7().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/format/{extension}`;
    urlPath = urlPath.replace(`{${"extension"}}`, encodeURIComponent(String(requestParameters["extension"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ImageFormatResponseFromJSON(jsonValue));
  }

  /**
   * Get format information for a specific extension.
   * Get Format Info
   */
  async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_7(
    requestParameters: GetFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageFormatResponse> {
    const response = await this.getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_7Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get image processing service information.
   * Get Service Info
   */
  async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageProcessingServiceInfoResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/service-info`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ImageProcessingServiceInfoResponseFromJSON(jsonValue));
  }

  /**
   * Get image processing service information.
   * Get Service Info
   */
  async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageProcessingServiceInfoResponse> {
    const response = await this.getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get image processing service information.
   * Get Service Info
   */
  async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_8Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageProcessingServiceInfoResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/service-info`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ImageProcessingServiceInfoResponseFromJSON(jsonValue));
  }

  /**
   * Get image processing service information.
   * Get Service Info
   */
  async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_8(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageProcessingServiceInfoResponse> {
    const response = await this.getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_8Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get image processing service information.
   * Get Service Info
   */
  async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_9Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ImageProcessingServiceInfoResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/service-info`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ImageProcessingServiceInfoResponseFromJSON(jsonValue));
  }

  /**
   * Get image processing service information.
   * Get Service Info
   */
  async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_9(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ImageProcessingServiceInfoResponse> {
    const response = await this.getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_9Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get list of supported image formats.
   * Get Supported Formats
   */
  async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string | null>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/supported-formats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get list of supported image formats.
   * Get Supported Formats
   */
  async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string | null>> {
    const response =
      await this.getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get list of supported image formats.
   * Get Supported Formats
   */
  async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_10Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string | null>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/supported-formats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get list of supported image formats.
   * Get Supported Formats
   */
  async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_10(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string | null>> {
    const response =
      await this.getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_10Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get list of supported image formats.
   * Get Supported Formats
   */
  async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_11Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string | null>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/supported-formats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get list of supported image formats.
   * Get Supported Formats
   */
  async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_11(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string | null>> {
    const response =
      await this.getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_11Raw(initOverrides);
    return await response.value();
  }

  /**
   * Health check endpoint for the image utils service.
   * Health Check
   */
  async healthCheckApiImageUtilsApiImageUtilsHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Health check endpoint for the image utils service.
   * Health Check
   */
  async healthCheckApiImageUtilsApiImageUtilsHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.healthCheckApiImageUtilsApiImageUtilsHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Health check endpoint for the image utils service.
   * Health Check
   */
  async healthCheckApiImageUtilsApiImageUtilsHealthGet_12Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Health check endpoint for the image utils service.
   * Health Check
   */
  async healthCheckApiImageUtilsApiImageUtilsHealthGet_12(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.healthCheckApiImageUtilsApiImageUtilsHealthGet_12Raw(initOverrides);
    return await response.value();
  }

  /**
   * Check if AVIF format is supported.
   * Is Avif Supported
   */
  async isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/avif-supported`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Check if AVIF format is supported.
   * Is Avif Supported
   */
  async isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Check if AVIF format is supported.
   * Is Avif Supported
   */
  async isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet_13Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/avif-supported`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Check if AVIF format is supported.
   * Is Avif Supported
   */
  async isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet_13(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet_13Raw(initOverrides);
    return await response.value();
  }

  /**
   * Check if JXL format is supported.
   * Is Jxl Supported
   */
  async isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/jxl-supported`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Check if JXL format is supported.
   * Is Jxl Supported
   */
  async isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Check if JXL format is supported.
   * Is Jxl Supported
   */
  async isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet_14Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/image-utils/api/image-utils/jxl-supported`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Check if JXL format is supported.
   * Is Jxl Supported
   */
  async isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet_14(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet_14Raw(initOverrides);
    return await response.value();
  }

  /**
   * Validate image dimensions.
   * Validate Dimensions
   */
  async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPostRaw(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>> {
    if (requestParameters["imageDimensionsRequest"] == null) {
      throw new runtime.RequiredError(
        "imageDimensionsRequest",
        'Required parameter "imageDimensionsRequest" was null or undefined when calling validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-dimensions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
  }

  /**
   * Validate image dimensions.
   * Validate Dimensions
   */
  async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse> {
    const response = await this.validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Validate image dimensions.
   * Validate Dimensions
   */
  async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_15Raw(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>> {
    if (requestParameters["imageDimensionsRequest"] == null) {
      throw new runtime.RequiredError(
        "imageDimensionsRequest",
        'Required parameter "imageDimensionsRequest" was null or undefined when calling validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_15().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-dimensions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
  }

  /**
   * Validate image dimensions.
   * Validate Dimensions
   */
  async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_15(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse> {
    const response = await this.validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_15Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Validate image dimensions.
   * Validate Dimensions
   */
  async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_16Raw(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>> {
    if (requestParameters["imageDimensionsRequest"] == null) {
      throw new runtime.RequiredError(
        "imageDimensionsRequest",
        'Required parameter "imageDimensionsRequest" was null or undefined when calling validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_16().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-dimensions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
  }

  /**
   * Validate image dimensions.
   * Validate Dimensions
   */
  async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_16(
    requestParameters: ValidateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse> {
    const response = await this.validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_16Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Validate an image file path.
   * Validate Image Path
   */
  async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPostRaw(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>> {
    if (requestParameters["imageValidationRequest"] == null) {
      throw new runtime.RequiredError(
        "imageValidationRequest",
        'Required parameter "imageValidationRequest" was null or undefined when calling validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-path`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ImageValidationRequestToJSON(requestParameters["imageValidationRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
  }

  /**
   * Validate an image file path.
   * Validate Image Path
   */
  async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse> {
    const response = await this.validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Validate an image file path.
   * Validate Image Path
   */
  async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_17Raw(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>> {
    if (requestParameters["imageValidationRequest"] == null) {
      throw new runtime.RequiredError(
        "imageValidationRequest",
        'Required parameter "imageValidationRequest" was null or undefined when calling validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_17().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-path`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ImageValidationRequestToJSON(requestParameters["imageValidationRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
  }

  /**
   * Validate an image file path.
   * Validate Image Path
   */
  async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_17(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse> {
    const response = await this.validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_17Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Validate an image file path.
   * Validate Image Path
   */
  async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_18Raw(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ValidationResponse>> {
    if (requestParameters["imageValidationRequest"] == null) {
      throw new runtime.RequiredError(
        "imageValidationRequest",
        'Required parameter "imageValidationRequest" was null or undefined when calling validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_18().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-path`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ImageValidationRequestToJSON(requestParameters["imageValidationRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
  }

  /**
   * Validate an image file path.
   * Validate Image Path
   */
  async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_18(
    requestParameters: ValidateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ValidationResponse> {
    const response = await this.validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_18Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
