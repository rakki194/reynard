/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BatchCaptionRequest,
  CaptionRequest,
  CaptionResponse,
  GeneratorInfo,
  HTTPValidationError,
  ModelLoadRequest,
} from '../models/index';
import {
    BatchCaptionRequestFromJSON,
    BatchCaptionRequestToJSON,
    CaptionRequestFromJSON,
    CaptionRequestToJSON,
    CaptionResponseFromJSON,
    CaptionResponseToJSON,
    GeneratorInfoFromJSON,
    GeneratorInfoToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ModelLoadRequestFromJSON,
    ModelLoadRequestToJSON,
} from '../models/index';

export interface GenerateBatchCaptionsApiCaptionBatchPostRequest {
    batchCaptionRequest: BatchCaptionRequest;
}

export interface GenerateCaptionApiCaptionGeneratePostRequest {
    captionRequest: CaptionRequest;
}

export interface GetGeneratorInfoApiCaptionGeneratorsGeneratorNameGetRequest {
    generatorName: string;
}

export interface LoadModelApiCaptionModelsModelNameLoadPostRequest {
    modelName: string;
    modelLoadRequest: ModelLoadRequest;
}

export interface UnloadModelApiCaptionModelsModelNameUnloadPostRequest {
    modelName: string;
}

/**
 * CaptionApi - interface
 * 
 * @export
 * @interface CaptionApiInterface
 */
export interface CaptionApiInterface {
    /**
     * Generate captions for multiple images in batch.
     * @summary Generate Batch Captions
     * @param {BatchCaptionRequest} batchCaptionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptionApiInterface
     */
    generateBatchCaptionsApiCaptionBatchPostRaw(requestParameters: GenerateBatchCaptionsApiCaptionBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CaptionResponse>>>;

    /**
     * Generate captions for multiple images in batch.
     * Generate Batch Captions
     */
    generateBatchCaptionsApiCaptionBatchPost(requestParameters: GenerateBatchCaptionsApiCaptionBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CaptionResponse>>;

    /**
     * Generate a caption for a single image.
     * @summary Generate Caption
     * @param {CaptionRequest} captionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptionApiInterface
     */
    generateCaptionApiCaptionGeneratePostRaw(requestParameters: GenerateCaptionApiCaptionGeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CaptionResponse>>;

    /**
     * Generate a caption for a single image.
     * Generate Caption
     */
    generateCaptionApiCaptionGeneratePost(requestParameters: GenerateCaptionApiCaptionGeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CaptionResponse>;

    /**
     * Get information about all available caption generators.
     * @summary Get Available Generators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptionApiInterface
     */
    getAvailableGeneratorsApiCaptionGeneratorsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GeneratorInfo; }>>;

    /**
     * Get information about all available caption generators.
     * Get Available Generators
     */
    getAvailableGeneratorsApiCaptionGeneratorsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GeneratorInfo; }>;

    /**
     * Get information about a specific caption generator.
     * @summary Get Generator Info
     * @param {string} generatorName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptionApiInterface
     */
    getGeneratorInfoApiCaptionGeneratorsGeneratorNameGetRaw(requestParameters: GetGeneratorInfoApiCaptionGeneratorsGeneratorNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneratorInfo>>;

    /**
     * Get information about a specific caption generator.
     * Get Generator Info
     */
    getGeneratorInfoApiCaptionGeneratorsGeneratorNameGet(requestParameters: GetGeneratorInfoApiCaptionGeneratorsGeneratorNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneratorInfo>;

    /**
     * Get list of currently loaded models.
     * @summary Get Loaded Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptionApiInterface
     */
    getLoadedModelsApiCaptionModelsLoadedGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get list of currently loaded models.
     * Get Loaded Models
     */
    getLoadedModelsApiCaptionModelsLoadedGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Load a specific caption model.
     * @summary Load Model
     * @param {string} modelName 
     * @param {ModelLoadRequest} modelLoadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptionApiInterface
     */
    loadModelApiCaptionModelsModelNameLoadPostRaw(requestParameters: LoadModelApiCaptionModelsModelNameLoadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Load a specific caption model.
     * Load Model
     */
    loadModelApiCaptionModelsModelNameLoadPost(requestParameters: LoadModelApiCaptionModelsModelNameLoadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Unload a specific caption model.
     * @summary Unload Model
     * @param {string} modelName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptionApiInterface
     */
    unloadModelApiCaptionModelsModelNameUnloadPostRaw(requestParameters: UnloadModelApiCaptionModelsModelNameUnloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Unload a specific caption model.
     * Unload Model
     */
    unloadModelApiCaptionModelsModelNameUnloadPost(requestParameters: UnloadModelApiCaptionModelsModelNameUnloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class CaptionApi extends runtime.BaseAPI implements CaptionApiInterface {

    /**
     * Generate captions for multiple images in batch.
     * Generate Batch Captions
     */
    async generateBatchCaptionsApiCaptionBatchPostRaw(requestParameters: GenerateBatchCaptionsApiCaptionBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CaptionResponse>>> {
        if (requestParameters['batchCaptionRequest'] == null) {
            throw new runtime.RequiredError(
                'batchCaptionRequest',
                'Required parameter "batchCaptionRequest" was null or undefined when calling generateBatchCaptionsApiCaptionBatchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/caption/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BatchCaptionRequestToJSON(requestParameters['batchCaptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CaptionResponseFromJSON));
    }

    /**
     * Generate captions for multiple images in batch.
     * Generate Batch Captions
     */
    async generateBatchCaptionsApiCaptionBatchPost(requestParameters: GenerateBatchCaptionsApiCaptionBatchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CaptionResponse>> {
        const response = await this.generateBatchCaptionsApiCaptionBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a caption for a single image.
     * Generate Caption
     */
    async generateCaptionApiCaptionGeneratePostRaw(requestParameters: GenerateCaptionApiCaptionGeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CaptionResponse>> {
        if (requestParameters['captionRequest'] == null) {
            throw new runtime.RequiredError(
                'captionRequest',
                'Required parameter "captionRequest" was null or undefined when calling generateCaptionApiCaptionGeneratePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/caption/generate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CaptionRequestToJSON(requestParameters['captionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptionResponseFromJSON(jsonValue));
    }

    /**
     * Generate a caption for a single image.
     * Generate Caption
     */
    async generateCaptionApiCaptionGeneratePost(requestParameters: GenerateCaptionApiCaptionGeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CaptionResponse> {
        const response = await this.generateCaptionApiCaptionGeneratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about all available caption generators.
     * Get Available Generators
     */
    async getAvailableGeneratorsApiCaptionGeneratorsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: GeneratorInfo; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/caption/generators`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, GeneratorInfoFromJSON));
    }

    /**
     * Get information about all available caption generators.
     * Get Available Generators
     */
    async getAvailableGeneratorsApiCaptionGeneratorsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: GeneratorInfo; }> {
        const response = await this.getAvailableGeneratorsApiCaptionGeneratorsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get information about a specific caption generator.
     * Get Generator Info
     */
    async getGeneratorInfoApiCaptionGeneratorsGeneratorNameGetRaw(requestParameters: GetGeneratorInfoApiCaptionGeneratorsGeneratorNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneratorInfo>> {
        if (requestParameters['generatorName'] == null) {
            throw new runtime.RequiredError(
                'generatorName',
                'Required parameter "generatorName" was null or undefined when calling getGeneratorInfoApiCaptionGeneratorsGeneratorNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/caption/generators/{generator_name}`;
        urlPath = urlPath.replace(`{${"generator_name"}}`, encodeURIComponent(String(requestParameters['generatorName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneratorInfoFromJSON(jsonValue));
    }

    /**
     * Get information about a specific caption generator.
     * Get Generator Info
     */
    async getGeneratorInfoApiCaptionGeneratorsGeneratorNameGet(requestParameters: GetGeneratorInfoApiCaptionGeneratorsGeneratorNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneratorInfo> {
        const response = await this.getGeneratorInfoApiCaptionGeneratorsGeneratorNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of currently loaded models.
     * Get Loaded Models
     */
    async getLoadedModelsApiCaptionModelsLoadedGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/caption/models/loaded`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get list of currently loaded models.
     * Get Loaded Models
     */
    async getLoadedModelsApiCaptionModelsLoadedGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getLoadedModelsApiCaptionModelsLoadedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Load a specific caption model.
     * Load Model
     */
    async loadModelApiCaptionModelsModelNameLoadPostRaw(requestParameters: LoadModelApiCaptionModelsModelNameLoadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling loadModelApiCaptionModelsModelNameLoadPost().'
            );
        }

        if (requestParameters['modelLoadRequest'] == null) {
            throw new runtime.RequiredError(
                'modelLoadRequest',
                'Required parameter "modelLoadRequest" was null or undefined when calling loadModelApiCaptionModelsModelNameLoadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/caption/models/{model_name}/load`;
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelLoadRequestToJSON(requestParameters['modelLoadRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Load a specific caption model.
     * Load Model
     */
    async loadModelApiCaptionModelsModelNameLoadPost(requestParameters: LoadModelApiCaptionModelsModelNameLoadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loadModelApiCaptionModelsModelNameLoadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unload a specific caption model.
     * Unload Model
     */
    async unloadModelApiCaptionModelsModelNameUnloadPostRaw(requestParameters: UnloadModelApiCaptionModelsModelNameUnloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling unloadModelApiCaptionModelsModelNameUnloadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/caption/models/{model_name}/unload`;
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Unload a specific caption model.
     * Unload Model
     */
    async unloadModelApiCaptionModelsModelNameUnloadPost(requestParameters: UnloadModelApiCaptionModelsModelNameUnloadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.unloadModelApiCaptionModelsModelNameUnloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
