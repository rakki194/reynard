/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MCPClientResponse,
  MCPStatsResponse,
  MCPTokenRequest,
  MCPTokenResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MCPClientResponseFromJSON,
    MCPClientResponseToJSON,
    MCPStatsResponseFromJSON,
    MCPStatsResponseToJSON,
    MCPTokenRequestFromJSON,
    MCPTokenRequestToJSON,
    MCPTokenResponseFromJSON,
    MCPTokenResponseToJSON,
} from '../models/index';

export interface GenerateMcpTokenApiMcpTokenPostRequest {
    mCPTokenRequest: MCPTokenRequest;
}

export interface GetMcpClientInfoApiMcpClientClientIdGetRequest {
    clientId: string;
}

/**
 * McpApi - interface
 * 
 * @export
 * @interface McpApiInterface
 */
export interface McpApiInterface {
    /**
     * Generate a new MCP token for a client.  Requires mcp:admin permission.
     * @summary Generate Mcp Token
     * @param {MCPTokenRequest} mCPTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpApiInterface
     */
    generateMcpTokenApiMcpTokenPostRaw(requestParameters: GenerateMcpTokenApiMcpTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MCPTokenResponse>>;

    /**
     * Generate a new MCP token for a client.  Requires mcp:admin permission.
     * Generate Mcp Token
     */
    generateMcpTokenApiMcpTokenPost(requestParameters: GenerateMcpTokenApiMcpTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MCPTokenResponse>;

    /**
     * Get information about a specific MCP client.  Requires mcp:admin permission.
     * @summary Get Mcp Client Info
     * @param {string} clientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpApiInterface
     */
    getMcpClientInfoApiMcpClientClientIdGetRaw(requestParameters: GetMcpClientInfoApiMcpClientClientIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MCPClientResponse>>;

    /**
     * Get information about a specific MCP client.  Requires mcp:admin permission.
     * Get Mcp Client Info
     */
    getMcpClientInfoApiMcpClientClientIdGet(requestParameters: GetMcpClientInfoApiMcpClientClientIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MCPClientResponse>;

    /**
     * Get MCP system statistics.  Requires mcp:admin permission.
     * @summary Get Mcp Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpApiInterface
     */
    getMcpStatsApiMcpStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MCPStatsResponse>>;

    /**
     * Get MCP system statistics.  Requires mcp:admin permission.
     * Get Mcp Stats
     */
    getMcpStatsApiMcpStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MCPStatsResponse>;

    /**
     * List all MCP clients.  Requires mcp:admin permission.
     * @summary List Mcp Clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpApiInterface
     */
    listMcpClientsApiMcpClientsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MCPClientResponse>>>;

    /**
     * List all MCP clients.  Requires mcp:admin permission.
     * List Mcp Clients
     */
    listMcpClientsApiMcpClientsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MCPClientResponse>>;

    /**
     * Validate current MCP token and return client information.  No special permissions required - just valid token.
     * @summary Validate Mcp Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpApiInterface
     */
    validateMcpTokenApiMcpValidateGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Validate current MCP token and return client information.  No special permissions required - just valid token.
     * Validate Mcp Token
     */
    validateMcpTokenApiMcpValidateGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class McpApi extends runtime.BaseAPI implements McpApiInterface {

    /**
     * Generate a new MCP token for a client.  Requires mcp:admin permission.
     * Generate Mcp Token
     */
    async generateMcpTokenApiMcpTokenPostRaw(requestParameters: GenerateMcpTokenApiMcpTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MCPTokenResponse>> {
        if (requestParameters['mCPTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'mCPTokenRequest',
                'Required parameter "mCPTokenRequest" was null or undefined when calling generateMcpTokenApiMcpTokenPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/mcp/token`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MCPTokenRequestToJSON(requestParameters['mCPTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MCPTokenResponseFromJSON(jsonValue));
    }

    /**
     * Generate a new MCP token for a client.  Requires mcp:admin permission.
     * Generate Mcp Token
     */
    async generateMcpTokenApiMcpTokenPost(requestParameters: GenerateMcpTokenApiMcpTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MCPTokenResponse> {
        const response = await this.generateMcpTokenApiMcpTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about a specific MCP client.  Requires mcp:admin permission.
     * Get Mcp Client Info
     */
    async getMcpClientInfoApiMcpClientClientIdGetRaw(requestParameters: GetMcpClientInfoApiMcpClientClientIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MCPClientResponse>> {
        if (requestParameters['clientId'] == null) {
            throw new runtime.RequiredError(
                'clientId',
                'Required parameter "clientId" was null or undefined when calling getMcpClientInfoApiMcpClientClientIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/mcp/client/{client_id}`;
        urlPath = urlPath.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters['clientId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MCPClientResponseFromJSON(jsonValue));
    }

    /**
     * Get information about a specific MCP client.  Requires mcp:admin permission.
     * Get Mcp Client Info
     */
    async getMcpClientInfoApiMcpClientClientIdGet(requestParameters: GetMcpClientInfoApiMcpClientClientIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MCPClientResponse> {
        const response = await this.getMcpClientInfoApiMcpClientClientIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get MCP system statistics.  Requires mcp:admin permission.
     * Get Mcp Stats
     */
    async getMcpStatsApiMcpStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MCPStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/mcp/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MCPStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get MCP system statistics.  Requires mcp:admin permission.
     * Get Mcp Stats
     */
    async getMcpStatsApiMcpStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MCPStatsResponse> {
        const response = await this.getMcpStatsApiMcpStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all MCP clients.  Requires mcp:admin permission.
     * List Mcp Clients
     */
    async listMcpClientsApiMcpClientsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MCPClientResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/mcp/clients`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MCPClientResponseFromJSON));
    }

    /**
     * List all MCP clients.  Requires mcp:admin permission.
     * List Mcp Clients
     */
    async listMcpClientsApiMcpClientsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MCPClientResponse>> {
        const response = await this.listMcpClientsApiMcpClientsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Validate current MCP token and return client information.  No special permissions required - just valid token.
     * Validate Mcp Token
     */
    async validateMcpTokenApiMcpValidateGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/mcp/validate`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Validate current MCP token and return client information.  No special permissions required - just valid token.
     * Validate Mcp Token
     */
    async validateMcpTokenApiMcpValidateGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.validateMcpTokenApiMcpValidateGetRaw(initOverrides);
        return await response.value();
    }

}
