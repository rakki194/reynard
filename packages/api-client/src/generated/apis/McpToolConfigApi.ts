/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ToolConfigListResponse,
  ToolConfigResponse,
  ToolConfigUpdateRequest,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ToolConfigListResponseFromJSON,
    ToolConfigListResponseToJSON,
    ToolConfigResponseFromJSON,
    ToolConfigResponseToJSON,
    ToolConfigUpdateRequestFromJSON,
    ToolConfigUpdateRequestToJSON,
} from '../models/index';

export interface DisableToolApiMcpToolConfigToolNameDisablePostRequest {
    toolName: string;
}

export interface EnableToolApiMcpToolConfigToolNameEnablePostRequest {
    toolName: string;
}

export interface GetToolConfigurationApiMcpToolConfigToolNameGetRequest {
    toolName: string;
}

export interface GetToolsByCategoryApiMcpToolConfigCategoryCategoryGetRequest {
    category: string;
}

export interface ToggleToolApiMcpToolConfigToolNameTogglePostRequest {
    toolName: string;
}

export interface UpdateToolConfigurationApiMcpToolConfigToolNamePutRequest {
    toolName: string;
    toolConfigUpdateRequest: ToolConfigUpdateRequest;
}

/**
 * McpToolConfigApi - interface
 * 
 * @export
 * @interface McpToolConfigApiInterface
 */
export interface McpToolConfigApiInterface {
    /**
     * Disable a specific tool.  Disables the specified tool if it\'s currently enabled.
     * @summary Disable Tool
     * @param {string} toolName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpToolConfigApiInterface
     */
    disableToolApiMcpToolConfigToolNameDisablePostRaw(requestParameters: DisableToolApiMcpToolConfigToolNameDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigResponse>>;

    /**
     * Disable a specific tool.  Disables the specified tool if it\'s currently enabled.
     * Disable Tool
     */
    disableToolApiMcpToolConfigToolNameDisablePost(requestParameters: DisableToolApiMcpToolConfigToolNameDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigResponse>;

    /**
     * Enable a specific tool.  Enables the specified tool if it\'s currently disabled.
     * @summary Enable Tool
     * @param {string} toolName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpToolConfigApiInterface
     */
    enableToolApiMcpToolConfigToolNameEnablePostRaw(requestParameters: EnableToolApiMcpToolConfigToolNameEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigResponse>>;

    /**
     * Enable a specific tool.  Enables the specified tool if it\'s currently disabled.
     * Enable Tool
     */
    enableToolApiMcpToolConfigToolNameEnablePost(requestParameters: EnableToolApiMcpToolConfigToolNameEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigResponse>;

    /**
     * Get configuration for a specific tool.  Returns the configuration and status for the specified tool.
     * @summary Get Tool Configuration
     * @param {string} toolName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpToolConfigApiInterface
     */
    getToolConfigurationApiMcpToolConfigToolNameGetRaw(requestParameters: GetToolConfigurationApiMcpToolConfigToolNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigResponse>>;

    /**
     * Get configuration for a specific tool.  Returns the configuration and status for the specified tool.
     * Get Tool Configuration
     */
    getToolConfigurationApiMcpToolConfigToolNameGet(requestParameters: GetToolConfigurationApiMcpToolConfigToolNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigResponse>;

    /**
     * Get all tool configurations.  Returns the current state of all MCP tools including their enabled/disabled status.
     * @summary Get Tool Configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpToolConfigApiInterface
     */
    getToolConfigurationsApiMcpToolConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigListResponse>>;

    /**
     * Get all tool configurations.  Returns the current state of all MCP tools including their enabled/disabled status.
     * Get Tool Configurations
     */
    getToolConfigurationsApiMcpToolConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigListResponse>;

    /**
     * Get all tools in a specific category.  Returns all tools that belong to the specified category.
     * @summary Get Tools By Category
     * @param {string} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpToolConfigApiInterface
     */
    getToolsByCategoryApiMcpToolConfigCategoryCategoryGetRaw(requestParameters: GetToolsByCategoryApiMcpToolConfigCategoryCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: ToolConfigResponse; }>>;

    /**
     * Get all tools in a specific category.  Returns all tools that belong to the specified category.
     * Get Tools By Category
     */
    getToolsByCategoryApiMcpToolConfigCategoryCategoryGet(requestParameters: GetToolsByCategoryApiMcpToolConfigCategoryCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: ToolConfigResponse; }>;

    /**
     * Toggle the enabled state of a tool.  Switches the enabled/disabled state of the specified tool.
     * @summary Toggle Tool
     * @param {string} toolName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpToolConfigApiInterface
     */
    toggleToolApiMcpToolConfigToolNameTogglePostRaw(requestParameters: ToggleToolApiMcpToolConfigToolNameTogglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigResponse>>;

    /**
     * Toggle the enabled state of a tool.  Switches the enabled/disabled state of the specified tool.
     * Toggle Tool
     */
    toggleToolApiMcpToolConfigToolNameTogglePost(requestParameters: ToggleToolApiMcpToolConfigToolNameTogglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigResponse>;

    /**
     * Update configuration for a specific tool.  Updates the enabled state and/or configuration for the specified tool.
     * @summary Update Tool Configuration
     * @param {string} toolName 
     * @param {ToolConfigUpdateRequest} toolConfigUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpToolConfigApiInterface
     */
    updateToolConfigurationApiMcpToolConfigToolNamePutRaw(requestParameters: UpdateToolConfigurationApiMcpToolConfigToolNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigResponse>>;

    /**
     * Update configuration for a specific tool.  Updates the enabled state and/or configuration for the specified tool.
     * Update Tool Configuration
     */
    updateToolConfigurationApiMcpToolConfigToolNamePut(requestParameters: UpdateToolConfigurationApiMcpToolConfigToolNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigResponse>;

}

/**
 * 
 */
export class McpToolConfigApi extends runtime.BaseAPI implements McpToolConfigApiInterface {

    /**
     * Disable a specific tool.  Disables the specified tool if it\'s currently enabled.
     * Disable Tool
     */
    async disableToolApiMcpToolConfigToolNameDisablePostRaw(requestParameters: DisableToolApiMcpToolConfigToolNameDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigResponse>> {
        if (requestParameters['toolName'] == null) {
            throw new runtime.RequiredError(
                'toolName',
                'Required parameter "toolName" was null or undefined when calling disableToolApiMcpToolConfigToolNameDisablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/mcp/tool-config/{tool_name}/disable`;
        urlPath = urlPath.replace(`{${"tool_name"}}`, encodeURIComponent(String(requestParameters['toolName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolConfigResponseFromJSON(jsonValue));
    }

    /**
     * Disable a specific tool.  Disables the specified tool if it\'s currently enabled.
     * Disable Tool
     */
    async disableToolApiMcpToolConfigToolNameDisablePost(requestParameters: DisableToolApiMcpToolConfigToolNameDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigResponse> {
        const response = await this.disableToolApiMcpToolConfigToolNameDisablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable a specific tool.  Enables the specified tool if it\'s currently disabled.
     * Enable Tool
     */
    async enableToolApiMcpToolConfigToolNameEnablePostRaw(requestParameters: EnableToolApiMcpToolConfigToolNameEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigResponse>> {
        if (requestParameters['toolName'] == null) {
            throw new runtime.RequiredError(
                'toolName',
                'Required parameter "toolName" was null or undefined when calling enableToolApiMcpToolConfigToolNameEnablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/mcp/tool-config/{tool_name}/enable`;
        urlPath = urlPath.replace(`{${"tool_name"}}`, encodeURIComponent(String(requestParameters['toolName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolConfigResponseFromJSON(jsonValue));
    }

    /**
     * Enable a specific tool.  Enables the specified tool if it\'s currently disabled.
     * Enable Tool
     */
    async enableToolApiMcpToolConfigToolNameEnablePost(requestParameters: EnableToolApiMcpToolConfigToolNameEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigResponse> {
        const response = await this.enableToolApiMcpToolConfigToolNameEnablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get configuration for a specific tool.  Returns the configuration and status for the specified tool.
     * Get Tool Configuration
     */
    async getToolConfigurationApiMcpToolConfigToolNameGetRaw(requestParameters: GetToolConfigurationApiMcpToolConfigToolNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigResponse>> {
        if (requestParameters['toolName'] == null) {
            throw new runtime.RequiredError(
                'toolName',
                'Required parameter "toolName" was null or undefined when calling getToolConfigurationApiMcpToolConfigToolNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/mcp/tool-config/{tool_name}`;
        urlPath = urlPath.replace(`{${"tool_name"}}`, encodeURIComponent(String(requestParameters['toolName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolConfigResponseFromJSON(jsonValue));
    }

    /**
     * Get configuration for a specific tool.  Returns the configuration and status for the specified tool.
     * Get Tool Configuration
     */
    async getToolConfigurationApiMcpToolConfigToolNameGet(requestParameters: GetToolConfigurationApiMcpToolConfigToolNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigResponse> {
        const response = await this.getToolConfigurationApiMcpToolConfigToolNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all tool configurations.  Returns the current state of all MCP tools including their enabled/disabled status.
     * Get Tool Configurations
     */
    async getToolConfigurationsApiMcpToolConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/mcp/tool-config/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolConfigListResponseFromJSON(jsonValue));
    }

    /**
     * Get all tool configurations.  Returns the current state of all MCP tools including their enabled/disabled status.
     * Get Tool Configurations
     */
    async getToolConfigurationsApiMcpToolConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigListResponse> {
        const response = await this.getToolConfigurationsApiMcpToolConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all tools in a specific category.  Returns all tools that belong to the specified category.
     * Get Tools By Category
     */
    async getToolsByCategoryApiMcpToolConfigCategoryCategoryGetRaw(requestParameters: GetToolsByCategoryApiMcpToolConfigCategoryCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: ToolConfigResponse; }>> {
        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling getToolsByCategoryApiMcpToolConfigCategoryCategoryGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/mcp/tool-config/category/{category}`;
        urlPath = urlPath.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, ToolConfigResponseFromJSON));
    }

    /**
     * Get all tools in a specific category.  Returns all tools that belong to the specified category.
     * Get Tools By Category
     */
    async getToolsByCategoryApiMcpToolConfigCategoryCategoryGet(requestParameters: GetToolsByCategoryApiMcpToolConfigCategoryCategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: ToolConfigResponse; }> {
        const response = await this.getToolsByCategoryApiMcpToolConfigCategoryCategoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle the enabled state of a tool.  Switches the enabled/disabled state of the specified tool.
     * Toggle Tool
     */
    async toggleToolApiMcpToolConfigToolNameTogglePostRaw(requestParameters: ToggleToolApiMcpToolConfigToolNameTogglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigResponse>> {
        if (requestParameters['toolName'] == null) {
            throw new runtime.RequiredError(
                'toolName',
                'Required parameter "toolName" was null or undefined when calling toggleToolApiMcpToolConfigToolNameTogglePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/mcp/tool-config/{tool_name}/toggle`;
        urlPath = urlPath.replace(`{${"tool_name"}}`, encodeURIComponent(String(requestParameters['toolName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolConfigResponseFromJSON(jsonValue));
    }

    /**
     * Toggle the enabled state of a tool.  Switches the enabled/disabled state of the specified tool.
     * Toggle Tool
     */
    async toggleToolApiMcpToolConfigToolNameTogglePost(requestParameters: ToggleToolApiMcpToolConfigToolNameTogglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigResponse> {
        const response = await this.toggleToolApiMcpToolConfigToolNameTogglePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update configuration for a specific tool.  Updates the enabled state and/or configuration for the specified tool.
     * Update Tool Configuration
     */
    async updateToolConfigurationApiMcpToolConfigToolNamePutRaw(requestParameters: UpdateToolConfigurationApiMcpToolConfigToolNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolConfigResponse>> {
        if (requestParameters['toolName'] == null) {
            throw new runtime.RequiredError(
                'toolName',
                'Required parameter "toolName" was null or undefined when calling updateToolConfigurationApiMcpToolConfigToolNamePut().'
            );
        }

        if (requestParameters['toolConfigUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'toolConfigUpdateRequest',
                'Required parameter "toolConfigUpdateRequest" was null or undefined when calling updateToolConfigurationApiMcpToolConfigToolNamePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/mcp/tool-config/{tool_name}`;
        urlPath = urlPath.replace(`{${"tool_name"}}`, encodeURIComponent(String(requestParameters['toolName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ToolConfigUpdateRequestToJSON(requestParameters['toolConfigUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolConfigResponseFromJSON(jsonValue));
    }

    /**
     * Update configuration for a specific tool.  Updates the enabled state and/or configuration for the specified tool.
     * Update Tool Configuration
     */
    async updateToolConfigurationApiMcpToolConfigToolNamePut(requestParameters: UpdateToolConfigurationApiMcpToolConfigToolNamePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolConfigResponse> {
        const response = await this.updateToolConfigurationApiMcpToolConfigToolNamePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
