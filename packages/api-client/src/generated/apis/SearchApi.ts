/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  HTTPValidationError,
  HybridSearchRequest,
  IndexRequest,
  SearchRequest,
  SemanticSearchRequest,
  SyntaxSearchRequest,
} from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  HybridSearchRequestFromJSON,
  HybridSearchRequestToJSON,
  IndexRequestFromJSON,
  IndexRequestToJSON,
  SearchRequestFromJSON,
  SearchRequestToJSON,
  SemanticSearchRequestFromJSON,
  SemanticSearchRequestToJSON,
  SyntaxSearchRequestFromJSON,
  SyntaxSearchRequestToJSON,
} from "../models/index";

export interface GetQuerySuggestionsApiSearchSuggestionsGetRequest {
  query: string;
  maxSuggestions?: number;
}

export interface HybridSearchApiSearchHybridPostRequest {
  hybridSearchRequest: HybridSearchRequest;
}

export interface IndexCodebaseApiSearchIndexPostRequest {
  indexRequest: IndexRequest;
}

export interface SemanticSearchApiSearchSemanticPostRequest {
  semanticSearchRequest: SemanticSearchRequest;
}

export interface SmartSearchApiSearchSearchPostRequest {
  searchRequest: SearchRequest;
}

export interface SyntaxSearchApiSearchSyntaxPostRequest {
  syntaxSearchRequest: SyntaxSearchRequest;
}

/**
 * SearchApi - interface
 *
 * @export
 * @interface SearchApiInterface
 */
export interface SearchApiInterface {
  /**
   * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
   * @summary Get Query Suggestions
   * @param {string} query Query to get suggestions for
   * @param {number} [maxSuggestions] Maximum suggestions to return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApiInterface
   */
  getQuerySuggestionsApiSearchSuggestionsGetRaw(
    requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
   * Get Query Suggestions
   */
  getQuerySuggestionsApiSearchSuggestionsGet(
    requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
   * @summary Get Search Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApiInterface
   */
  getSearchStatsApiSearchStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
   * Get Search Stats
   */
  getSearchStatsApiSearchStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

  /**
   * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
   * @summary Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApiInterface
   */
  healthCheckApiSearchHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>>;

  /**
   * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
   * Health Check
   */
  healthCheckApiSearchHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }>;

  /**
   * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
   * @summary Hybrid Search
   * @param {HybridSearchRequest} hybridSearchRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApiInterface
   */
  hybridSearchApiSearchHybridPostRaw(
    requestParameters: HybridSearchApiSearchHybridPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
   * Hybrid Search
   */
  hybridSearchApiSearchHybridPost(
    requestParameters: HybridSearchApiSearchHybridPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
   * @summary Index Codebase
   * @param {IndexRequest} indexRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApiInterface
   */
  indexCodebaseApiSearchIndexPostRaw(
    requestParameters: IndexCodebaseApiSearchIndexPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
   * Index Codebase
   */
  indexCodebaseApiSearchIndexPost(
    requestParameters: IndexCodebaseApiSearchIndexPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
   * @summary Semantic Search
   * @param {SemanticSearchRequest} semanticSearchRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApiInterface
   */
  semanticSearchApiSearchSemanticPostRaw(
    requestParameters: SemanticSearchApiSearchSemanticPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
   * Semantic Search
   */
  semanticSearchApiSearchSemanticPost(
    requestParameters: SemanticSearchApiSearchSemanticPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
   * @summary Smart Search
   * @param {SearchRequest} searchRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApiInterface
   */
  smartSearchApiSearchSearchPostRaw(
    requestParameters: SmartSearchApiSearchSearchPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
   * Smart Search
   */
  smartSearchApiSearchSearchPost(
    requestParameters: SmartSearchApiSearchSearchPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;

  /**
   * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
   * @summary Syntax Search
   * @param {SyntaxSearchRequest} syntaxSearchRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SearchApiInterface
   */
  syntaxSearchApiSearchSyntaxPostRaw(
    requestParameters: SyntaxSearchApiSearchSyntaxPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
   * Syntax Search
   */
  syntaxSearchApiSearchSyntaxPost(
    requestParameters: SyntaxSearchApiSearchSyntaxPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object>;
}

/**
 *
 */
export class SearchApi extends runtime.BaseAPI implements SearchApiInterface {
  /**
   * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
   * Get Query Suggestions
   */
  async getQuerySuggestionsApiSearchSuggestionsGetRaw(
    requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["query"] == null) {
      throw new runtime.RequiredError(
        "query",
        'Required parameter "query" was null or undefined when calling getQuerySuggestionsApiSearchSuggestionsGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["query"] != null) {
      queryParameters["query"] = requestParameters["query"];
    }

    if (requestParameters["maxSuggestions"] != null) {
      queryParameters["max_suggestions"] = requestParameters["maxSuggestions"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/search/suggestions`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
   * Get Query Suggestions
   */
  async getQuerySuggestionsApiSearchSuggestionsGet(
    requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.getQuerySuggestionsApiSearchSuggestionsGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
   * Get Search Stats
   */
  async getSearchStatsApiSearchStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/search/stats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
   * Get Search Stats
   */
  async getSearchStatsApiSearchStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
    const response = await this.getSearchStatsApiSearchStatsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
   * Health Check
   */
  async healthCheckApiSearchHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/search/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
   * Health Check
   */
  async healthCheckApiSearchHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }> {
    const response = await this.healthCheckApiSearchHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
   * Hybrid Search
   */
  async hybridSearchApiSearchHybridPostRaw(
    requestParameters: HybridSearchApiSearchHybridPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["hybridSearchRequest"] == null) {
      throw new runtime.RequiredError(
        "hybridSearchRequest",
        'Required parameter "hybridSearchRequest" was null or undefined when calling hybridSearchApiSearchHybridPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/search/hybrid`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: HybridSearchRequestToJSON(requestParameters["hybridSearchRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
   * Hybrid Search
   */
  async hybridSearchApiSearchHybridPost(
    requestParameters: HybridSearchApiSearchHybridPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.hybridSearchApiSearchHybridPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
   * Index Codebase
   */
  async indexCodebaseApiSearchIndexPostRaw(
    requestParameters: IndexCodebaseApiSearchIndexPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["indexRequest"] == null) {
      throw new runtime.RequiredError(
        "indexRequest",
        'Required parameter "indexRequest" was null or undefined when calling indexCodebaseApiSearchIndexPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/search/index`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: IndexRequestToJSON(requestParameters["indexRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
   * Index Codebase
   */
  async indexCodebaseApiSearchIndexPost(
    requestParameters: IndexCodebaseApiSearchIndexPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.indexCodebaseApiSearchIndexPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
   * Semantic Search
   */
  async semanticSearchApiSearchSemanticPostRaw(
    requestParameters: SemanticSearchApiSearchSemanticPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["semanticSearchRequest"] == null) {
      throw new runtime.RequiredError(
        "semanticSearchRequest",
        'Required parameter "semanticSearchRequest" was null or undefined when calling semanticSearchApiSearchSemanticPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/search/semantic`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: SemanticSearchRequestToJSON(requestParameters["semanticSearchRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
   * Semantic Search
   */
  async semanticSearchApiSearchSemanticPost(
    requestParameters: SemanticSearchApiSearchSemanticPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.semanticSearchApiSearchSemanticPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
   * Smart Search
   */
  async smartSearchApiSearchSearchPostRaw(
    requestParameters: SmartSearchApiSearchSearchPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["searchRequest"] == null) {
      throw new runtime.RequiredError(
        "searchRequest",
        'Required parameter "searchRequest" was null or undefined when calling smartSearchApiSearchSearchPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/search/search`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: SearchRequestToJSON(requestParameters["searchRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
   * Smart Search
   */
  async smartSearchApiSearchSearchPost(
    requestParameters: SmartSearchApiSearchSearchPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.smartSearchApiSearchSearchPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
   * Syntax Search
   */
  async syntaxSearchApiSearchSyntaxPostRaw(
    requestParameters: SyntaxSearchApiSearchSyntaxPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (requestParameters["syntaxSearchRequest"] == null) {
      throw new runtime.RequiredError(
        "syntaxSearchRequest",
        'Required parameter "syntaxSearchRequest" was null or undefined when calling syntaxSearchApiSearchSyntaxPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/search/syntax`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: SyntaxSearchRequestToJSON(requestParameters["syntaxSearchRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
   * Syntax Search
   */
  async syntaxSearchApiSearchSyntaxPost(
    requestParameters: SyntaxSearchApiSearchSyntaxPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.syntaxSearchApiSearchSyntaxPostRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
