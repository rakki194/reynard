/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContextualSearchRequest,
  HTTPValidationError,
  HybridSearchRequest,
  IndexRequest,
  IntelligentSearchRequest,
  NaturalLanguageSearchRequest,
  SearchRequest,
  SearchResponse,
  SemanticSearchRequest,
  SuggestionsResponse,
  SyntaxSearchRequest,
} from '../models/index';
import {
    ContextualSearchRequestFromJSON,
    ContextualSearchRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HybridSearchRequestFromJSON,
    HybridSearchRequestToJSON,
    IndexRequestFromJSON,
    IndexRequestToJSON,
    IntelligentSearchRequestFromJSON,
    IntelligentSearchRequestToJSON,
    NaturalLanguageSearchRequestFromJSON,
    NaturalLanguageSearchRequestToJSON,
    SearchRequestFromJSON,
    SearchRequestToJSON,
    SearchResponseFromJSON,
    SearchResponseToJSON,
    SemanticSearchRequestFromJSON,
    SemanticSearchRequestToJSON,
    SuggestionsResponseFromJSON,
    SuggestionsResponseToJSON,
    SyntaxSearchRequestFromJSON,
    SyntaxSearchRequestToJSON,
} from '../models/index';

export interface AnalyzeQueryApiSearchAnalyzeQueryGetRequest {
    query: string;
}

export interface AnalyzeQueryApiSearchAnalyzeQueryGet0Request {
    query: string;
}

export interface ContextualSearchApiSearchContextualPostRequest {
    contextualSearchRequest: ContextualSearchRequest;
}

export interface ContextualSearchApiSearchContextualPost0Request {
    contextualSearchRequest: ContextualSearchRequest;
}

export interface GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRequest {
    query: string;
    maxSuggestions?: number;
}

export interface GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGet0Request {
    query: string;
    maxSuggestions?: number;
}

export interface GetQuerySuggestionsApiSearchSuggestionsGetRequest {
    query: string;
    maxSuggestions?: number;
}

export interface HybridSearchApiSearchHybridPostRequest {
    hybridSearchRequest: HybridSearchRequest;
}

export interface IndexCodebaseApiSearchIndexPostRequest {
    indexRequest: IndexRequest;
}

export interface IntelligentSearchApiSearchIntelligentPostRequest {
    intelligentSearchRequest: IntelligentSearchRequest;
}

export interface IntelligentSearchApiSearchIntelligentPost0Request {
    intelligentSearchRequest: IntelligentSearchRequest;
}

export interface NaturalLanguageSearchApiSearchNaturalLanguagePostRequest {
    naturalLanguageSearchRequest: NaturalLanguageSearchRequest;
}

export interface NaturalLanguageSearchApiSearchNaturalLanguagePost0Request {
    naturalLanguageSearchRequest: NaturalLanguageSearchRequest;
}

export interface SemanticSearchApiSearchSemanticPostRequest {
    semanticSearchRequest: SemanticSearchRequest;
}

export interface SmartSearchApiSearchSearchPostRequest {
    searchRequest: SearchRequest;
}

export interface SyntaxSearchApiSearchSyntaxPostRequest {
    syntaxSearchRequest: SyntaxSearchRequest;
}

/**
 * SearchApi - interface
 * 
 * @export
 * @interface SearchApiInterface
 */
export interface SearchApiInterface {
    /**
     * Analyze a query to understand its intent and structure.
     * @summary Analyze Query
     * @param {string} query Query to analyze
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    analyzeQueryApiSearchAnalyzeQueryGetRaw(requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Analyze a query to understand its intent and structure.
     * Analyze Query
     */
    analyzeQueryApiSearchAnalyzeQueryGet(requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Analyze a query to understand its intent and structure.
     * @summary Analyze Query
     * @param {string} query Query to analyze
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    analyzeQueryApiSearchAnalyzeQueryGet_1Raw(requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Analyze a query to understand its intent and structure.
     * Analyze Query
     */
    analyzeQueryApiSearchAnalyzeQueryGet_1(requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Perform contextual search with additional context information.
     * @summary Contextual Search
     * @param {ContextualSearchRequest} contextualSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    contextualSearchApiSearchContextualPostRaw(requestParameters: ContextualSearchApiSearchContextualPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>>;

    /**
     * Perform contextual search with additional context information.
     * Contextual Search
     */
    contextualSearchApiSearchContextualPost(requestParameters: ContextualSearchApiSearchContextualPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse>;

    /**
     * Perform contextual search with additional context information.
     * @summary Contextual Search
     * @param {ContextualSearchRequest} contextualSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    contextualSearchApiSearchContextualPost_2Raw(requestParameters: ContextualSearchApiSearchContextualPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>>;

    /**
     * Perform contextual search with additional context information.
     * Contextual Search
     */
    contextualSearchApiSearchContextualPost_2(requestParameters: ContextualSearchApiSearchContextualPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse>;

    /**
     * Get intelligent query suggestions based on natural language processing.
     * @summary Get Intelligent Suggestions
     * @param {string} query Query to get suggestions for
     * @param {number} [maxSuggestions] Maximum number of suggestions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    getIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRaw(requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionsResponse>>;

    /**
     * Get intelligent query suggestions based on natural language processing.
     * Get Intelligent Suggestions
     */
    getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet(requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionsResponse>;

    /**
     * Get intelligent query suggestions based on natural language processing.
     * @summary Get Intelligent Suggestions
     * @param {string} query Query to get suggestions for
     * @param {number} [maxSuggestions] Maximum number of suggestions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet_3Raw(requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionsResponse>>;

    /**
     * Get intelligent query suggestions based on natural language processing.
     * Get Intelligent Suggestions
     */
    getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet_3(requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionsResponse>;

    /**
     * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
     * @summary Get Query Suggestions
     * @param {string} query Query to get suggestions for
     * @param {number} [maxSuggestions] Maximum suggestions to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    getQuerySuggestionsApiSearchSuggestionsGetRaw(requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
     * Get Query Suggestions
     */
    getQuerySuggestionsApiSearchSuggestionsGet(requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
     * @summary Get Search Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    getSearchStatsApiSearchStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
     * Get Search Stats
     */
    getSearchStatsApiSearchStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    healthCheckApiSearchHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>>;

    /**
     * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
     * Health Check
     */
    healthCheckApiSearchHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }>;

    /**
     * Check the health of the natural language search service.
     * @summary Health Check Natural Language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Check the health of the natural language search service.
     * Health Check Natural Language
     */
    healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Check the health of the natural language search service.
     * @summary Health Check Natural Language
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGet_4Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Check the health of the natural language search service.
     * Health Check Natural Language
     */
    healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGet_4(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
     * @summary Hybrid Search
     * @param {HybridSearchRequest} hybridSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    hybridSearchApiSearchHybridPostRaw(requestParameters: HybridSearchApiSearchHybridPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
     * Hybrid Search
     */
    hybridSearchApiSearchHybridPost(requestParameters: HybridSearchApiSearchHybridPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
     * @summary Index Codebase
     * @param {IndexRequest} indexRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    indexCodebaseApiSearchIndexPostRaw(requestParameters: IndexCodebaseApiSearchIndexPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
     * Index Codebase
     */
    indexCodebaseApiSearchIndexPost(requestParameters: IndexCodebaseApiSearchIndexPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Perform intelligent search that automatically chooses the best approach.
     * @summary Intelligent Search
     * @param {IntelligentSearchRequest} intelligentSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    intelligentSearchApiSearchIntelligentPostRaw(requestParameters: IntelligentSearchApiSearchIntelligentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>>;

    /**
     * Perform intelligent search that automatically chooses the best approach.
     * Intelligent Search
     */
    intelligentSearchApiSearchIntelligentPost(requestParameters: IntelligentSearchApiSearchIntelligentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse>;

    /**
     * Perform intelligent search that automatically chooses the best approach.
     * @summary Intelligent Search
     * @param {IntelligentSearchRequest} intelligentSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    intelligentSearchApiSearchIntelligentPost_5Raw(requestParameters: IntelligentSearchApiSearchIntelligentPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>>;

    /**
     * Perform intelligent search that automatically chooses the best approach.
     * Intelligent Search
     */
    intelligentSearchApiSearchIntelligentPost_5(requestParameters: IntelligentSearchApiSearchIntelligentPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse>;

    /**
     * Perform natural language search with intelligent query processing.
     * @summary Natural Language Search
     * @param {NaturalLanguageSearchRequest} naturalLanguageSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    naturalLanguageSearchApiSearchNaturalLanguagePostRaw(requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>>;

    /**
     * Perform natural language search with intelligent query processing.
     * Natural Language Search
     */
    naturalLanguageSearchApiSearchNaturalLanguagePost(requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse>;

    /**
     * Perform natural language search with intelligent query processing.
     * @summary Natural Language Search
     * @param {NaturalLanguageSearchRequest} naturalLanguageSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    naturalLanguageSearchApiSearchNaturalLanguagePost_6Raw(requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>>;

    /**
     * Perform natural language search with intelligent query processing.
     * Natural Language Search
     */
    naturalLanguageSearchApiSearchNaturalLanguagePost_6(requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse>;

    /**
     * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
     * @summary Semantic Search
     * @param {SemanticSearchRequest} semanticSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    semanticSearchApiSearchSemanticPostRaw(requestParameters: SemanticSearchApiSearchSemanticPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
     * Semantic Search
     */
    semanticSearchApiSearchSemanticPost(requestParameters: SemanticSearchApiSearchSemanticPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
     * @summary Smart Search
     * @param {SearchRequest} searchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    smartSearchApiSearchSearchPostRaw(requestParameters: SmartSearchApiSearchSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
     * Smart Search
     */
    smartSearchApiSearchSearchPost(requestParameters: SmartSearchApiSearchSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
     * @summary Syntax Search
     * @param {SyntaxSearchRequest} syntaxSearchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    syntaxSearchApiSearchSyntaxPostRaw(requestParameters: SyntaxSearchApiSearchSyntaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
     * Syntax Search
     */
    syntaxSearchApiSearchSyntaxPost(requestParameters: SyntaxSearchApiSearchSyntaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI implements SearchApiInterface {

    /**
     * Analyze a query to understand its intent and structure.
     * Analyze Query
     */
    async analyzeQueryApiSearchAnalyzeQueryGetRaw(requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling analyzeQueryApiSearchAnalyzeQueryGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/analyze-query`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Analyze a query to understand its intent and structure.
     * Analyze Query
     */
    async analyzeQueryApiSearchAnalyzeQueryGet(requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.analyzeQueryApiSearchAnalyzeQueryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Analyze a query to understand its intent and structure.
     * Analyze Query
     */
    async analyzeQueryApiSearchAnalyzeQueryGet_1Raw(requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling analyzeQueryApiSearchAnalyzeQueryGet_1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/analyze-query`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Analyze a query to understand its intent and structure.
     * Analyze Query
     */
    async analyzeQueryApiSearchAnalyzeQueryGet_1(requestParameters: AnalyzeQueryApiSearchAnalyzeQueryGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.analyzeQueryApiSearchAnalyzeQueryGet_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform contextual search with additional context information.
     * Contextual Search
     */
    async contextualSearchApiSearchContextualPostRaw(requestParameters: ContextualSearchApiSearchContextualPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>> {
        if (requestParameters['contextualSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'contextualSearchRequest',
                'Required parameter "contextualSearchRequest" was null or undefined when calling contextualSearchApiSearchContextualPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/contextual`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContextualSearchRequestToJSON(requestParameters['contextualSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseFromJSON(jsonValue));
    }

    /**
     * Perform contextual search with additional context information.
     * Contextual Search
     */
    async contextualSearchApiSearchContextualPost(requestParameters: ContextualSearchApiSearchContextualPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse> {
        const response = await this.contextualSearchApiSearchContextualPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform contextual search with additional context information.
     * Contextual Search
     */
    async contextualSearchApiSearchContextualPost_2Raw(requestParameters: ContextualSearchApiSearchContextualPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>> {
        if (requestParameters['contextualSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'contextualSearchRequest',
                'Required parameter "contextualSearchRequest" was null or undefined when calling contextualSearchApiSearchContextualPost_2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/contextual`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContextualSearchRequestToJSON(requestParameters['contextualSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseFromJSON(jsonValue));
    }

    /**
     * Perform contextual search with additional context information.
     * Contextual Search
     */
    async contextualSearchApiSearchContextualPost_2(requestParameters: ContextualSearchApiSearchContextualPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse> {
        const response = await this.contextualSearchApiSearchContextualPost_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get intelligent query suggestions based on natural language processing.
     * Get Intelligent Suggestions
     */
    async getIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRaw(requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionsResponse>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['maxSuggestions'] != null) {
            queryParameters['max_suggestions'] = requestParameters['maxSuggestions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/suggestions/intelligent`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuggestionsResponseFromJSON(jsonValue));
    }

    /**
     * Get intelligent query suggestions based on natural language processing.
     * Get Intelligent Suggestions
     */
    async getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet(requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionsResponse> {
        const response = await this.getIntelligentSuggestionsApiSearchSuggestionsIntelligentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get intelligent query suggestions based on natural language processing.
     * Get Intelligent Suggestions
     */
    async getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet_3Raw(requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestionsResponse>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet_3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['maxSuggestions'] != null) {
            queryParameters['max_suggestions'] = requestParameters['maxSuggestions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/suggestions/intelligent`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuggestionsResponseFromJSON(jsonValue));
    }

    /**
     * Get intelligent query suggestions based on natural language processing.
     * Get Intelligent Suggestions
     */
    async getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet_3(requestParameters: GetIntelligentSuggestionsApiSearchSuggestionsIntelligentGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestionsResponse> {
        const response = await this.getIntelligentSuggestionsApiSearchSuggestionsIntelligentGet_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
     * Get Query Suggestions
     */
    async getQuerySuggestionsApiSearchSuggestionsGetRaw(requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling getQuerySuggestionsApiSearchSuggestionsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['maxSuggestions'] != null) {
            queryParameters['max_suggestions'] = requestParameters['maxSuggestions'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/search/suggestions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get intelligent query suggestions.  Provides smart suggestions to improve your search queries, including synonyms, code patterns, and completion suggestions.
     * Get Query Suggestions
     */
    async getQuerySuggestionsApiSearchSuggestionsGet(requestParameters: GetQuerySuggestionsApiSearchSuggestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getQuerySuggestionsApiSearchSuggestionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
     * Get Search Stats
     */
    async getSearchStatsApiSearchStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/search/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get search statistics and performance metrics.  Returns information about the search index, including file counts, index size, search performance, and cache hit rates.
     * Get Search Stats
     */
    async getSearchStatsApiSearchStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getSearchStatsApiSearchStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
     * Health Check
     */
    async healthCheckApiSearchHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string | null; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/search/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Health check endpoint for search service.  Returns the status of the search service and its dependencies.
     * Health Check
     */
    async healthCheckApiSearchHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string | null; }> {
        const response = await this.healthCheckApiSearchHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Check the health of the natural language search service.
     * Health Check Natural Language
     */
    async healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/health/natural-language`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Check the health of the natural language search service.
     * Health Check Natural Language
     */
    async healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Check the health of the natural language search service.
     * Health Check Natural Language
     */
    async healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGet_4Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/health/natural-language`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Check the health of the natural language search service.
     * Health Check Natural Language
     */
    async healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGet_4(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.healthCheckNaturalLanguageApiSearchHealthNaturalLanguageGet_4Raw(initOverrides);
        return await response.value();
    }

    /**
     * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
     * Hybrid Search
     */
    async hybridSearchApiSearchHybridPostRaw(requestParameters: HybridSearchApiSearchHybridPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['hybridSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'hybridSearchRequest',
                'Required parameter "hybridSearchRequest" was null or undefined when calling hybridSearchApiSearchHybridPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/search/hybrid`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HybridSearchRequestToJSON(requestParameters['hybridSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Perform hybrid search combining semantic and syntax search.  This endpoint provides the best of both worlds: semantic understanding for finding conceptually related code and precise syntax matching for exact patterns and structures.
     * Hybrid Search
     */
    async hybridSearchApiSearchHybridPost(requestParameters: HybridSearchApiSearchHybridPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.hybridSearchApiSearchHybridPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
     * Index Codebase
     */
    async indexCodebaseApiSearchIndexPostRaw(requestParameters: IndexCodebaseApiSearchIndexPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['indexRequest'] == null) {
            throw new runtime.RequiredError(
                'indexRequest',
                'Required parameter "indexRequest" was null or undefined when calling indexCodebaseApiSearchIndexPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/search/index`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IndexRequestToJSON(requestParameters['indexRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Index the codebase for search.  This endpoint creates a searchable index of your codebase, including vector embeddings for semantic search and text indexing for fast retrieval.
     * Index Codebase
     */
    async indexCodebaseApiSearchIndexPost(requestParameters: IndexCodebaseApiSearchIndexPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.indexCodebaseApiSearchIndexPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform intelligent search that automatically chooses the best approach.
     * Intelligent Search
     */
    async intelligentSearchApiSearchIntelligentPostRaw(requestParameters: IntelligentSearchApiSearchIntelligentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>> {
        if (requestParameters['intelligentSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'intelligentSearchRequest',
                'Required parameter "intelligentSearchRequest" was null or undefined when calling intelligentSearchApiSearchIntelligentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/intelligent`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntelligentSearchRequestToJSON(requestParameters['intelligentSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseFromJSON(jsonValue));
    }

    /**
     * Perform intelligent search that automatically chooses the best approach.
     * Intelligent Search
     */
    async intelligentSearchApiSearchIntelligentPost(requestParameters: IntelligentSearchApiSearchIntelligentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse> {
        const response = await this.intelligentSearchApiSearchIntelligentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform intelligent search that automatically chooses the best approach.
     * Intelligent Search
     */
    async intelligentSearchApiSearchIntelligentPost_5Raw(requestParameters: IntelligentSearchApiSearchIntelligentPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>> {
        if (requestParameters['intelligentSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'intelligentSearchRequest',
                'Required parameter "intelligentSearchRequest" was null or undefined when calling intelligentSearchApiSearchIntelligentPost_5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/intelligent`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IntelligentSearchRequestToJSON(requestParameters['intelligentSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseFromJSON(jsonValue));
    }

    /**
     * Perform intelligent search that automatically chooses the best approach.
     * Intelligent Search
     */
    async intelligentSearchApiSearchIntelligentPost_5(requestParameters: IntelligentSearchApiSearchIntelligentPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse> {
        const response = await this.intelligentSearchApiSearchIntelligentPost_5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform natural language search with intelligent query processing.
     * Natural Language Search
     */
    async naturalLanguageSearchApiSearchNaturalLanguagePostRaw(requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>> {
        if (requestParameters['naturalLanguageSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'naturalLanguageSearchRequest',
                'Required parameter "naturalLanguageSearchRequest" was null or undefined when calling naturalLanguageSearchApiSearchNaturalLanguagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/natural-language`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NaturalLanguageSearchRequestToJSON(requestParameters['naturalLanguageSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseFromJSON(jsonValue));
    }

    /**
     * Perform natural language search with intelligent query processing.
     * Natural Language Search
     */
    async naturalLanguageSearchApiSearchNaturalLanguagePost(requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse> {
        const response = await this.naturalLanguageSearchApiSearchNaturalLanguagePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform natural language search with intelligent query processing.
     * Natural Language Search
     */
    async naturalLanguageSearchApiSearchNaturalLanguagePost_6Raw(requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>> {
        if (requestParameters['naturalLanguageSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'naturalLanguageSearchRequest',
                'Required parameter "naturalLanguageSearchRequest" was null or undefined when calling naturalLanguageSearchApiSearchNaturalLanguagePost_6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("MCP-Auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/search/natural-language`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NaturalLanguageSearchRequestToJSON(requestParameters['naturalLanguageSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseFromJSON(jsonValue));
    }

    /**
     * Perform natural language search with intelligent query processing.
     * Natural Language Search
     */
    async naturalLanguageSearchApiSearchNaturalLanguagePost_6(requestParameters: NaturalLanguageSearchApiSearchNaturalLanguagePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse> {
        const response = await this.naturalLanguageSearchApiSearchNaturalLanguagePost_6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
     * Semantic Search
     */
    async semanticSearchApiSearchSemanticPostRaw(requestParameters: SemanticSearchApiSearchSemanticPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['semanticSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'semanticSearchRequest',
                'Required parameter "semanticSearchRequest" was null or undefined when calling semanticSearchApiSearchSemanticPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/search/semantic`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SemanticSearchRequestToJSON(requestParameters['semanticSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Perform semantic search using vector embeddings.  This endpoint provides intelligent code search that understands the meaning and context of your queries, not just exact text matches.
     * Semantic Search
     */
    async semanticSearchApiSearchSemanticPost(requestParameters: SemanticSearchApiSearchSemanticPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.semanticSearchApiSearchSemanticPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
     * Smart Search
     */
    async smartSearchApiSearchSearchPostRaw(requestParameters: SmartSearchApiSearchSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['searchRequest'] == null) {
            throw new runtime.RequiredError(
                'searchRequest',
                'Required parameter "searchRequest" was null or undefined when calling smartSearchApiSearchSearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/search/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestToJSON(requestParameters['searchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Smart search that automatically chooses the best search strategy.  This endpoint analyzes your query and automatically selects the most appropriate search method (semantic, syntax, or hybrid) for optimal results.
     * Smart Search
     */
    async smartSearchApiSearchSearchPost(requestParameters: SmartSearchApiSearchSearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.smartSearchApiSearchSearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
     * Syntax Search
     */
    async syntaxSearchApiSearchSyntaxPostRaw(requestParameters: SyntaxSearchApiSearchSyntaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['syntaxSearchRequest'] == null) {
            throw new runtime.RequiredError(
                'syntaxSearchRequest',
                'Required parameter "syntaxSearchRequest" was null or undefined when calling syntaxSearchApiSearchSyntaxPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/search/syntax`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyntaxSearchRequestToJSON(requestParameters['syntaxSearchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Perform syntax-based search using ripgrep.  This endpoint provides fast, precise text search with support for regex patterns, file type filtering, and code-aware pattern matching.
     * Syntax Search
     */
    async syntaxSearchApiSearchSyntaxPost(requestParameters: SyntaxSearchApiSearchSyntaxPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.syntaxSearchApiSearchSyntaxPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
