/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  RefreshTokenRequest,
  Token,
  UserCreate,
  UserLogin,
  UserResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RefreshTokenRequestFromJSON,
    RefreshTokenRequestToJSON,
    TokenFromJSON,
    TokenToJSON,
    UserCreateFromJSON,
    UserCreateToJSON,
    UserLoginFromJSON,
    UserLoginToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models/index';

export interface LoginApiAuthLoginPostRequest {
    userLogin: UserLogin;
}

export interface LogoutApiAuthLogoutPostRequest {
    refreshTokenRequest: RefreshTokenRequest;
}

export interface RefreshTokenApiAuthRefreshPostRequest {
    refreshTokenRequest: RefreshTokenRequest;
}

export interface RegisterApiAuthRegisterPostRequest {
    userCreate: UserCreate;
}

/**
 * AuthenticationApi - interface
 * 
 * @export
 * @interface AuthenticationApiInterface
 */
export interface AuthenticationApiInterface {
    /**
     * Get current user information
     * @summary Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    getCurrentUserInfoApiAuthMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;

    /**
     * Get current user information
     * Get Current User Info
     */
    getCurrentUserInfoApiAuthMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;

    /**
     * Login and get access token
     * @summary Login
     * @param {UserLogin} userLogin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    loginApiAuthLoginPostRaw(requestParameters: LoginApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>>;

    /**
     * Login and get access token
     * Login
     */
    loginApiAuthLoginPost(requestParameters: LoginApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token>;

    /**
     * Logout and invalidate refresh token
     * @summary Logout
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    logoutApiAuthLogoutPostRaw(requestParameters: LogoutApiAuthLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Logout and invalidate refresh token
     * Logout
     */
    logoutApiAuthLogoutPost(requestParameters: LogoutApiAuthLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Refresh access token using refresh token
     * @summary Refresh Token
     * @param {RefreshTokenRequest} refreshTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    refreshTokenApiAuthRefreshPostRaw(requestParameters: RefreshTokenApiAuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>>;

    /**
     * Refresh access token using refresh token
     * Refresh Token
     */
    refreshTokenApiAuthRefreshPost(requestParameters: RefreshTokenApiAuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token>;

    /**
     * Register a new user
     * @summary Register
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    registerApiAuthRegisterPostRaw(requestParameters: RegisterApiAuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;

    /**
     * Register a new user
     * Register
     */
    registerApiAuthRegisterPost(requestParameters: RegisterApiAuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;

}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI implements AuthenticationApiInterface {

    /**
     * Get current user information
     * Get Current User Info
     */
    async getCurrentUserInfoApiAuthMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/auth/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Get current user information
     * Get Current User Info
     */
    async getCurrentUserInfoApiAuthMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.getCurrentUserInfoApiAuthMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login and get access token
     * Login
     */
    async loginApiAuthLoginPostRaw(requestParameters: LoginApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['userLogin'] == null) {
            throw new runtime.RequiredError(
                'userLogin',
                'Required parameter "userLogin" was null or undefined when calling loginApiAuthLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginToJSON(requestParameters['userLogin']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Login and get access token
     * Login
     */
    async loginApiAuthLoginPost(requestParameters: LoginApiAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.loginApiAuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout and invalidate refresh token
     * Logout
     */
    async logoutApiAuthLogoutPostRaw(requestParameters: LogoutApiAuthLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['refreshTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'refreshTokenRequest',
                'Required parameter "refreshTokenRequest" was null or undefined when calling logoutApiAuthLogoutPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenRequestToJSON(requestParameters['refreshTokenRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Logout and invalidate refresh token
     * Logout
     */
    async logoutApiAuthLogoutPost(requestParameters: LogoutApiAuthLogoutPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.logoutApiAuthLogoutPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh access token using refresh token
     * Refresh Token
     */
    async refreshTokenApiAuthRefreshPostRaw(requestParameters: RefreshTokenApiAuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['refreshTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'refreshTokenRequest',
                'Required parameter "refreshTokenRequest" was null or undefined when calling refreshTokenApiAuthRefreshPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenRequestToJSON(requestParameters['refreshTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Refresh access token using refresh token
     * Refresh Token
     */
    async refreshTokenApiAuthRefreshPost(requestParameters: RefreshTokenApiAuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.refreshTokenApiAuthRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register a new user
     * Register
     */
    async registerApiAuthRegisterPostRaw(requestParameters: RegisterApiAuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters['userCreate'] == null) {
            throw new runtime.RequiredError(
                'userCreate',
                'Required parameter "userCreate" was null or undefined when calling registerApiAuthRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters['userCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Register a new user
     * Register
     */
    async registerApiAuthRegisterPost(requestParameters: RegisterApiAuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.registerApiAuthRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
