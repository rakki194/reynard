/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { HTTPValidationError, TokenResponse, UserCreate, UserPublic, UserUpdate } from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  TokenResponseFromJSON,
  TokenResponseToJSON,
  UserCreateFromJSON,
  UserCreateToJSON,
  UserPublicFromJSON,
  UserPublicToJSON,
  UserUpdateFromJSON,
  UserUpdateToJSON,
} from "../models/index";

export interface ChangePasswordApiAuthChangePasswordPostRequest {
  currentPassword: string;
  newPassword: string;
}

export interface DeleteUserApiAuthUsersUsernameDeleteRequest {
  username: string;
}

export interface GetUserApiAuthUsersUsernameGetRequest {
  username: string;
}

export interface LoginApiAuthLoginPostRequest {
  username: string;
  password: string;
  grantType?: string | null;
  scope?: string;
  clientId?: string | null;
  clientSecret?: string | null;
}

export interface LogoutApiAuthLogoutPostRequest {
  token: string;
}

export interface RefreshTokensApiAuthRefreshPostRequest {
  refreshToken: string;
}

export interface RegisterApiAuthRegisterPostRequest {
  userCreate: UserCreate;
}

export interface RevokeUserTokensApiAuthUsersUsernameRevokeTokensPostRequest {
  username: string;
}

export interface UpdateCurrentUserApiAuthMePutRequest {
  userUpdate: UserUpdate;
}

export interface UpdateUserApiAuthUsersUsernamePutRequest {
  username: string;
  userUpdate: UserUpdate;
}

/**
 * AuthenticationApi - interface
 *
 * @export
 * @interface AuthenticationApiInterface
 */
export interface AuthenticationApiInterface {
  /**
   * Change current user\'s password.  Args:     current_password: Current password     new_password: New password     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If password change fails
   * @summary Change Password
   * @param {string} currentPassword
   * @param {string} newPassword
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  changePasswordApiAuthChangePasswordPostRaw(
    requestParameters: ChangePasswordApiAuthChangePasswordPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>>;

  /**
   * Change current user\'s password.  Args:     current_password: Current password     new_password: New password     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If password change fails
   * Change Password
   */
  changePasswordApiAuthChangePasswordPost(
    requestParameters: ChangePasswordApiAuthChangePasswordPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }>;

  /**
   * Clean up expired tokens (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * @summary Cleanup Expired Tokens
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  cleanupExpiredTokensApiAuthCleanupPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>>;

  /**
   * Clean up expired tokens (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * Cleanup Expired Tokens
   */
  cleanupExpiredTokensApiAuthCleanupPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }>;

  /**
   * Delete user by username (admin only).  Args:     username: Username to delete     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If user not found or deletion fails
   * @summary Delete User
   * @param {string} username
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  deleteUserApiAuthUsersUsernameDeleteRaw(
    requestParameters: DeleteUserApiAuthUsersUsernameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>>;

  /**
   * Delete user by username (admin only).  Args:     username: Username to delete     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If user not found or deletion fails
   * Delete User
   */
  deleteUserApiAuthUsersUsernameDelete(
    requestParameters: DeleteUserApiAuthUsersUsernameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }>;

  /**
   * Get authentication statistics (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Authentication statistics
   * @summary Get Auth Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  getAuthStatsApiAuthStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Get authentication statistics (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Authentication statistics
   * Get Auth Stats
   */
  getAuthStatsApiAuthStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

  /**
   * Get current user information.  Args:     current_user: Current authenticated user  Returns:     UserPublic: Current user information
   * @summary Get Current User Info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  getCurrentUserInfoApiAuthMeGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPublic>>;

  /**
   * Get current user information.  Args:     current_user: Current authenticated user  Returns:     UserPublic: Current user information
   * Get Current User Info
   */
  getCurrentUserInfoApiAuthMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPublic>;

  /**
   * Get user by username (admin only).  Args:     username: Username to look up     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: User information  Raises:     HTTPException: If user not found
   * @summary Get User
   * @param {string} username
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  getUserApiAuthUsersUsernameGetRaw(
    requestParameters: GetUserApiAuthUsersUsernameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPublic>>;

  /**
   * Get user by username (admin only).  Args:     username: Username to look up     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: User information  Raises:     HTTPException: If user not found
   * Get User
   */
  getUserApiAuthUsersUsernameGet(
    requestParameters: GetUserApiAuthUsersUsernameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPublic>;

  /**
   * List all users (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     list[UserPublic]: List of all users
   * @summary List Users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  listUsersApiAuthUsersGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserPublic>>>;

  /**
   * List all users (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     list[UserPublic]: List of all users
   * List Users
   */
  listUsersApiAuthUsersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserPublic>>;

  /**
   * Authenticate user and return access/refresh tokens.  Args:     form_data: OAuth2 form data containing username and password     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: Access and refresh tokens  Raises:     HTTPException: If authentication fails
   * @summary Login
   * @param {string} username
   * @param {string} password
   * @param {string} [grantType]
   * @param {string} [scope]
   * @param {string} [clientId]
   * @param {string} [clientSecret]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  loginApiAuthLoginPostRaw(
    requestParameters: LoginApiAuthLoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TokenResponse>>;

  /**
   * Authenticate user and return access/refresh tokens.  Args:     form_data: OAuth2 form data containing username and password     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: Access and refresh tokens  Raises:     HTTPException: If authentication fails
   * Login
   */
  loginApiAuthLoginPost(
    requestParameters: LoginApiAuthLoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TokenResponse>;

  /**
   * Logout user by revoking their token.  Args:     token: The access token to revoke     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * @summary Logout
   * @param {string} token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  logoutApiAuthLogoutPostRaw(
    requestParameters: LogoutApiAuthLogoutPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>>;

  /**
   * Logout user by revoking their token.  Args:     token: The access token to revoke     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * Logout
   */
  logoutApiAuthLogoutPost(
    requestParameters: LogoutApiAuthLogoutPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }>;

  /**
   * Refresh access token using a valid refresh token.  Args:     refresh_token: The refresh token     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: New access and refresh tokens  Raises:     HTTPException: If refresh token is invalid
   * @summary Refresh Tokens
   * @param {string} refreshToken
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  refreshTokensApiAuthRefreshPostRaw(
    requestParameters: RefreshTokensApiAuthRefreshPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TokenResponse>>;

  /**
   * Refresh access token using a valid refresh token.  Args:     refresh_token: The refresh token     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: New access and refresh tokens  Raises:     HTTPException: If refresh token is invalid
   * Refresh Tokens
   */
  refreshTokensApiAuthRefreshPost(
    requestParameters: RefreshTokensApiAuthRefreshPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TokenResponse>;

  /**
   * Register a new user.  Args:     user_data: User creation data     auth_manager: Authentication manager instance  Returns:     UserPublic: The created user (without sensitive data)  Raises:     HTTPException: If user creation fails
   * @summary Register
   * @param {UserCreate} userCreate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  registerApiAuthRegisterPostRaw(
    requestParameters: RegisterApiAuthRegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPublic>>;

  /**
   * Register a new user.  Args:     user_data: User creation data     auth_manager: Authentication manager instance  Returns:     UserPublic: The created user (without sensitive data)  Raises:     HTTPException: If user creation fails
   * Register
   */
  registerApiAuthRegisterPost(
    requestParameters: RegisterApiAuthRegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPublic>;

  /**
   * Revoke all tokens for a user (admin only).  Args:     username: Username whose tokens should be revoked     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * @summary Revoke User Tokens
   * @param {string} username
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  revokeUserTokensApiAuthUsersUsernameRevokeTokensPostRaw(
    requestParameters: RevokeUserTokensApiAuthUsersUsernameRevokeTokensPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>>;

  /**
   * Revoke all tokens for a user (admin only).  Args:     username: Username whose tokens should be revoked     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * Revoke User Tokens
   */
  revokeUserTokensApiAuthUsersUsernameRevokeTokensPost(
    requestParameters: RevokeUserTokensApiAuthUsersUsernameRevokeTokensPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }>;

  /**
   * Update current user information.  Args:     user_update: User update data     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information
   * @summary Update Current User
   * @param {UserUpdate} userUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  updateCurrentUserApiAuthMePutRaw(
    requestParameters: UpdateCurrentUserApiAuthMePutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPublic>>;

  /**
   * Update current user information.  Args:     user_update: User update data     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information
   * Update Current User
   */
  updateCurrentUserApiAuthMePut(
    requestParameters: UpdateCurrentUserApiAuthMePutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPublic>;

  /**
   * Update user by username (admin only).  Args:     username: Username to update     user_update: User update data     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information  Raises:     HTTPException: If user not found or update fails
   * @summary Update User
   * @param {string} username
   * @param {UserUpdate} userUpdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApiInterface
   */
  updateUserApiAuthUsersUsernamePutRaw(
    requestParameters: UpdateUserApiAuthUsersUsernamePutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPublic>>;

  /**
   * Update user by username (admin only).  Args:     username: Username to update     user_update: User update data     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information  Raises:     HTTPException: If user not found or update fails
   * Update User
   */
  updateUserApiAuthUsersUsernamePut(
    requestParameters: UpdateUserApiAuthUsersUsernamePutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPublic>;
}

/**
 *
 */
export class AuthenticationApi extends runtime.BaseAPI implements AuthenticationApiInterface {
  /**
   * Change current user\'s password.  Args:     current_password: Current password     new_password: New password     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If password change fails
   * Change Password
   */
  async changePasswordApiAuthChangePasswordPostRaw(
    requestParameters: ChangePasswordApiAuthChangePasswordPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>> {
    if (requestParameters["currentPassword"] == null) {
      throw new runtime.RequiredError(
        "currentPassword",
        'Required parameter "currentPassword" was null or undefined when calling changePasswordApiAuthChangePasswordPost().'
      );
    }

    if (requestParameters["newPassword"] == null) {
      throw new runtime.RequiredError(
        "newPassword",
        'Required parameter "newPassword" was null or undefined when calling changePasswordApiAuthChangePasswordPost().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["currentPassword"] != null) {
      queryParameters["current_password"] = requestParameters["currentPassword"];
    }

    if (requestParameters["newPassword"] != null) {
      queryParameters["new_password"] = requestParameters["newPassword"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/auth/change-password`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Change current user\'s password.  Args:     current_password: Current password     new_password: New password     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If password change fails
   * Change Password
   */
  async changePasswordApiAuthChangePasswordPost(
    requestParameters: ChangePasswordApiAuthChangePasswordPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }> {
    const response = await this.changePasswordApiAuthChangePasswordPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Clean up expired tokens (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * Cleanup Expired Tokens
   */
  async cleanupExpiredTokensApiAuthCleanupPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/auth/cleanup`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Clean up expired tokens (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * Cleanup Expired Tokens
   */
  async cleanupExpiredTokensApiAuthCleanupPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }> {
    const response = await this.cleanupExpiredTokensApiAuthCleanupPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Delete user by username (admin only).  Args:     username: Username to delete     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If user not found or deletion fails
   * Delete User
   */
  async deleteUserApiAuthUsersUsernameDeleteRaw(
    requestParameters: DeleteUserApiAuthUsersUsernameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>> {
    if (requestParameters["username"] == null) {
      throw new runtime.RequiredError(
        "username",
        'Required parameter "username" was null or undefined when calling deleteUserApiAuthUsersUsernameDelete().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/auth/users/{username}`;
    urlPath = urlPath.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters["username"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Delete user by username (admin only).  Args:     username: Username to delete     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If user not found or deletion fails
   * Delete User
   */
  async deleteUserApiAuthUsersUsernameDelete(
    requestParameters: DeleteUserApiAuthUsersUsernameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }> {
    const response = await this.deleteUserApiAuthUsersUsernameDeleteRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get authentication statistics (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Authentication statistics
   * Get Auth Stats
   */
  async getAuthStatsApiAuthStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/auth/stats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get authentication statistics (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Authentication statistics
   * Get Auth Stats
   */
  async getAuthStatsApiAuthStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
    const response = await this.getAuthStatsApiAuthStatsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get current user information.  Args:     current_user: Current authenticated user  Returns:     UserPublic: Current user information
   * Get Current User Info
   */
  async getCurrentUserInfoApiAuthMeGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPublic>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/auth/me`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => UserPublicFromJSON(jsonValue));
  }

  /**
   * Get current user information.  Args:     current_user: Current authenticated user  Returns:     UserPublic: Current user information
   * Get Current User Info
   */
  async getCurrentUserInfoApiAuthMeGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPublic> {
    const response = await this.getCurrentUserInfoApiAuthMeGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get user by username (admin only).  Args:     username: Username to look up     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: User information  Raises:     HTTPException: If user not found
   * Get User
   */
  async getUserApiAuthUsersUsernameGetRaw(
    requestParameters: GetUserApiAuthUsersUsernameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPublic>> {
    if (requestParameters["username"] == null) {
      throw new runtime.RequiredError(
        "username",
        'Required parameter "username" was null or undefined when calling getUserApiAuthUsersUsernameGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/auth/users/{username}`;
    urlPath = urlPath.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters["username"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => UserPublicFromJSON(jsonValue));
  }

  /**
   * Get user by username (admin only).  Args:     username: Username to look up     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: User information  Raises:     HTTPException: If user not found
   * Get User
   */
  async getUserApiAuthUsersUsernameGet(
    requestParameters: GetUserApiAuthUsersUsernameGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPublic> {
    const response = await this.getUserApiAuthUsersUsernameGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * List all users (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     list[UserPublic]: List of all users
   * List Users
   */
  async listUsersApiAuthUsersGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserPublic>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/auth/users`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(UserPublicFromJSON));
  }

  /**
   * List all users (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     list[UserPublic]: List of all users
   * List Users
   */
  async listUsersApiAuthUsersGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UserPublic>> {
    const response = await this.listUsersApiAuthUsersGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Authenticate user and return access/refresh tokens.  Args:     form_data: OAuth2 form data containing username and password     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: Access and refresh tokens  Raises:     HTTPException: If authentication fails
   * Login
   */
  async loginApiAuthLoginPostRaw(
    requestParameters: LoginApiAuthLoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TokenResponse>> {
    if (requestParameters["username"] == null) {
      throw new runtime.RequiredError(
        "username",
        'Required parameter "username" was null or undefined when calling loginApiAuthLoginPost().'
      );
    }

    if (requestParameters["password"] == null) {
      throw new runtime.RequiredError(
        "password",
        'Required parameter "password" was null or undefined when calling loginApiAuthLoginPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: "application/x-www-form-urlencoded" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["grantType"] != null) {
      formParams.append("grant_type", requestParameters["grantType"] as any);
    }

    if (requestParameters["username"] != null) {
      formParams.append("username", requestParameters["username"] as any);
    }

    if (requestParameters["password"] != null) {
      formParams.append("password", requestParameters["password"] as any);
    }

    if (requestParameters["scope"] != null) {
      formParams.append("scope", requestParameters["scope"] as any);
    }

    if (requestParameters["clientId"] != null) {
      formParams.append("client_id", requestParameters["clientId"] as any);
    }

    if (requestParameters["clientSecret"] != null) {
      formParams.append("client_secret", requestParameters["clientSecret"] as any);
    }

    let urlPath = `/api/auth/login`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => TokenResponseFromJSON(jsonValue));
  }

  /**
   * Authenticate user and return access/refresh tokens.  Args:     form_data: OAuth2 form data containing username and password     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: Access and refresh tokens  Raises:     HTTPException: If authentication fails
   * Login
   */
  async loginApiAuthLoginPost(
    requestParameters: LoginApiAuthLoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TokenResponse> {
    const response = await this.loginApiAuthLoginPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Logout user by revoking their token.  Args:     token: The access token to revoke     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * Logout
   */
  async logoutApiAuthLogoutPostRaw(
    requestParameters: LogoutApiAuthLogoutPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>> {
    if (requestParameters["token"] == null) {
      throw new runtime.RequiredError(
        "token",
        'Required parameter "token" was null or undefined when calling logoutApiAuthLogoutPost().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["token"] != null) {
      queryParameters["token"] = requestParameters["token"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/auth/logout`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Logout user by revoking their token.  Args:     token: The access token to revoke     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * Logout
   */
  async logoutApiAuthLogoutPost(
    requestParameters: LogoutApiAuthLogoutPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }> {
    const response = await this.logoutApiAuthLogoutPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Refresh access token using a valid refresh token.  Args:     refresh_token: The refresh token     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: New access and refresh tokens  Raises:     HTTPException: If refresh token is invalid
   * Refresh Tokens
   */
  async refreshTokensApiAuthRefreshPostRaw(
    requestParameters: RefreshTokensApiAuthRefreshPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<TokenResponse>> {
    if (requestParameters["refreshToken"] == null) {
      throw new runtime.RequiredError(
        "refreshToken",
        'Required parameter "refreshToken" was null or undefined when calling refreshTokensApiAuthRefreshPost().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters["refreshToken"] != null) {
      queryParameters["refresh_token"] = requestParameters["refreshToken"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/auth/refresh`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => TokenResponseFromJSON(jsonValue));
  }

  /**
   * Refresh access token using a valid refresh token.  Args:     refresh_token: The refresh token     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: New access and refresh tokens  Raises:     HTTPException: If refresh token is invalid
   * Refresh Tokens
   */
  async refreshTokensApiAuthRefreshPost(
    requestParameters: RefreshTokensApiAuthRefreshPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<TokenResponse> {
    const response = await this.refreshTokensApiAuthRefreshPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Register a new user.  Args:     user_data: User creation data     auth_manager: Authentication manager instance  Returns:     UserPublic: The created user (without sensitive data)  Raises:     HTTPException: If user creation fails
   * Register
   */
  async registerApiAuthRegisterPostRaw(
    requestParameters: RegisterApiAuthRegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPublic>> {
    if (requestParameters["userCreate"] == null) {
      throw new runtime.RequiredError(
        "userCreate",
        'Required parameter "userCreate" was null or undefined when calling registerApiAuthRegisterPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/auth/register`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserCreateToJSON(requestParameters["userCreate"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => UserPublicFromJSON(jsonValue));
  }

  /**
   * Register a new user.  Args:     user_data: User creation data     auth_manager: Authentication manager instance  Returns:     UserPublic: The created user (without sensitive data)  Raises:     HTTPException: If user creation fails
   * Register
   */
  async registerApiAuthRegisterPost(
    requestParameters: RegisterApiAuthRegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPublic> {
    const response = await this.registerApiAuthRegisterPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Revoke all tokens for a user (admin only).  Args:     username: Username whose tokens should be revoked     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * Revoke User Tokens
   */
  async revokeUserTokensApiAuthUsersUsernameRevokeTokensPostRaw(
    requestParameters: RevokeUserTokensApiAuthUsersUsernameRevokeTokensPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: string | null }>> {
    if (requestParameters["username"] == null) {
      throw new runtime.RequiredError(
        "username",
        'Required parameter "username" was null or undefined when calling revokeUserTokensApiAuthUsersUsernameRevokeTokensPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/auth/users/{username}/revoke-tokens`;
    urlPath = urlPath.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters["username"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Revoke all tokens for a user (admin only).  Args:     username: Username whose tokens should be revoked     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
   * Revoke User Tokens
   */
  async revokeUserTokensApiAuthUsersUsernameRevokeTokensPost(
    requestParameters: RevokeUserTokensApiAuthUsersUsernameRevokeTokensPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: string | null }> {
    const response = await this.revokeUserTokensApiAuthUsersUsernameRevokeTokensPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update current user information.  Args:     user_update: User update data     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information
   * Update Current User
   */
  async updateCurrentUserApiAuthMePutRaw(
    requestParameters: UpdateCurrentUserApiAuthMePutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPublic>> {
    if (requestParameters["userUpdate"] == null) {
      throw new runtime.RequiredError(
        "userUpdate",
        'Required parameter "userUpdate" was null or undefined when calling updateCurrentUserApiAuthMePut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/auth/me`;

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UserUpdateToJSON(requestParameters["userUpdate"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => UserPublicFromJSON(jsonValue));
  }

  /**
   * Update current user information.  Args:     user_update: User update data     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information
   * Update Current User
   */
  async updateCurrentUserApiAuthMePut(
    requestParameters: UpdateCurrentUserApiAuthMePutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPublic> {
    const response = await this.updateCurrentUserApiAuthMePutRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update user by username (admin only).  Args:     username: Username to update     user_update: User update data     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information  Raises:     HTTPException: If user not found or update fails
   * Update User
   */
  async updateUserApiAuthUsersUsernamePutRaw(
    requestParameters: UpdateUserApiAuthUsersUsernamePutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPublic>> {
    if (requestParameters["username"] == null) {
      throw new runtime.RequiredError(
        "username",
        'Required parameter "username" was null or undefined when calling updateUserApiAuthUsersUsernamePut().'
      );
    }

    if (requestParameters["userUpdate"] == null) {
      throw new runtime.RequiredError(
        "userUpdate",
        'Required parameter "userUpdate" was null or undefined when calling updateUserApiAuthUsersUsernamePut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/auth/users/{username}`;
    urlPath = urlPath.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters["username"])));

    const response = await this.request(
      {
        path: urlPath,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UserUpdateToJSON(requestParameters["userUpdate"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => UserPublicFromJSON(jsonValue));
  }

  /**
   * Update user by username (admin only).  Args:     username: Username to update     user_update: User update data     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information  Raises:     HTTPException: If user not found or update fails
   * Update User
   */
  async updateUserApiAuthUsersUsernamePut(
    requestParameters: UpdateUserApiAuthUsersUsernamePutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPublic> {
    const response = await this.updateUserApiAuthUsersUsernamePutRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
