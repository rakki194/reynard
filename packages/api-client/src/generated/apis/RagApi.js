/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { RAGConfigRequestToJSON, RAGConfigResponseFromJSON, RAGIndexingStatusResponseFromJSON, RAGIngestRequestToJSON, RAGIngestResponseFromJSON, RAGQueryRequestToJSON, RAGQueryResponseFromJSON, RAGStatsResponseFromJSON, } from "../models/index";
/**
 *
 */
export class RagApi extends runtime.BaseAPI {
    /**
     * Clear the RAG system cache.
     * Clear Cache
     */
    async clearCacheApiRagApiRagAdminClearCachePostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/rag/api/rag/admin/clear-cache`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Clear the RAG system cache.
     * Clear Cache
     */
    async clearCacheApiRagApiRagAdminClearCachePost(initOverrides) {
        const response = await this.clearCacheApiRagApiRagAdminClearCachePostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Clear the RAG system cache.
     * Clear Cache
     */
    async clearCacheApiRagApiRagAdminClearCachePost_1Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/rag/api/rag/admin/clear-cache`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Clear the RAG system cache.
     * Clear Cache
     */
    async clearCacheApiRagApiRagAdminClearCachePost_1(initOverrides) {
        const response = await this.clearCacheApiRagApiRagAdminClearCachePost_1Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get current indexing status.
     * Get Indexing Status
     */
    async getIndexingStatusApiRagApiRagAdminIndexingStatusGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/rag/api/rag/admin/indexing-status`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGIndexingStatusResponseFromJSON(jsonValue));
    }
    /**
     * Get current indexing status.
     * Get Indexing Status
     */
    async getIndexingStatusApiRagApiRagAdminIndexingStatusGet(initOverrides) {
        const response = await this.getIndexingStatusApiRagApiRagAdminIndexingStatusGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get current indexing status.
     * Get Indexing Status
     */
    async getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/rag/api/rag/admin/indexing-status`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGIndexingStatusResponseFromJSON(jsonValue));
    }
    /**
     * Get current indexing status.
     * Get Indexing Status
     */
    async getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2(initOverrides) {
        const response = await this.getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get current RAG configuration.
     * Get Rag Config
     */
    async getRagConfigApiRagApiRagConfigGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/rag/api/rag/config`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
    }
    /**
     * Get current RAG configuration.
     * Get Rag Config
     */
    async getRagConfigApiRagApiRagConfigGet(initOverrides) {
        const response = await this.getRagConfigApiRagApiRagConfigGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get current RAG configuration.
     * Get Rag Config
     */
    async getRagConfigApiRagApiRagConfigGet_3Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/rag/api/rag/config`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
    }
    /**
     * Get current RAG configuration.
     * Get Rag Config
     */
    async getRagConfigApiRagApiRagConfigGet_3(initOverrides) {
        const response = await this.getRagConfigApiRagApiRagConfigGet_3Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get RAG system statistics.
     * Get Rag Stats
     */
    async getRagStatsApiRagApiRagAdminStatsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/rag/api/rag/admin/stats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGStatsResponseFromJSON(jsonValue));
    }
    /**
     * Get RAG system statistics.
     * Get Rag Stats
     */
    async getRagStatsApiRagApiRagAdminStatsGet(initOverrides) {
        const response = await this.getRagStatsApiRagApiRagAdminStatsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get RAG system statistics.
     * Get Rag Stats
     */
    async getRagStatsApiRagApiRagAdminStatsGet_4Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/rag/api/rag/admin/stats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGStatsResponseFromJSON(jsonValue));
    }
    /**
     * Get RAG system statistics.
     * Get Rag Stats
     */
    async getRagStatsApiRagApiRagAdminStatsGet_4(initOverrides) {
        const response = await this.getRagStatsApiRagApiRagAdminStatsGet_4Raw(initOverrides);
        return await response.value();
    }
    /**
     * Ingest documents into the RAG system.
     * Ingest Documents
     */
    async ingestDocumentsApiRagApiRagIngestPostRaw(requestParameters, initOverrides) {
        if (requestParameters["rAGIngestRequest"] == null) {
            throw new runtime.RequiredError("rAGIngestRequest", 'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsApiRagApiRagIngestPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/rag/api/rag/ingest`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGIngestResponseFromJSON(jsonValue));
    }
    /**
     * Ingest documents into the RAG system.
     * Ingest Documents
     */
    async ingestDocumentsApiRagApiRagIngestPost(requestParameters, initOverrides) {
        const response = await this.ingestDocumentsApiRagApiRagIngestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Ingest documents into the RAG system.
     * Ingest Documents
     */
    async ingestDocumentsApiRagApiRagIngestPost_5Raw(requestParameters, initOverrides) {
        if (requestParameters["rAGIngestRequest"] == null) {
            throw new runtime.RequiredError("rAGIngestRequest", 'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsApiRagApiRagIngestPost_5().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/rag/api/rag/ingest`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGIngestResponseFromJSON(jsonValue));
    }
    /**
     * Ingest documents into the RAG system.
     * Ingest Documents
     */
    async ingestDocumentsApiRagApiRagIngestPost_5(requestParameters, initOverrides) {
        const response = await this.ingestDocumentsApiRagApiRagIngestPost_5Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Stream document ingestion progress.
     * Ingest Documents Stream
     */
    async ingestDocumentsStreamApiRagApiRagIngestStreamPostRaw(requestParameters, initOverrides) {
        if (requestParameters["rAGIngestRequest"] == null) {
            throw new runtime.RequiredError("rAGIngestRequest", 'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsStreamApiRagApiRagIngestStreamPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/rag/api/rag/ingest/stream`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Stream document ingestion progress.
     * Ingest Documents Stream
     */
    async ingestDocumentsStreamApiRagApiRagIngestStreamPost(requestParameters, initOverrides) {
        const response = await this.ingestDocumentsStreamApiRagApiRagIngestStreamPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Stream document ingestion progress.
     * Ingest Documents Stream
     */
    async ingestDocumentsStreamApiRagApiRagIngestStreamPost_6Raw(requestParameters, initOverrides) {
        if (requestParameters["rAGIngestRequest"] == null) {
            throw new runtime.RequiredError("rAGIngestRequest", 'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsStreamApiRagApiRagIngestStreamPost_6().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/rag/api/rag/ingest/stream`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Stream document ingestion progress.
     * Ingest Documents Stream
     */
    async ingestDocumentsStreamApiRagApiRagIngestStreamPost_6(requestParameters, initOverrides) {
        const response = await this.ingestDocumentsStreamApiRagApiRagIngestStreamPost_6Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Perform semantic search using RAG system.
     * Query Rag
     */
    async queryRagApiRagApiRagQueryPostRaw(requestParameters, initOverrides) {
        if (requestParameters["rAGQueryRequest"] == null) {
            throw new runtime.RequiredError("rAGQueryRequest", 'Required parameter "rAGQueryRequest" was null or undefined when calling queryRagApiRagApiRagQueryPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/rag/api/rag/query`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: RAGQueryRequestToJSON(requestParameters["rAGQueryRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGQueryResponseFromJSON(jsonValue));
    }
    /**
     * Perform semantic search using RAG system.
     * Query Rag
     */
    async queryRagApiRagApiRagQueryPost(requestParameters, initOverrides) {
        const response = await this.queryRagApiRagApiRagQueryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Perform semantic search using RAG system.
     * Query Rag
     */
    async queryRagApiRagApiRagQueryPost_7Raw(requestParameters, initOverrides) {
        if (requestParameters["rAGQueryRequest"] == null) {
            throw new runtime.RequiredError("rAGQueryRequest", 'Required parameter "rAGQueryRequest" was null or undefined when calling queryRagApiRagApiRagQueryPost_7().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/rag/api/rag/query`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: RAGQueryRequestToJSON(requestParameters["rAGQueryRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGQueryResponseFromJSON(jsonValue));
    }
    /**
     * Perform semantic search using RAG system.
     * Query Rag
     */
    async queryRagApiRagApiRagQueryPost_7(requestParameters, initOverrides) {
        const response = await this.queryRagApiRagApiRagQueryPost_7Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Rebuild the vector index.
     * Rebuild Index
     */
    async rebuildIndexApiRagApiRagAdminRebuildIndexPostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/rag/api/rag/admin/rebuild-index`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Rebuild the vector index.
     * Rebuild Index
     */
    async rebuildIndexApiRagApiRagAdminRebuildIndexPost(initOverrides) {
        const response = await this.rebuildIndexApiRagApiRagAdminRebuildIndexPostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Rebuild the vector index.
     * Rebuild Index
     */
    async rebuildIndexApiRagApiRagAdminRebuildIndexPost_8Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/rag/api/rag/admin/rebuild-index`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Rebuild the vector index.
     * Rebuild Index
     */
    async rebuildIndexApiRagApiRagAdminRebuildIndexPost_8(initOverrides) {
        const response = await this.rebuildIndexApiRagApiRagAdminRebuildIndexPost_8Raw(initOverrides);
        return await response.value();
    }
    /**
     * Update RAG configuration.
     * Update Rag Config
     */
    async updateRagConfigApiRagApiRagConfigPostRaw(requestParameters, initOverrides) {
        if (requestParameters["rAGConfigRequest"] == null) {
            throw new runtime.RequiredError("rAGConfigRequest", 'Required parameter "rAGConfigRequest" was null or undefined when calling updateRagConfigApiRagApiRagConfigPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/rag/api/rag/config`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: RAGConfigRequestToJSON(requestParameters["rAGConfigRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
    }
    /**
     * Update RAG configuration.
     * Update Rag Config
     */
    async updateRagConfigApiRagApiRagConfigPost(requestParameters, initOverrides) {
        const response = await this.updateRagConfigApiRagApiRagConfigPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update RAG configuration.
     * Update Rag Config
     */
    async updateRagConfigApiRagApiRagConfigPost_9Raw(requestParameters, initOverrides) {
        if (requestParameters["rAGConfigRequest"] == null) {
            throw new runtime.RequiredError("rAGConfigRequest", 'Required parameter "rAGConfigRequest" was null or undefined when calling updateRagConfigApiRagApiRagConfigPost_9().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/rag/api/rag/config`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: RAGConfigRequestToJSON(requestParameters["rAGConfigRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
    }
    /**
     * Update RAG configuration.
     * Update Rag Config
     */
    async updateRagConfigApiRagApiRagConfigPost_9(requestParameters, initOverrides) {
        const response = await this.updateRagConfigApiRagApiRagConfigPost_9Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
