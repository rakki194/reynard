/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  HTTPValidationError,
  NLWebAskRequest,
  NLWebHealthStatus,
  NLWebMCPRequest,
  NLWebPerformanceStats,
  NLWebRollbackRequest,
  NLWebRollbackResponse,
  NLWebSitesResponse,
  NLWebSuggestionRequest,
  NLWebSuggestionResponse,
  NLWebTool,
  NLWebVerificationResponse,
} from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  NLWebAskRequestFromJSON,
  NLWebAskRequestToJSON,
  NLWebHealthStatusFromJSON,
  NLWebHealthStatusToJSON,
  NLWebMCPRequestFromJSON,
  NLWebMCPRequestToJSON,
  NLWebPerformanceStatsFromJSON,
  NLWebPerformanceStatsToJSON,
  NLWebRollbackRequestFromJSON,
  NLWebRollbackRequestToJSON,
  NLWebRollbackResponseFromJSON,
  NLWebRollbackResponseToJSON,
  NLWebSitesResponseFromJSON,
  NLWebSitesResponseToJSON,
  NLWebSuggestionRequestFromJSON,
  NLWebSuggestionRequestToJSON,
  NLWebSuggestionResponseFromJSON,
  NLWebSuggestionResponseToJSON,
  NLWebToolFromJSON,
  NLWebToolToJSON,
  NLWebVerificationResponseFromJSON,
  NLWebVerificationResponseToJSON,
} from "../models/index";

export interface DisableToolApiNlwebToolsToolNameDisablePostRequest {
  toolName: string;
}

export interface EnableRollbackApiNlwebRollbackPostRequest {
  nLWebRollbackRequest: NLWebRollbackRequest;
}

export interface EnableToolApiNlwebToolsToolNameEnablePostRequest {
  toolName: string;
}

export interface GetToolsApiNlwebToolsGetRequest {
  category?: string | null;
  tags?: string | null;
}

export interface ProxyAskApiNlwebAskPostRequest {
  nLWebAskRequest: NLWebAskRequest;
}

export interface ProxyMcpApiNlwebMcpPostRequest {
  nLWebMCPRequest: NLWebMCPRequest;
}

export interface RegisterToolApiNlwebToolsPostRequest {
  nLWebTool: NLWebTool;
}

export interface SuggestToolsApiNlwebSuggestPostRequest {
  nLWebSuggestionRequest: NLWebSuggestionRequest;
}

export interface UnregisterToolApiNlwebToolsToolNameDeleteRequest {
  toolName: string;
}

/**
 * NlwebApi - interface
 *
 * @export
 * @interface NlwebApiInterface
 */
export interface NlwebApiInterface {
  /**
   * Clear the NLWeb suggestion cache.
   * @summary Clear Cache
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  clearCacheApiNlwebCacheClearPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Clear the NLWeb suggestion cache.
   * Clear Cache
   */
  clearCacheApiNlwebCacheClearPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Disable an NLWeb tool.
   * @summary Disable Tool
   * @param {string} toolName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  disableToolApiNlwebToolsToolNameDisablePostRaw(
    requestParameters: DisableToolApiNlwebToolsToolNameDisablePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Disable an NLWeb tool.
   * Disable Tool
   */
  disableToolApiNlwebToolsToolNameDisablePost(
    requestParameters: DisableToolApiNlwebToolsToolNameDisablePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Enable or disable emergency rollback for NLWeb integration.  This endpoint allows administrators to quickly disable NLWeb functionality in case of issues or performance problems.
   * @summary Enable Rollback
   * @param {NLWebRollbackRequest} nLWebRollbackRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  enableRollbackApiNlwebRollbackPostRaw(
    requestParameters: EnableRollbackApiNlwebRollbackPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebRollbackResponse>>;

  /**
   * Enable or disable emergency rollback for NLWeb integration.  This endpoint allows administrators to quickly disable NLWeb functionality in case of issues or performance problems.
   * Enable Rollback
   */
  enableRollbackApiNlwebRollbackPost(
    requestParameters: EnableRollbackApiNlwebRollbackPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebRollbackResponse>;

  /**
   * Enable an NLWeb tool.
   * @summary Enable Tool
   * @param {string} toolName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  enableToolApiNlwebToolsToolNameEnablePostRaw(
    requestParameters: EnableToolApiNlwebToolsToolNameEnablePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Enable an NLWeb tool.
   * Enable Tool
   */
  enableToolApiNlwebToolsToolNameEnablePost(
    requestParameters: EnableToolApiNlwebToolsToolNameEnablePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Force a health check of the NLWeb service.
   * @summary Force Health Check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  forceHealthCheckApiNlwebHealthForceCheckPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Force a health check of the NLWeb service.
   * Force Health Check
   */
  forceHealthCheckApiNlwebHealthForceCheckPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get NLWeb service health status.
   * @summary Get Health
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  getHealthApiNlwebHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebHealthStatus>>;

  /**
   * Get NLWeb service health status.
   * Get Health
   */
  getHealthApiNlwebHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebHealthStatus>;

  /**
   * Get NLWeb service performance statistics.
   * @summary Get Performance Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  getPerformanceStatsApiNlwebPerformanceGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebPerformanceStats>>;

  /**
   * Get NLWeb service performance statistics.
   * Get Performance Stats
   */
  getPerformanceStatsApiNlwebPerformanceGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebPerformanceStats>;

  /**
   * Get NLWeb integration status and performance metrics.
   * @summary Get Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  getStatusApiNlwebStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get NLWeb integration status and performance metrics.
   * Get Status
   */
  getStatusApiNlwebStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get available NLWeb tools, optionally filtered by category or tags.
   * @summary Get Tools
   * @param {string} [category]
   * @param {string} [tags]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  getToolsApiNlwebToolsGetRaw(
    requestParameters: GetToolsApiNlwebToolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get available NLWeb tools, optionally filtered by category or tags.
   * Get Tools
   */
  getToolsApiNlwebToolsGet(
    requestParameters: GetToolsApiNlwebToolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get NLWeb integration verification checklist for rollout.  This endpoint provides a comprehensive checklist to verify that NLWeb is properly configured and performing well before full rollout.
   * @summary Get Verification Checklist
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  getVerificationChecklistApiNlwebVerificationGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebVerificationResponse>>;

  /**
   * Get NLWeb integration verification checklist for rollout.  This endpoint provides a comprehensive checklist to verify that NLWeb is properly configured and performing well before full rollout.
   * Get Verification Checklist
   */
  getVerificationChecklistApiNlwebVerificationGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebVerificationResponse>;

  /**
   * Proxy NLWeb /ask endpoint with SSE streaming support.  This endpoint forwards requests to an external NLWeb service and streams the response back to the client with proper event mapping.
   * @summary Proxy Ask
   * @param {NLWebAskRequest} nLWebAskRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  proxyAskApiNlwebAskPostRaw(
    requestParameters: ProxyAskApiNlwebAskPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Proxy NLWeb /ask endpoint with SSE streaming support.  This endpoint forwards requests to an external NLWeb service and streams the response back to the client with proper event mapping.
   * Proxy Ask
   */
  proxyAskApiNlwebAskPost(
    requestParameters: ProxyAskApiNlwebAskPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Proxy NLWeb MCP (Model Context Protocol) endpoint.  This endpoint forwards JSON-RPC requests to an external NLWeb MCP service.
   * @summary Proxy Mcp
   * @param {NLWebMCPRequest} nLWebMCPRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  proxyMcpApiNlwebMcpPostRaw(
    requestParameters: ProxyMcpApiNlwebMcpPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Proxy NLWeb MCP (Model Context Protocol) endpoint.  This endpoint forwards JSON-RPC requests to an external NLWeb MCP service.
   * Proxy Mcp
   */
  proxyMcpApiNlwebMcpPost(
    requestParameters: ProxyMcpApiNlwebMcpPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Proxy NLWeb /sites endpoint to list available sites.
   * @summary Proxy Sites
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  proxySitesApiNlwebSitesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebSitesResponse>>;

  /**
   * Proxy NLWeb /sites endpoint to list available sites.
   * Proxy Sites
   */
  proxySitesApiNlwebSitesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebSitesResponse>;

  /**
   * Register a new NLWeb tool.
   * @summary Register Tool
   * @param {NLWebTool} nLWebTool
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  registerToolApiNlwebToolsPostRaw(
    requestParameters: RegisterToolApiNlwebToolsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Register a new NLWeb tool.
   * Register Tool
   */
  registerToolApiNlwebToolsPost(
    requestParameters: RegisterToolApiNlwebToolsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Suggest tools for a natural language query using the NLWeb router service.  This endpoint analyzes the query and suggests appropriate tools with parameters based on context and tool relevance.
   * @summary Suggest Tools
   * @param {NLWebSuggestionRequest} nLWebSuggestionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  suggestToolsApiNlwebSuggestPostRaw(
    requestParameters: SuggestToolsApiNlwebSuggestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebSuggestionResponse>>;

  /**
   * Suggest tools for a natural language query using the NLWeb router service.  This endpoint analyzes the query and suggests appropriate tools with parameters based on context and tool relevance.
   * Suggest Tools
   */
  suggestToolsApiNlwebSuggestPost(
    requestParameters: SuggestToolsApiNlwebSuggestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebSuggestionResponse>;

  /**
   * Unregister an NLWeb tool.
   * @summary Unregister Tool
   * @param {string} toolName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof NlwebApiInterface
   */
  unregisterToolApiNlwebToolsToolNameDeleteRaw(
    requestParameters: UnregisterToolApiNlwebToolsToolNameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Unregister an NLWeb tool.
   * Unregister Tool
   */
  unregisterToolApiNlwebToolsToolNameDelete(
    requestParameters: UnregisterToolApiNlwebToolsToolNameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;
}

/**
 *
 */
export class NlwebApi extends runtime.BaseAPI implements NlwebApiInterface {
  /**
   * Clear the NLWeb suggestion cache.
   * Clear Cache
   */
  async clearCacheApiNlwebCacheClearPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/cache/clear`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Clear the NLWeb suggestion cache.
   * Clear Cache
   */
  async clearCacheApiNlwebCacheClearPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.clearCacheApiNlwebCacheClearPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Disable an NLWeb tool.
   * Disable Tool
   */
  async disableToolApiNlwebToolsToolNameDisablePostRaw(
    requestParameters: DisableToolApiNlwebToolsToolNameDisablePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["toolName"] == null) {
      throw new runtime.RequiredError(
        "toolName",
        'Required parameter "toolName" was null or undefined when calling disableToolApiNlwebToolsToolNameDisablePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/tools/{tool_name}/disable`;
    urlPath = urlPath.replace(
      `{${"tool_name"}}`,
      encodeURIComponent(String(requestParameters["toolName"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Disable an NLWeb tool.
   * Disable Tool
   */
  async disableToolApiNlwebToolsToolNameDisablePost(
    requestParameters: DisableToolApiNlwebToolsToolNameDisablePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.disableToolApiNlwebToolsToolNameDisablePostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Enable or disable emergency rollback for NLWeb integration.  This endpoint allows administrators to quickly disable NLWeb functionality in case of issues or performance problems.
   * Enable Rollback
   */
  async enableRollbackApiNlwebRollbackPostRaw(
    requestParameters: EnableRollbackApiNlwebRollbackPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebRollbackResponse>> {
    if (requestParameters["nLWebRollbackRequest"] == null) {
      throw new runtime.RequiredError(
        "nLWebRollbackRequest",
        'Required parameter "nLWebRollbackRequest" was null or undefined when calling enableRollbackApiNlwebRollbackPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/rollback`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NLWebRollbackRequestToJSON(
          requestParameters["nLWebRollbackRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NLWebRollbackResponseFromJSON(jsonValue),
    );
  }

  /**
   * Enable or disable emergency rollback for NLWeb integration.  This endpoint allows administrators to quickly disable NLWeb functionality in case of issues or performance problems.
   * Enable Rollback
   */
  async enableRollbackApiNlwebRollbackPost(
    requestParameters: EnableRollbackApiNlwebRollbackPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebRollbackResponse> {
    const response = await this.enableRollbackApiNlwebRollbackPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Enable an NLWeb tool.
   * Enable Tool
   */
  async enableToolApiNlwebToolsToolNameEnablePostRaw(
    requestParameters: EnableToolApiNlwebToolsToolNameEnablePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["toolName"] == null) {
      throw new runtime.RequiredError(
        "toolName",
        'Required parameter "toolName" was null or undefined when calling enableToolApiNlwebToolsToolNameEnablePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/tools/{tool_name}/enable`;
    urlPath = urlPath.replace(
      `{${"tool_name"}}`,
      encodeURIComponent(String(requestParameters["toolName"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Enable an NLWeb tool.
   * Enable Tool
   */
  async enableToolApiNlwebToolsToolNameEnablePost(
    requestParameters: EnableToolApiNlwebToolsToolNameEnablePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.enableToolApiNlwebToolsToolNameEnablePostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Force a health check of the NLWeb service.
   * Force Health Check
   */
  async forceHealthCheckApiNlwebHealthForceCheckPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/health/force-check`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Force a health check of the NLWeb service.
   * Force Health Check
   */
  async forceHealthCheckApiNlwebHealthForceCheckPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.forceHealthCheckApiNlwebHealthForceCheckPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get NLWeb service health status.
   * Get Health
   */
  async getHealthApiNlwebHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebHealthStatus>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NLWebHealthStatusFromJSON(jsonValue),
    );
  }

  /**
   * Get NLWeb service health status.
   * Get Health
   */
  async getHealthApiNlwebHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebHealthStatus> {
    const response = await this.getHealthApiNlwebHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get NLWeb service performance statistics.
   * Get Performance Stats
   */
  async getPerformanceStatsApiNlwebPerformanceGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebPerformanceStats>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/performance`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NLWebPerformanceStatsFromJSON(jsonValue),
    );
  }

  /**
   * Get NLWeb service performance statistics.
   * Get Performance Stats
   */
  async getPerformanceStatsApiNlwebPerformanceGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebPerformanceStats> {
    const response =
      await this.getPerformanceStatsApiNlwebPerformanceGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get NLWeb integration status and performance metrics.
   * Get Status
   */
  async getStatusApiNlwebStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/status`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get NLWeb integration status and performance metrics.
   * Get Status
   */
  async getStatusApiNlwebStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.getStatusApiNlwebStatusGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get available NLWeb tools, optionally filtered by category or tags.
   * Get Tools
   */
  async getToolsApiNlwebToolsGetRaw(
    requestParameters: GetToolsApiNlwebToolsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"];
    }

    if (requestParameters["tags"] != null) {
      queryParameters["tags"] = requestParameters["tags"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/tools`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get available NLWeb tools, optionally filtered by category or tags.
   * Get Tools
   */
  async getToolsApiNlwebToolsGet(
    requestParameters: GetToolsApiNlwebToolsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.getToolsApiNlwebToolsGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get NLWeb integration verification checklist for rollout.  This endpoint provides a comprehensive checklist to verify that NLWeb is properly configured and performing well before full rollout.
   * Get Verification Checklist
   */
  async getVerificationChecklistApiNlwebVerificationGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebVerificationResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/verification`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NLWebVerificationResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get NLWeb integration verification checklist for rollout.  This endpoint provides a comprehensive checklist to verify that NLWeb is properly configured and performing well before full rollout.
   * Get Verification Checklist
   */
  async getVerificationChecklistApiNlwebVerificationGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebVerificationResponse> {
    const response =
      await this.getVerificationChecklistApiNlwebVerificationGetRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Proxy NLWeb /ask endpoint with SSE streaming support.  This endpoint forwards requests to an external NLWeb service and streams the response back to the client with proper event mapping.
   * Proxy Ask
   */
  async proxyAskApiNlwebAskPostRaw(
    requestParameters: ProxyAskApiNlwebAskPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["nLWebAskRequest"] == null) {
      throw new runtime.RequiredError(
        "nLWebAskRequest",
        'Required parameter "nLWebAskRequest" was null or undefined when calling proxyAskApiNlwebAskPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/ask`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NLWebAskRequestToJSON(requestParameters["nLWebAskRequest"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Proxy NLWeb /ask endpoint with SSE streaming support.  This endpoint forwards requests to an external NLWeb service and streams the response back to the client with proper event mapping.
   * Proxy Ask
   */
  async proxyAskApiNlwebAskPost(
    requestParameters: ProxyAskApiNlwebAskPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.proxyAskApiNlwebAskPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Proxy NLWeb MCP (Model Context Protocol) endpoint.  This endpoint forwards JSON-RPC requests to an external NLWeb MCP service.
   * Proxy Mcp
   */
  async proxyMcpApiNlwebMcpPostRaw(
    requestParameters: ProxyMcpApiNlwebMcpPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["nLWebMCPRequest"] == null) {
      throw new runtime.RequiredError(
        "nLWebMCPRequest",
        'Required parameter "nLWebMCPRequest" was null or undefined when calling proxyMcpApiNlwebMcpPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/mcp`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NLWebMCPRequestToJSON(requestParameters["nLWebMCPRequest"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Proxy NLWeb MCP (Model Context Protocol) endpoint.  This endpoint forwards JSON-RPC requests to an external NLWeb MCP service.
   * Proxy Mcp
   */
  async proxyMcpApiNlwebMcpPost(
    requestParameters: ProxyMcpApiNlwebMcpPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.proxyMcpApiNlwebMcpPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Proxy NLWeb /sites endpoint to list available sites.
   * Proxy Sites
   */
  async proxySitesApiNlwebSitesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebSitesResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/sites`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NLWebSitesResponseFromJSON(jsonValue),
    );
  }

  /**
   * Proxy NLWeb /sites endpoint to list available sites.
   * Proxy Sites
   */
  async proxySitesApiNlwebSitesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebSitesResponse> {
    const response = await this.proxySitesApiNlwebSitesGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Register a new NLWeb tool.
   * Register Tool
   */
  async registerToolApiNlwebToolsPostRaw(
    requestParameters: RegisterToolApiNlwebToolsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["nLWebTool"] == null) {
      throw new runtime.RequiredError(
        "nLWebTool",
        'Required parameter "nLWebTool" was null or undefined when calling registerToolApiNlwebToolsPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/tools`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NLWebToolToJSON(requestParameters["nLWebTool"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Register a new NLWeb tool.
   * Register Tool
   */
  async registerToolApiNlwebToolsPost(
    requestParameters: RegisterToolApiNlwebToolsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.registerToolApiNlwebToolsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Suggest tools for a natural language query using the NLWeb router service.  This endpoint analyzes the query and suggests appropriate tools with parameters based on context and tool relevance.
   * Suggest Tools
   */
  async suggestToolsApiNlwebSuggestPostRaw(
    requestParameters: SuggestToolsApiNlwebSuggestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<NLWebSuggestionResponse>> {
    if (requestParameters["nLWebSuggestionRequest"] == null) {
      throw new runtime.RequiredError(
        "nLWebSuggestionRequest",
        'Required parameter "nLWebSuggestionRequest" was null or undefined when calling suggestToolsApiNlwebSuggestPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/suggest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: NLWebSuggestionRequestToJSON(
          requestParameters["nLWebSuggestionRequest"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      NLWebSuggestionResponseFromJSON(jsonValue),
    );
  }

  /**
   * Suggest tools for a natural language query using the NLWeb router service.  This endpoint analyzes the query and suggests appropriate tools with parameters based on context and tool relevance.
   * Suggest Tools
   */
  async suggestToolsApiNlwebSuggestPost(
    requestParameters: SuggestToolsApiNlwebSuggestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<NLWebSuggestionResponse> {
    const response = await this.suggestToolsApiNlwebSuggestPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Unregister an NLWeb tool.
   * Unregister Tool
   */
  async unregisterToolApiNlwebToolsToolNameDeleteRaw(
    requestParameters: UnregisterToolApiNlwebToolsToolNameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["toolName"] == null) {
      throw new runtime.RequiredError(
        "toolName",
        'Required parameter "toolName" was null or undefined when calling unregisterToolApiNlwebToolsToolNameDelete().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("HTTPBearer", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/nlweb/tools/{tool_name}`;
    urlPath = urlPath.replace(
      `{${"tool_name"}}`,
      encodeURIComponent(String(requestParameters["toolName"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Unregister an NLWeb tool.
   * Unregister Tool
   */
  async unregisterToolApiNlwebToolsToolNameDelete(
    requestParameters: UnregisterToolApiNlwebToolsToolNameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.unregisterToolApiNlwebToolsToolNameDeleteRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
