/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { TokenResponseFromJSON, UserCreateToJSON, UserPublicFromJSON, UserUpdateToJSON, } from "../models/index";
/**
 *
 */
export class AuthenticationApi extends runtime.BaseAPI {
    /**
     * Change current user\'s password.  Args:     current_password: Current password     new_password: New password     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If password change fails
     * Change Password
     */
    async changePasswordApiAuthChangePasswordPostRaw(requestParameters, initOverrides) {
        if (requestParameters["currentPassword"] == null) {
            throw new runtime.RequiredError("currentPassword", 'Required parameter "currentPassword" was null or undefined when calling changePasswordApiAuthChangePasswordPost().');
        }
        if (requestParameters["newPassword"] == null) {
            throw new runtime.RequiredError("newPassword", 'Required parameter "newPassword" was null or undefined when calling changePasswordApiAuthChangePasswordPost().');
        }
        const queryParameters = {};
        if (requestParameters["currentPassword"] != null) {
            queryParameters["current_password"] = requestParameters["currentPassword"];
        }
        if (requestParameters["newPassword"] != null) {
            queryParameters["new_password"] = requestParameters["newPassword"];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }
        let urlPath = `/api/auth/change-password`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Change current user\'s password.  Args:     current_password: Current password     new_password: New password     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If password change fails
     * Change Password
     */
    async changePasswordApiAuthChangePasswordPost(requestParameters, initOverrides) {
        const response = await this.changePasswordApiAuthChangePasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Clean up expired tokens (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
     * Cleanup Expired Tokens
     */
    async cleanupExpiredTokensApiAuthCleanupPostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }
        let urlPath = `/api/auth/cleanup`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Clean up expired tokens (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
     * Cleanup Expired Tokens
     */
    async cleanupExpiredTokensApiAuthCleanupPost(initOverrides) {
        const response = await this.cleanupExpiredTokensApiAuthCleanupPostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Delete user by username (admin only).  Args:     username: Username to delete     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If user not found or deletion fails
     * Delete User
     */
    async deleteUserApiAuthUsersUsernameDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters["username"] == null) {
            throw new runtime.RequiredError("username", 'Required parameter "username" was null or undefined when calling deleteUserApiAuthUsersUsernameDelete().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }
        let urlPath = `/api/auth/users/{username}`;
        urlPath = urlPath.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters["username"])));
        const response = await this.request({
            path: urlPath,
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Delete user by username (admin only).  Args:     username: Username to delete     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message  Raises:     HTTPException: If user not found or deletion fails
     * Delete User
     */
    async deleteUserApiAuthUsersUsernameDelete(requestParameters, initOverrides) {
        const response = await this.deleteUserApiAuthUsersUsernameDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get authentication statistics (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Authentication statistics
     * Get Auth Stats
     */
    async getAuthStatsApiAuthStatsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }
        let urlPath = `/api/auth/stats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get authentication statistics (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Authentication statistics
     * Get Auth Stats
     */
    async getAuthStatsApiAuthStatsGet(initOverrides) {
        const response = await this.getAuthStatsApiAuthStatsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get current user information.  Args:     current_user: Current authenticated user  Returns:     UserPublic: Current user information
     * Get Current User Info
     */
    async getCurrentUserInfoApiAuthMeGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }
        let urlPath = `/api/auth/me`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => UserPublicFromJSON(jsonValue));
    }
    /**
     * Get current user information.  Args:     current_user: Current authenticated user  Returns:     UserPublic: Current user information
     * Get Current User Info
     */
    async getCurrentUserInfoApiAuthMeGet(initOverrides) {
        const response = await this.getCurrentUserInfoApiAuthMeGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get user by username (admin only).  Args:     username: Username to look up     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: User information  Raises:     HTTPException: If user not found
     * Get User
     */
    async getUserApiAuthUsersUsernameGetRaw(requestParameters, initOverrides) {
        if (requestParameters["username"] == null) {
            throw new runtime.RequiredError("username", 'Required parameter "username" was null or undefined when calling getUserApiAuthUsersUsernameGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }
        let urlPath = `/api/auth/users/{username}`;
        urlPath = urlPath.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters["username"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => UserPublicFromJSON(jsonValue));
    }
    /**
     * Get user by username (admin only).  Args:     username: Username to look up     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: User information  Raises:     HTTPException: If user not found
     * Get User
     */
    async getUserApiAuthUsersUsernameGet(requestParameters, initOverrides) {
        const response = await this.getUserApiAuthUsersUsernameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * List all users (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     list[UserPublic]: List of all users
     * List Users
     */
    async listUsersApiAuthUsersGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }
        let urlPath = `/api/auth/users`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(UserPublicFromJSON));
    }
    /**
     * List all users (admin only).  Args:     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     list[UserPublic]: List of all users
     * List Users
     */
    async listUsersApiAuthUsersGet(initOverrides) {
        const response = await this.listUsersApiAuthUsersGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Authenticate user and return access/refresh tokens.  Args:     form_data: OAuth2 form data containing username and password     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: Access and refresh tokens  Raises:     HTTPException: If authentication fails
     * Login
     */
    async loginApiAuthLoginPostRaw(requestParameters, initOverrides) {
        if (requestParameters["username"] == null) {
            throw new runtime.RequiredError("username", 'Required parameter "username" was null or undefined when calling loginApiAuthLoginPost().');
        }
        if (requestParameters["password"] == null) {
            throw new runtime.RequiredError("password", 'Required parameter "password" was null or undefined when calling loginApiAuthLoginPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const consumes = [{ contentType: "application/x-www-form-urlencoded" }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters["grantType"] != null) {
            formParams.append("grant_type", requestParameters["grantType"]);
        }
        if (requestParameters["username"] != null) {
            formParams.append("username", requestParameters["username"]);
        }
        if (requestParameters["password"] != null) {
            formParams.append("password", requestParameters["password"]);
        }
        if (requestParameters["scope"] != null) {
            formParams.append("scope", requestParameters["scope"]);
        }
        if (requestParameters["clientId"] != null) {
            formParams.append("client_id", requestParameters["clientId"]);
        }
        if (requestParameters["clientSecret"] != null) {
            formParams.append("client_secret", requestParameters["clientSecret"]);
        }
        let urlPath = `/api/auth/login`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TokenResponseFromJSON(jsonValue));
    }
    /**
     * Authenticate user and return access/refresh tokens.  Args:     form_data: OAuth2 form data containing username and password     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: Access and refresh tokens  Raises:     HTTPException: If authentication fails
     * Login
     */
    async loginApiAuthLoginPost(requestParameters, initOverrides) {
        const response = await this.loginApiAuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Logout user by revoking their token.  Args:     token: The access token to revoke     auth_manager: Authentication manager instance  Returns:     dict: Success message
     * Logout
     */
    async logoutApiAuthLogoutPostRaw(requestParameters, initOverrides) {
        if (requestParameters["token"] == null) {
            throw new runtime.RequiredError("token", 'Required parameter "token" was null or undefined when calling logoutApiAuthLogoutPost().');
        }
        const queryParameters = {};
        if (requestParameters["token"] != null) {
            queryParameters["token"] = requestParameters["token"];
        }
        const headerParameters = {};
        let urlPath = `/api/auth/logout`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Logout user by revoking their token.  Args:     token: The access token to revoke     auth_manager: Authentication manager instance  Returns:     dict: Success message
     * Logout
     */
    async logoutApiAuthLogoutPost(requestParameters, initOverrides) {
        const response = await this.logoutApiAuthLogoutPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Refresh access token using a valid refresh token.  Args:     refresh_token: The refresh token     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: New access and refresh tokens  Raises:     HTTPException: If refresh token is invalid
     * Refresh Tokens
     */
    async refreshTokensApiAuthRefreshPostRaw(requestParameters, initOverrides) {
        if (requestParameters["refreshToken"] == null) {
            throw new runtime.RequiredError("refreshToken", 'Required parameter "refreshToken" was null or undefined when calling refreshTokensApiAuthRefreshPost().');
        }
        const queryParameters = {};
        if (requestParameters["refreshToken"] != null) {
            queryParameters["refresh_token"] = requestParameters["refreshToken"];
        }
        const headerParameters = {};
        let urlPath = `/api/auth/refresh`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TokenResponseFromJSON(jsonValue));
    }
    /**
     * Refresh access token using a valid refresh token.  Args:     refresh_token: The refresh token     request: FastAPI request object for IP address extraction     auth_manager: Authentication manager instance  Returns:     TokenResponse: New access and refresh tokens  Raises:     HTTPException: If refresh token is invalid
     * Refresh Tokens
     */
    async refreshTokensApiAuthRefreshPost(requestParameters, initOverrides) {
        const response = await this.refreshTokensApiAuthRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Register a new user.  Args:     user_data: User creation data     auth_manager: Authentication manager instance  Returns:     UserPublic: The created user (without sensitive data)  Raises:     HTTPException: If user creation fails
     * Register
     */
    async registerApiAuthRegisterPostRaw(requestParameters, initOverrides) {
        if (requestParameters["userCreate"] == null) {
            throw new runtime.RequiredError("userCreate", 'Required parameter "userCreate" was null or undefined when calling registerApiAuthRegisterPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/auth/register`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters["userCreate"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => UserPublicFromJSON(jsonValue));
    }
    /**
     * Register a new user.  Args:     user_data: User creation data     auth_manager: Authentication manager instance  Returns:     UserPublic: The created user (without sensitive data)  Raises:     HTTPException: If user creation fails
     * Register
     */
    async registerApiAuthRegisterPost(requestParameters, initOverrides) {
        const response = await this.registerApiAuthRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Revoke all tokens for a user (admin only).  Args:     username: Username whose tokens should be revoked     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
     * Revoke User Tokens
     */
    async revokeUserTokensApiAuthUsersUsernameRevokeTokensPostRaw(requestParameters, initOverrides) {
        if (requestParameters["username"] == null) {
            throw new runtime.RequiredError("username", 'Required parameter "username" was null or undefined when calling revokeUserTokensApiAuthUsersUsernameRevokeTokensPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }
        let urlPath = `/api/auth/users/{username}/revoke-tokens`;
        urlPath = urlPath.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters["username"])));
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Revoke all tokens for a user (admin only).  Args:     username: Username whose tokens should be revoked     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     dict: Success message
     * Revoke User Tokens
     */
    async revokeUserTokensApiAuthUsersUsernameRevokeTokensPost(requestParameters, initOverrides) {
        const response = await this.revokeUserTokensApiAuthUsersUsernameRevokeTokensPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update current user information.  Args:     user_update: User update data     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information
     * Update Current User
     */
    async updateCurrentUserApiAuthMePutRaw(requestParameters, initOverrides) {
        if (requestParameters["userUpdate"] == null) {
            throw new runtime.RequiredError("userUpdate", 'Required parameter "userUpdate" was null or undefined when calling updateCurrentUserApiAuthMePut().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }
        let urlPath = `/api/auth/me`;
        const response = await this.request({
            path: urlPath,
            method: "PUT",
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateToJSON(requestParameters["userUpdate"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => UserPublicFromJSON(jsonValue));
    }
    /**
     * Update current user information.  Args:     user_update: User update data     current_user: Current authenticated user     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information
     * Update Current User
     */
    async updateCurrentUserApiAuthMePut(requestParameters, initOverrides) {
        const response = await this.updateCurrentUserApiAuthMePutRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update user by username (admin only).  Args:     username: Username to update     user_update: User update data     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information  Raises:     HTTPException: If user not found or update fails
     * Update User
     */
    async updateUserApiAuthUsersUsernamePutRaw(requestParameters, initOverrides) {
        if (requestParameters["username"] == null) {
            throw new runtime.RequiredError("username", 'Required parameter "username" was null or undefined when calling updateUserApiAuthUsersUsernamePut().');
        }
        if (requestParameters["userUpdate"] == null) {
            throw new runtime.RequiredError("userUpdate", 'Required parameter "userUpdate" was null or undefined when calling updateUserApiAuthUsersUsernamePut().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }
        let urlPath = `/api/auth/users/{username}`;
        urlPath = urlPath.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters["username"])));
        const response = await this.request({
            path: urlPath,
            method: "PUT",
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateToJSON(requestParameters["userUpdate"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => UserPublicFromJSON(jsonValue));
    }
    /**
     * Update user by username (admin only).  Args:     username: Username to update     user_update: User update data     current_user: Current authenticated user (must be admin)     auth_manager: Authentication manager instance  Returns:     UserPublic: Updated user information  Raises:     HTTPException: If user not found or update fails
     * Update User
     */
    async updateUserApiAuthUsersUsernamePut(requestParameters, initOverrides) {
        const response = await this.updateUserApiAuthUsersUsernamePutRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
