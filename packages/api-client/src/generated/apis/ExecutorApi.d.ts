/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import type { ExecutorConfigRequest, ExecutorStateResponse, ExecutorStatsResponse, TaskExecutionRequest, TaskInfoResponse } from "../models/index";
export interface ExecuteTaskApiExecutorApiExecutorExecutePostRequest {
    taskExecutionRequest: TaskExecutionRequest;
}
export interface ExecuteTaskApiExecutorApiExecutorExecutePost0Request {
    taskExecutionRequest: TaskExecutionRequest;
}
export interface InitializeExecutorApiExecutorApiExecutorInitializePostRequest {
    executorConfigRequest?: ExecutorConfigRequest;
}
export interface InitializeExecutorApiExecutorApiExecutorInitializePost0Request {
    executorConfigRequest?: ExecutorConfigRequest;
}
export interface ShutdownExecutorApiExecutorApiExecutorShutdownPostRequest {
    wait?: boolean;
}
export interface ShutdownExecutorApiExecutorApiExecutorShutdownPost0Request {
    wait?: boolean;
}
/**
 * ExecutorApi - interface
 *
 * @export
 * @interface ExecutorApiInterface
 */
export interface ExecutorApiInterface {
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * @summary Execute Task
     * @param {TaskExecutionRequest} taskExecutionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    executeTaskApiExecutorApiExecutorExecutePostRaw(requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * Execute Task
     */
    executeTaskApiExecutorApiExecutorExecutePost(requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * @summary Execute Task
     * @param {TaskExecutionRequest} taskExecutionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    executeTaskApiExecutorApiExecutorExecutePost_1Raw(requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * Execute Task
     */
    executeTaskApiExecutorApiExecutorExecutePost_1(requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Get information about active tasks.
     * @summary Get Active Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    getActiveTasksApiExecutorApiExecutorActiveTasksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskInfoResponse>>>;
    /**
     * Get information about active tasks.
     * Get Active Tasks
     */
    getActiveTasksApiExecutorApiExecutorActiveTasksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskInfoResponse>>;
    /**
     * Get information about active tasks.
     * @summary Get Active Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    getActiveTasksApiExecutorApiExecutorActiveTasksGet_2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskInfoResponse>>>;
    /**
     * Get information about active tasks.
     * Get Active Tasks
     */
    getActiveTasksApiExecutorApiExecutorActiveTasksGet_2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskInfoResponse>>;
    /**
     * Get the current state of the executor.
     * @summary Get Executor State
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    getExecutorStateApiExecutorApiExecutorStateGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecutorStateResponse>>;
    /**
     * Get the current state of the executor.
     * Get Executor State
     */
    getExecutorStateApiExecutorApiExecutorStateGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecutorStateResponse>;
    /**
     * Get the current state of the executor.
     * @summary Get Executor State
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    getExecutorStateApiExecutorApiExecutorStateGet_3Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecutorStateResponse>>;
    /**
     * Get the current state of the executor.
     * Get Executor State
     */
    getExecutorStateApiExecutorApiExecutorStateGet_3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecutorStateResponse>;
    /**
     * Get executor statistics.
     * @summary Get Executor Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    getExecutorStatsApiExecutorApiExecutorStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecutorStatsResponse>>;
    /**
     * Get executor statistics.
     * Get Executor Stats
     */
    getExecutorStatsApiExecutorApiExecutorStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecutorStatsResponse>;
    /**
     * Get executor statistics.
     * @summary Get Executor Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    getExecutorStatsApiExecutorApiExecutorStatsGet_4Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecutorStatsResponse>>;
    /**
     * Get executor statistics.
     * Get Executor Stats
     */
    getExecutorStatsApiExecutorApiExecutorStatsGet_4(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecutorStatsResponse>;
    /**
     * Health check endpoint for the executor service.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    healthCheckApiExecutorApiExecutorHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Health check endpoint for the executor service.
     * Health Check
     */
    healthCheckApiExecutorApiExecutorHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Health check endpoint for the executor service.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    healthCheckApiExecutorApiExecutorHealthGet_5Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Health check endpoint for the executor service.
     * Health Check
     */
    healthCheckApiExecutorApiExecutorHealthGet_5(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Initialize the executor with optional configuration.
     * @summary Initialize Executor
     * @param {ExecutorConfigRequest} [executorConfigRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    initializeExecutorApiExecutorApiExecutorInitializePostRaw(requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Initialize the executor with optional configuration.
     * Initialize Executor
     */
    initializeExecutorApiExecutorApiExecutorInitializePost(requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Initialize the executor with optional configuration.
     * @summary Initialize Executor
     * @param {ExecutorConfigRequest} [executorConfigRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    initializeExecutorApiExecutorApiExecutorInitializePost_6Raw(requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Initialize the executor with optional configuration.
     * Initialize Executor
     */
    initializeExecutorApiExecutorApiExecutorInitializePost_6(requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Shutdown the executor.
     * @summary Shutdown Executor
     * @param {boolean} [wait]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    shutdownExecutorApiExecutorApiExecutorShutdownPostRaw(requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Shutdown the executor.
     * Shutdown Executor
     */
    shutdownExecutorApiExecutorApiExecutorShutdownPost(requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Shutdown the executor.
     * @summary Shutdown Executor
     * @param {boolean} [wait]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecutorApiInterface
     */
    shutdownExecutorApiExecutorApiExecutorShutdownPost_7Raw(requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Shutdown the executor.
     * Shutdown Executor
     */
    shutdownExecutorApiExecutorApiExecutorShutdownPost_7(requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
}
/**
 *
 */
export declare class ExecutorApi extends runtime.BaseAPI implements ExecutorApiInterface {
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * Execute Task
     */
    executeTaskApiExecutorApiExecutorExecutePostRaw(requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * Execute Task
     */
    executeTaskApiExecutorApiExecutorExecutePost(requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * Execute Task
     */
    executeTaskApiExecutorApiExecutorExecutePost_1Raw(requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * Execute Task
     */
    executeTaskApiExecutorApiExecutorExecutePost_1(requestParameters: ExecuteTaskApiExecutorApiExecutorExecutePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Get information about active tasks.
     * Get Active Tasks
     */
    getActiveTasksApiExecutorApiExecutorActiveTasksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskInfoResponse>>>;
    /**
     * Get information about active tasks.
     * Get Active Tasks
     */
    getActiveTasksApiExecutorApiExecutorActiveTasksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskInfoResponse>>;
    /**
     * Get information about active tasks.
     * Get Active Tasks
     */
    getActiveTasksApiExecutorApiExecutorActiveTasksGet_2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskInfoResponse>>>;
    /**
     * Get information about active tasks.
     * Get Active Tasks
     */
    getActiveTasksApiExecutorApiExecutorActiveTasksGet_2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskInfoResponse>>;
    /**
     * Get the current state of the executor.
     * Get Executor State
     */
    getExecutorStateApiExecutorApiExecutorStateGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecutorStateResponse>>;
    /**
     * Get the current state of the executor.
     * Get Executor State
     */
    getExecutorStateApiExecutorApiExecutorStateGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecutorStateResponse>;
    /**
     * Get the current state of the executor.
     * Get Executor State
     */
    getExecutorStateApiExecutorApiExecutorStateGet_3Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecutorStateResponse>>;
    /**
     * Get the current state of the executor.
     * Get Executor State
     */
    getExecutorStateApiExecutorApiExecutorStateGet_3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecutorStateResponse>;
    /**
     * Get executor statistics.
     * Get Executor Stats
     */
    getExecutorStatsApiExecutorApiExecutorStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecutorStatsResponse>>;
    /**
     * Get executor statistics.
     * Get Executor Stats
     */
    getExecutorStatsApiExecutorApiExecutorStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecutorStatsResponse>;
    /**
     * Get executor statistics.
     * Get Executor Stats
     */
    getExecutorStatsApiExecutorApiExecutorStatsGet_4Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExecutorStatsResponse>>;
    /**
     * Get executor statistics.
     * Get Executor Stats
     */
    getExecutorStatsApiExecutorApiExecutorStatsGet_4(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExecutorStatsResponse>;
    /**
     * Health check endpoint for the executor service.
     * Health Check
     */
    healthCheckApiExecutorApiExecutorHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Health check endpoint for the executor service.
     * Health Check
     */
    healthCheckApiExecutorApiExecutorHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Health check endpoint for the executor service.
     * Health Check
     */
    healthCheckApiExecutorApiExecutorHealthGet_5Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Health check endpoint for the executor service.
     * Health Check
     */
    healthCheckApiExecutorApiExecutorHealthGet_5(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Initialize the executor with optional configuration.
     * Initialize Executor
     */
    initializeExecutorApiExecutorApiExecutorInitializePostRaw(requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Initialize the executor with optional configuration.
     * Initialize Executor
     */
    initializeExecutorApiExecutorApiExecutorInitializePost(requestParameters?: InitializeExecutorApiExecutorApiExecutorInitializePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Initialize the executor with optional configuration.
     * Initialize Executor
     */
    initializeExecutorApiExecutorApiExecutorInitializePost_6Raw(requestParameters: InitializeExecutorApiExecutorApiExecutorInitializePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Initialize the executor with optional configuration.
     * Initialize Executor
     */
    initializeExecutorApiExecutorApiExecutorInitializePost_6(requestParameters?: InitializeExecutorApiExecutorApiExecutorInitializePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Shutdown the executor.
     * Shutdown Executor
     */
    shutdownExecutorApiExecutorApiExecutorShutdownPostRaw(requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Shutdown the executor.
     * Shutdown Executor
     */
    shutdownExecutorApiExecutorApiExecutorShutdownPost(requestParameters?: ShutdownExecutorApiExecutorApiExecutorShutdownPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Shutdown the executor.
     * Shutdown Executor
     */
    shutdownExecutorApiExecutorApiExecutorShutdownPost_7Raw(requestParameters: ShutdownExecutorApiExecutorApiExecutorShutdownPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Shutdown the executor.
     * Shutdown Executor
     */
    shutdownExecutorApiExecutorApiExecutorShutdownPost_7(requestParameters?: ShutdownExecutorApiExecutorApiExecutorShutdownPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
}
