/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MCPToolCall,
  MCPToolResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MCPToolCallFromJSON,
    MCPToolCallToJSON,
    MCPToolResponseFromJSON,
    MCPToolResponseToJSON,
} from '../models/index';

export interface CallMcpToolApiMcpToolsCallPostRequest {
    mCPToolCall: MCPToolCall;
}

/**
 * McpToolsApi - interface
 * 
 * @export
 * @interface McpToolsApiInterface
 */
export interface McpToolsApiInterface {
    /**
     * Call an MCP tool and return its result. This connects to an external MCP server running on localhost:8001.
     * @summary Call Mcp Tool
     * @param {MCPToolCall} mCPToolCall 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpToolsApiInterface
     */
    callMcpToolApiMcpToolsCallPostRaw(requestParameters: CallMcpToolApiMcpToolsCallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MCPToolResponse>>;

    /**
     * Call an MCP tool and return its result. This connects to an external MCP server running on localhost:8001.
     * Call Mcp Tool
     */
    callMcpToolApiMcpToolsCallPost(requestParameters: CallMcpToolApiMcpToolsCallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MCPToolResponse>;

    /**
     * Check if the MCP server is accessible.
     * @summary Mcp Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof McpToolsApiInterface
     */
    mcpHealthCheckApiMcpToolsHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Check if the MCP server is accessible.
     * Mcp Health Check
     */
    mcpHealthCheckApiMcpToolsHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 * 
 */
export class McpToolsApi extends runtime.BaseAPI implements McpToolsApiInterface {

    /**
     * Call an MCP tool and return its result. This connects to an external MCP server running on localhost:8001.
     * Call Mcp Tool
     */
    async callMcpToolApiMcpToolsCallPostRaw(requestParameters: CallMcpToolApiMcpToolsCallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MCPToolResponse>> {
        if (requestParameters['mCPToolCall'] == null) {
            throw new runtime.RequiredError(
                'mCPToolCall',
                'Required parameter "mCPToolCall" was null or undefined when calling callMcpToolApiMcpToolsCallPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/mcp/tools/call`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MCPToolCallToJSON(requestParameters['mCPToolCall']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MCPToolResponseFromJSON(jsonValue));
    }

    /**
     * Call an MCP tool and return its result. This connects to an external MCP server running on localhost:8001.
     * Call Mcp Tool
     */
    async callMcpToolApiMcpToolsCallPost(requestParameters: CallMcpToolApiMcpToolsCallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MCPToolResponse> {
        const response = await this.callMcpToolApiMcpToolsCallPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if the MCP server is accessible.
     * Mcp Health Check
     */
    async mcpHealthCheckApiMcpToolsHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/mcp/tools/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Check if the MCP server is accessible.
     * Mcp Health Check
     */
    async mcpHealthCheckApiMcpToolsHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.mcpHealthCheckApiMcpToolsHealthGetRaw(initOverrides);
        return await response.value();
    }

}
