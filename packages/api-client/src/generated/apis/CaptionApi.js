/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { BatchCaptionRequestToJSON, CaptionRequestToJSON, CaptionResponseFromJSON, GeneratorInfoFromJSON, ModelLoadRequestToJSON, } from "../models/index";
/**
 *
 */
export class CaptionApi extends runtime.BaseAPI {
    /**
     * Generate captions for multiple images in batch.
     * Generate Batch Captions
     */
    async generateBatchCaptionsApiCaptionBatchPostRaw(requestParameters, initOverrides) {
        if (requestParameters["batchCaptionRequest"] == null) {
            throw new runtime.RequiredError("batchCaptionRequest", 'Required parameter "batchCaptionRequest" was null or undefined when calling generateBatchCaptionsApiCaptionBatchPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/caption/batch`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: BatchCaptionRequestToJSON(requestParameters["batchCaptionRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(CaptionResponseFromJSON));
    }
    /**
     * Generate captions for multiple images in batch.
     * Generate Batch Captions
     */
    async generateBatchCaptionsApiCaptionBatchPost(requestParameters, initOverrides) {
        const response = await this.generateBatchCaptionsApiCaptionBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Generate a caption for a single image.
     * Generate Caption
     */
    async generateCaptionApiCaptionGeneratePostRaw(requestParameters, initOverrides) {
        if (requestParameters["captionRequest"] == null) {
            throw new runtime.RequiredError("captionRequest", 'Required parameter "captionRequest" was null or undefined when calling generateCaptionApiCaptionGeneratePost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/caption/generate`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: CaptionRequestToJSON(requestParameters["captionRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => CaptionResponseFromJSON(jsonValue));
    }
    /**
     * Generate a caption for a single image.
     * Generate Caption
     */
    async generateCaptionApiCaptionGeneratePost(requestParameters, initOverrides) {
        const response = await this.generateCaptionApiCaptionGeneratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get information about all available caption generators.
     * Get Available Generators
     */
    async getAvailableGeneratorsApiCaptionGeneratorsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/caption/generators`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => runtime.mapValues(jsonValue, GeneratorInfoFromJSON));
    }
    /**
     * Get information about all available caption generators.
     * Get Available Generators
     */
    async getAvailableGeneratorsApiCaptionGeneratorsGet(initOverrides) {
        const response = await this.getAvailableGeneratorsApiCaptionGeneratorsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get information about a specific caption generator.
     * Get Generator Info
     */
    async getGeneratorInfoApiCaptionGeneratorsGeneratorNameGetRaw(requestParameters, initOverrides) {
        if (requestParameters["generatorName"] == null) {
            throw new runtime.RequiredError("generatorName", 'Required parameter "generatorName" was null or undefined when calling getGeneratorInfoApiCaptionGeneratorsGeneratorNameGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/caption/generators/{generator_name}`;
        urlPath = urlPath.replace(`{${"generator_name"}}`, encodeURIComponent(String(requestParameters["generatorName"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => GeneratorInfoFromJSON(jsonValue));
    }
    /**
     * Get information about a specific caption generator.
     * Get Generator Info
     */
    async getGeneratorInfoApiCaptionGeneratorsGeneratorNameGet(requestParameters, initOverrides) {
        const response = await this.getGeneratorInfoApiCaptionGeneratorsGeneratorNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get list of currently loaded models.
     * Get Loaded Models
     */
    async getLoadedModelsApiCaptionModelsLoadedGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/caption/models/loaded`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get list of currently loaded models.
     * Get Loaded Models
     */
    async getLoadedModelsApiCaptionModelsLoadedGet(initOverrides) {
        const response = await this.getLoadedModelsApiCaptionModelsLoadedGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Load a specific caption model.
     * Load Model
     */
    async loadModelApiCaptionModelsModelNameLoadPostRaw(requestParameters, initOverrides) {
        if (requestParameters["modelName"] == null) {
            throw new runtime.RequiredError("modelName", 'Required parameter "modelName" was null or undefined when calling loadModelApiCaptionModelsModelNameLoadPost().');
        }
        if (requestParameters["modelLoadRequest"] == null) {
            throw new runtime.RequiredError("modelLoadRequest", 'Required parameter "modelLoadRequest" was null or undefined when calling loadModelApiCaptionModelsModelNameLoadPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/caption/models/{model_name}/load`;
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters["modelName"])));
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ModelLoadRequestToJSON(requestParameters["modelLoadRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Load a specific caption model.
     * Load Model
     */
    async loadModelApiCaptionModelsModelNameLoadPost(requestParameters, initOverrides) {
        const response = await this.loadModelApiCaptionModelsModelNameLoadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Unload a specific caption model.
     * Unload Model
     */
    async unloadModelApiCaptionModelsModelNameUnloadPostRaw(requestParameters, initOverrides) {
        if (requestParameters["modelName"] == null) {
            throw new runtime.RequiredError("modelName", 'Required parameter "modelName" was null or undefined when calling unloadModelApiCaptionModelsModelNameUnloadPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/caption/models/{model_name}/unload`;
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters["modelName"])));
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Unload a specific caption model.
     * Unload Model
     */
    async unloadModelApiCaptionModelsModelNameUnloadPost(requestParameters, initOverrides) {
        const response = await this.unloadModelApiCaptionModelsModelNameUnloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
