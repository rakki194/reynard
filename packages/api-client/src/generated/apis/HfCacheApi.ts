/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  HFCacheInfoResponse,
  HTTPValidationError,
  ModelCacheInfoResponse,
} from "../models/index";
import {
  HFCacheInfoResponseFromJSON,
  HFCacheInfoResponseToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  ModelCacheInfoResponseFromJSON,
  ModelCacheInfoResponseToJSON,
} from "../models/index";

export interface CheckModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGetRequest {
  repoId: string;
}

export interface CheckModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet0Request {
  repoId: string;
}

export interface GetModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGetRequest {
  repoId: string;
  revision?: string;
}

export interface GetModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet0Request {
  repoId: string;
  revision?: string;
}

/**
 * HfCacheApi - interface
 *
 * @export
 * @interface HfCacheApiInterface
 */
export interface HfCacheApiInterface {
  /**
   * Check if a model is cached.
   * @summary Check Model Cached
   * @param {string} repoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGetRaw(
    requestParameters: CheckModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Check if a model is cached.
   * Check Model Cached
   */
  checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet(
    requestParameters: CheckModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Check if a model is cached.
   * @summary Check Model Cached
   * @param {string} repoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet_1Raw(
    requestParameters: CheckModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Check if a model is cached.
   * Check Model Cached
   */
  checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet_1(
    requestParameters: CheckModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Clear the HuggingFace cache.
   * @summary Clear Cache Endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  clearCacheEndpointApiHfCacheApiHfCacheClearDeleteRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Clear the HuggingFace cache.
   * Clear Cache Endpoint
   */
  clearCacheEndpointApiHfCacheApiHfCacheClearDelete(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Clear the HuggingFace cache.
   * @summary Clear Cache Endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  clearCacheEndpointApiHfCacheApiHfCacheClearDelete_2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Clear the HuggingFace cache.
   * Clear Cache Endpoint
   */
  clearCacheEndpointApiHfCacheApiHfCacheClearDelete_2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Ensure the HuggingFace cache directory exists.
   * @summary Ensure Cache Directory
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Ensure the HuggingFace cache directory exists.
   * Ensure Cache Directory
   */
  ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Ensure the HuggingFace cache directory exists.
   * @summary Ensure Cache Directory
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost_3Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Ensure the HuggingFace cache directory exists.
   * Ensure Cache Directory
   */
  ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost_3(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get the HuggingFace cache directory path.
   * @summary Get Cache Directory
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  getCacheDirectoryApiHfCacheApiHfCacheCacheDirGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get the HuggingFace cache directory path.
   * Get Cache Directory
   */
  getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get the HuggingFace cache directory path.
   * @summary Get Cache Directory
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet_4Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get the HuggingFace cache directory path.
   * Get Cache Directory
   */
  getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet_4(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get HuggingFace cache information.
   * @summary Get Cache Info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  getCacheInfoApiHfCacheApiHfCacheInfoGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HFCacheInfoResponse>>;

  /**
   * Get HuggingFace cache information.
   * Get Cache Info
   */
  getCacheInfoApiHfCacheApiHfCacheInfoGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HFCacheInfoResponse>;

  /**
   * Get HuggingFace cache information.
   * @summary Get Cache Info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  getCacheInfoApiHfCacheApiHfCacheInfoGet_5Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HFCacheInfoResponse>>;

  /**
   * Get HuggingFace cache information.
   * Get Cache Info
   */
  getCacheInfoApiHfCacheApiHfCacheInfoGet_5(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HFCacheInfoResponse>;

  /**
   * Get the total size of the HuggingFace cache.
   * @summary Get Cache Size Endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  getCacheSizeEndpointApiHfCacheApiHfCacheSizeGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get the total size of the HuggingFace cache.
   * Get Cache Size Endpoint
   */
  getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get the total size of the HuggingFace cache.
   * @summary Get Cache Size Endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet_6Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get the total size of the HuggingFace cache.
   * Get Cache Size Endpoint
   */
  getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet_6(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get the HuggingFace Hub directory path.
   * @summary Get Hub Directory
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  getHubDirectoryApiHfCacheApiHfCacheHubDirGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get the HuggingFace Hub directory path.
   * Get Hub Directory
   */
  getHubDirectoryApiHfCacheApiHfCacheHubDirGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get the HuggingFace Hub directory path.
   * @summary Get Hub Directory
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  getHubDirectoryApiHfCacheApiHfCacheHubDirGet_7Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Get the HuggingFace Hub directory path.
   * Get Hub Directory
   */
  getHubDirectoryApiHfCacheApiHfCacheHubDirGet_7(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any>;

  /**
   * Get cache information for a specific model.
   * @summary Get Model Cache Info
   * @param {string} repoId
   * @param {string} [revision]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGetRaw(
    requestParameters: GetModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ModelCacheInfoResponse>>;

  /**
   * Get cache information for a specific model.
   * Get Model Cache Info
   */
  getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet(
    requestParameters: GetModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ModelCacheInfoResponse>;

  /**
   * Get cache information for a specific model.
   * @summary Get Model Cache Info
   * @param {string} repoId
   * @param {string} [revision]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HfCacheApiInterface
   */
  getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet_8Raw(
    requestParameters: GetModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ModelCacheInfoResponse>>;

  /**
   * Get cache information for a specific model.
   * Get Model Cache Info
   */
  getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet_8(
    requestParameters: GetModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ModelCacheInfoResponse>;
}

/**
 *
 */
export class HfCacheApi extends runtime.BaseAPI implements HfCacheApiInterface {
  /**
   * Check if a model is cached.
   * Check Model Cached
   */
  async checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGetRaw(
    requestParameters: CheckModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["repoId"] == null) {
      throw new runtime.RequiredError(
        "repoId",
        'Required parameter "repoId" was null or undefined when calling checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/model/{repo_id}/cached`;
    urlPath = urlPath.replace(
      `{${"repo_id"}}`,
      encodeURIComponent(String(requestParameters["repoId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Check if a model is cached.
   * Check Model Cached
   */
  async checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet(
    requestParameters: CheckModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGetRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Check if a model is cached.
   * Check Model Cached
   */
  async checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet_1Raw(
    requestParameters: CheckModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["repoId"] == null) {
      throw new runtime.RequiredError(
        "repoId",
        'Required parameter "repoId" was null or undefined when calling checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet_1().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/model/{repo_id}/cached`;
    urlPath = urlPath.replace(
      `{${"repo_id"}}`,
      encodeURIComponent(String(requestParameters["repoId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Check if a model is cached.
   * Check Model Cached
   */
  async checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet_1(
    requestParameters: CheckModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet_1Raw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Clear the HuggingFace cache.
   * Clear Cache Endpoint
   */
  async clearCacheEndpointApiHfCacheApiHfCacheClearDeleteRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/clear`;

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Clear the HuggingFace cache.
   * Clear Cache Endpoint
   */
  async clearCacheEndpointApiHfCacheApiHfCacheClearDelete(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.clearCacheEndpointApiHfCacheApiHfCacheClearDeleteRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Clear the HuggingFace cache.
   * Clear Cache Endpoint
   */
  async clearCacheEndpointApiHfCacheApiHfCacheClearDelete_2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/clear`;

    const response = await this.request(
      {
        path: urlPath,
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Clear the HuggingFace cache.
   * Clear Cache Endpoint
   */
  async clearCacheEndpointApiHfCacheApiHfCacheClearDelete_2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.clearCacheEndpointApiHfCacheApiHfCacheClearDelete_2Raw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Ensure the HuggingFace cache directory exists.
   * Ensure Cache Directory
   */
  async ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/ensure-cache-dir`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Ensure the HuggingFace cache directory exists.
   * Ensure Cache Directory
   */
  async ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPostRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Ensure the HuggingFace cache directory exists.
   * Ensure Cache Directory
   */
  async ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost_3Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/ensure-cache-dir`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Ensure the HuggingFace cache directory exists.
   * Ensure Cache Directory
   */
  async ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost_3(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost_3Raw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get the HuggingFace cache directory path.
   * Get Cache Directory
   */
  async getCacheDirectoryApiHfCacheApiHfCacheCacheDirGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/cache-dir`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the HuggingFace cache directory path.
   * Get Cache Directory
   */
  async getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.getCacheDirectoryApiHfCacheApiHfCacheCacheDirGetRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get the HuggingFace cache directory path.
   * Get Cache Directory
   */
  async getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet_4Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/cache-dir`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the HuggingFace cache directory path.
   * Get Cache Directory
   */
  async getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet_4(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet_4Raw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get HuggingFace cache information.
   * Get Cache Info
   */
  async getCacheInfoApiHfCacheApiHfCacheInfoGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HFCacheInfoResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/info`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HFCacheInfoResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get HuggingFace cache information.
   * Get Cache Info
   */
  async getCacheInfoApiHfCacheApiHfCacheInfoGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HFCacheInfoResponse> {
    const response =
      await this.getCacheInfoApiHfCacheApiHfCacheInfoGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get HuggingFace cache information.
   * Get Cache Info
   */
  async getCacheInfoApiHfCacheApiHfCacheInfoGet_5Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HFCacheInfoResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/info`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HFCacheInfoResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get HuggingFace cache information.
   * Get Cache Info
   */
  async getCacheInfoApiHfCacheApiHfCacheInfoGet_5(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HFCacheInfoResponse> {
    const response =
      await this.getCacheInfoApiHfCacheApiHfCacheInfoGet_5Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get the total size of the HuggingFace cache.
   * Get Cache Size Endpoint
   */
  async getCacheSizeEndpointApiHfCacheApiHfCacheSizeGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/size`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the total size of the HuggingFace cache.
   * Get Cache Size Endpoint
   */
  async getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.getCacheSizeEndpointApiHfCacheApiHfCacheSizeGetRaw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get the total size of the HuggingFace cache.
   * Get Cache Size Endpoint
   */
  async getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet_6Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/size`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the total size of the HuggingFace cache.
   * Get Cache Size Endpoint
   */
  async getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet_6(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet_6Raw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get the HuggingFace Hub directory path.
   * Get Hub Directory
   */
  async getHubDirectoryApiHfCacheApiHfCacheHubDirGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/hub-dir`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the HuggingFace Hub directory path.
   * Get Hub Directory
   */
  async getHubDirectoryApiHfCacheApiHfCacheHubDirGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.getHubDirectoryApiHfCacheApiHfCacheHubDirGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get the HuggingFace Hub directory path.
   * Get Hub Directory
   */
  async getHubDirectoryApiHfCacheApiHfCacheHubDirGet_7Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/hub-dir`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Get the HuggingFace Hub directory path.
   * Get Hub Directory
   */
  async getHubDirectoryApiHfCacheApiHfCacheHubDirGet_7(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.getHubDirectoryApiHfCacheApiHfCacheHubDirGet_7Raw(
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get cache information for a specific model.
   * Get Model Cache Info
   */
  async getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGetRaw(
    requestParameters: GetModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ModelCacheInfoResponse>> {
    if (requestParameters["repoId"] == null) {
      throw new runtime.RequiredError(
        "repoId",
        'Required parameter "repoId" was null or undefined when calling getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["revision"] != null) {
      queryParameters["revision"] = requestParameters["revision"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/model/{repo_id}`;
    urlPath = urlPath.replace(
      `{${"repo_id"}}`,
      encodeURIComponent(String(requestParameters["repoId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ModelCacheInfoResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get cache information for a specific model.
   * Get Model Cache Info
   */
  async getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet(
    requestParameters: GetModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ModelCacheInfoResponse> {
    const response =
      await this.getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGetRaw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }

  /**
   * Get cache information for a specific model.
   * Get Model Cache Info
   */
  async getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet_8Raw(
    requestParameters: GetModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ModelCacheInfoResponse>> {
    if (requestParameters["repoId"] == null) {
      throw new runtime.RequiredError(
        "repoId",
        'Required parameter "repoId" was null or undefined when calling getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet_8().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["revision"] != null) {
      queryParameters["revision"] = requestParameters["revision"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/hf-cache/api/hf-cache/model/{repo_id}`;
    urlPath = urlPath.replace(
      `{${"repo_id"}}`,
      encodeURIComponent(String(requestParameters["repoId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ModelCacheInfoResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get cache information for a specific model.
   * Get Model Cache Info
   */
  async getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet_8(
    requestParameters: GetModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ModelCacheInfoResponse> {
    const response =
      await this.getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet_8Raw(
        requestParameters,
        initOverrides,
      );
    return await response.value();
  }
}
