/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { SecureUserCreateToJSON, SecureUserLoginToJSON, } from '../models/index';
/**
 *
 */
export class SecureAuthenticationApi extends runtime.BaseAPI {
    /**
     * Secure user login with input validation.
     * Secure Login
     */
    async secureLoginApiSecureAuthLoginPostRaw(requestParameters, initOverrides) {
        if (requestParameters['secureUserLogin'] == null) {
            throw new runtime.RequiredError('secureUserLogin', 'Required parameter "secureUserLogin" was null or undefined when calling secureLoginApiSecureAuthLoginPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        let urlPath = `/api/secure/auth/login`;
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecureUserLoginToJSON(requestParameters['secureUserLogin']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Secure user login with input validation.
     * Secure Login
     */
    async secureLoginApiSecureAuthLoginPost(requestParameters, initOverrides) {
        const response = await this.secureLoginApiSecureAuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Secure user logout.
     * Secure Logout
     */
    async secureLogoutApiSecureAuthLogoutPostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        let urlPath = `/api/secure/auth/logout`;
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Secure user logout.
     * Secure Logout
     */
    async secureLogoutApiSecureAuthLogoutPost(initOverrides) {
        const response = await this.secureLogoutApiSecureAuthLogoutPostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Secure user registration with input validation.
     * Secure Register
     */
    async secureRegisterApiSecureAuthRegisterPostRaw(requestParameters, initOverrides) {
        if (requestParameters['secureUserCreate'] == null) {
            throw new runtime.RequiredError('secureUserCreate', 'Required parameter "secureUserCreate" was null or undefined when calling secureRegisterApiSecureAuthRegisterPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        let urlPath = `/api/secure/auth/register`;
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecureUserCreateToJSON(requestParameters['secureUserCreate']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Secure user registration with input validation.
     * Secure Register
     */
    async secureRegisterApiSecureAuthRegisterPost(requestParameters, initOverrides) {
        const response = await this.secureRegisterApiSecureAuthRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
