/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ComfyQueueRequest,
  ComfyText2ImgRequest,
  HTTPValidationError,
} from '../models/index';
import {
    ComfyQueueRequestFromJSON,
    ComfyQueueRequestToJSON,
    ComfyText2ImgRequestFromJSON,
    ComfyText2ImgRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface GetHistoryApiComfyHistoryPromptIdGetRequest {
    promptId: string;
}

export interface GetObjectInfoApiComfyObjectInfoGetRequest {
    refresh?: boolean;
}

export interface GetStatusApiComfyStatusPromptIdGetRequest {
    promptId: string;
}

export interface IngestGeneratedImageApiComfyIngestPostRequest {
    file: Blob;
    promptId: string;
    workflow: string;
    metadata?: string;
}

export interface QueuePromptApiComfyQueuePostRequest {
    comfyQueueRequest: ComfyQueueRequest;
}

export interface StreamStatusApiComfyStreamPromptIdGetRequest {
    promptId: string;
}

export interface Text2imgApiComfyText2imgPostRequest {
    comfyText2ImgRequest: ComfyText2ImgRequest;
}

export interface ValidateCheckpointApiComfyValidateCheckpointCheckpointGetRequest {
    checkpoint: string;
}

export interface ValidateLoraApiComfyValidateLoraLoraGetRequest {
    lora: string;
}

export interface ValidateSamplerApiComfyValidateSamplerSamplerGetRequest {
    sampler: string;
}

export interface ValidateSchedulerApiComfyValidateSchedulerSchedulerGetRequest {
    scheduler: string;
}

export interface ViewImageApiComfyViewGetRequest {
    filename: string;
    subfolder?: string;
    type?: string;
}

/**
 * ComfyApi - interface
 * 
 * @export
 * @interface ComfyApiInterface
 */
export interface ComfyApiInterface {
    /**
     * Force a health check.
     * @summary Force Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    forceHealthCheckApiComfyHealthForceCheckPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Force a health check.
     * Force Health Check
     */
    forceHealthCheckApiComfyHealthForceCheckPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get the history for a prompt.
     * @summary Get History
     * @param {string} promptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    getHistoryApiComfyHistoryPromptIdGetRaw(requestParameters: GetHistoryApiComfyHistoryPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get the history for a prompt.
     * Get History
     */
    getHistoryApiComfyHistoryPromptIdGet(requestParameters: GetHistoryApiComfyHistoryPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get ComfyUI object information.
     * @summary Get Object Info
     * @param {boolean} [refresh] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    getObjectInfoApiComfyObjectInfoGetRaw(requestParameters: GetObjectInfoApiComfyObjectInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get ComfyUI object information.
     * Get Object Info
     */
    getObjectInfoApiComfyObjectInfoGet(requestParameters: GetObjectInfoApiComfyObjectInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get the status of a queued prompt.
     * @summary Get Status
     * @param {string} promptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    getStatusApiComfyStatusPromptIdGetRaw(requestParameters: GetStatusApiComfyStatusPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get the status of a queued prompt.
     * Get Status
     */
    getStatusApiComfyStatusPromptIdGet(requestParameters: GetStatusApiComfyStatusPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Check ComfyUI service health.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    healthCheckApiComfyHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Check ComfyUI service health.
     * Health Check
     */
    healthCheckApiComfyHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Ingest a generated image into the gallery.
     * @summary Ingest Generated Image
     * @param {Blob} file 
     * @param {string} promptId 
     * @param {string} workflow 
     * @param {string} [metadata] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    ingestGeneratedImageApiComfyIngestPostRaw(requestParameters: IngestGeneratedImageApiComfyIngestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Ingest a generated image into the gallery.
     * Ingest Generated Image
     */
    ingestGeneratedImageApiComfyIngestPost(requestParameters: IngestGeneratedImageApiComfyIngestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Queue a ComfyUI workflow for execution.
     * @summary Queue Prompt
     * @param {ComfyQueueRequest} comfyQueueRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    queuePromptApiComfyQueuePostRaw(requestParameters: QueuePromptApiComfyQueuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Queue a ComfyUI workflow for execution.
     * Queue Prompt
     */
    queuePromptApiComfyQueuePost(requestParameters: QueuePromptApiComfyQueuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Stream status updates for a prompt.
     * @summary Stream Status
     * @param {string} promptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    streamStatusApiComfyStreamPromptIdGetRaw(requestParameters: StreamStatusApiComfyStreamPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Stream status updates for a prompt.
     * Stream Status
     */
    streamStatusApiComfyStreamPromptIdGet(requestParameters: StreamStatusApiComfyStreamPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Generate an image from text using a simple workflow.
     * @summary Text2Img
     * @param {ComfyText2ImgRequest} comfyText2ImgRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    text2imgApiComfyText2imgPostRaw(requestParameters: Text2imgApiComfyText2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Generate an image from text using a simple workflow.
     * Text2Img
     */
    text2imgApiComfyText2imgPost(requestParameters: Text2imgApiComfyText2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Validate checkpoint and suggest alternatives.
     * @summary Validate Checkpoint
     * @param {string} checkpoint 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    validateCheckpointApiComfyValidateCheckpointCheckpointGetRaw(requestParameters: ValidateCheckpointApiComfyValidateCheckpointCheckpointGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Validate checkpoint and suggest alternatives.
     * Validate Checkpoint
     */
    validateCheckpointApiComfyValidateCheckpointCheckpointGet(requestParameters: ValidateCheckpointApiComfyValidateCheckpointCheckpointGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Validate LoRA and suggest alternatives.
     * @summary Validate Lora
     * @param {string} lora 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    validateLoraApiComfyValidateLoraLoraGetRaw(requestParameters: ValidateLoraApiComfyValidateLoraLoraGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Validate LoRA and suggest alternatives.
     * Validate Lora
     */
    validateLoraApiComfyValidateLoraLoraGet(requestParameters: ValidateLoraApiComfyValidateLoraLoraGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Validate sampler and suggest alternatives.
     * @summary Validate Sampler
     * @param {string} sampler 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    validateSamplerApiComfyValidateSamplerSamplerGetRaw(requestParameters: ValidateSamplerApiComfyValidateSamplerSamplerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Validate sampler and suggest alternatives.
     * Validate Sampler
     */
    validateSamplerApiComfyValidateSamplerSamplerGet(requestParameters: ValidateSamplerApiComfyValidateSamplerSamplerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Validate scheduler and suggest alternatives.
     * @summary Validate Scheduler
     * @param {string} scheduler 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    validateSchedulerApiComfyValidateSchedulerSchedulerGetRaw(requestParameters: ValidateSchedulerApiComfyValidateSchedulerSchedulerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Validate scheduler and suggest alternatives.
     * Validate Scheduler
     */
    validateSchedulerApiComfyValidateSchedulerSchedulerGet(requestParameters: ValidateSchedulerApiComfyValidateSchedulerSchedulerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * View a generated image.
     * @summary View Image
     * @param {string} filename 
     * @param {string} [subfolder] 
     * @param {string} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComfyApiInterface
     */
    viewImageApiComfyViewGetRaw(requestParameters: ViewImageApiComfyViewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * View a generated image.
     * View Image
     */
    viewImageApiComfyViewGet(requestParameters: ViewImageApiComfyViewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class ComfyApi extends runtime.BaseAPI implements ComfyApiInterface {

    /**
     * Force a health check.
     * Force Health Check
     */
    async forceHealthCheckApiComfyHealthForceCheckPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/health/force-check`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Force a health check.
     * Force Health Check
     */
    async forceHealthCheckApiComfyHealthForceCheckPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.forceHealthCheckApiComfyHealthForceCheckPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the history for a prompt.
     * Get History
     */
    async getHistoryApiComfyHistoryPromptIdGetRaw(requestParameters: GetHistoryApiComfyHistoryPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling getHistoryApiComfyHistoryPromptIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/history/{prompt_id}`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get the history for a prompt.
     * Get History
     */
    async getHistoryApiComfyHistoryPromptIdGet(requestParameters: GetHistoryApiComfyHistoryPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getHistoryApiComfyHistoryPromptIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ComfyUI object information.
     * Get Object Info
     */
    async getObjectInfoApiComfyObjectInfoGetRaw(requestParameters: GetObjectInfoApiComfyObjectInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['refresh'] != null) {
            queryParameters['refresh'] = requestParameters['refresh'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/object-info`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get ComfyUI object information.
     * Get Object Info
     */
    async getObjectInfoApiComfyObjectInfoGet(requestParameters: GetObjectInfoApiComfyObjectInfoGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getObjectInfoApiComfyObjectInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the status of a queued prompt.
     * Get Status
     */
    async getStatusApiComfyStatusPromptIdGetRaw(requestParameters: GetStatusApiComfyStatusPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling getStatusApiComfyStatusPromptIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/status/{prompt_id}`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get the status of a queued prompt.
     * Get Status
     */
    async getStatusApiComfyStatusPromptIdGet(requestParameters: GetStatusApiComfyStatusPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getStatusApiComfyStatusPromptIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check ComfyUI service health.
     * Health Check
     */
    async healthCheckApiComfyHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check ComfyUI service health.
     * Health Check
     */
    async healthCheckApiComfyHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.healthCheckApiComfyHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Ingest a generated image into the gallery.
     * Ingest Generated Image
     */
    async ingestGeneratedImageApiComfyIngestPostRaw(requestParameters: IngestGeneratedImageApiComfyIngestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling ingestGeneratedImageApiComfyIngestPost().'
            );
        }

        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling ingestGeneratedImageApiComfyIngestPost().'
            );
        }

        if (requestParameters['workflow'] == null) {
            throw new runtime.RequiredError(
                'workflow',
                'Required parameter "workflow" was null or undefined when calling ingestGeneratedImageApiComfyIngestPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['promptId'] != null) {
            formParams.append('prompt_id', requestParameters['promptId'] as any);
        }

        if (requestParameters['workflow'] != null) {
            formParams.append('workflow', requestParameters['workflow'] as any);
        }

        if (requestParameters['metadata'] != null) {
            formParams.append('metadata', requestParameters['metadata'] as any);
        }


        let urlPath = `/api/comfy/ingest`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Ingest a generated image into the gallery.
     * Ingest Generated Image
     */
    async ingestGeneratedImageApiComfyIngestPost(requestParameters: IngestGeneratedImageApiComfyIngestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.ingestGeneratedImageApiComfyIngestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Queue a ComfyUI workflow for execution.
     * Queue Prompt
     */
    async queuePromptApiComfyQueuePostRaw(requestParameters: QueuePromptApiComfyQueuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['comfyQueueRequest'] == null) {
            throw new runtime.RequiredError(
                'comfyQueueRequest',
                'Required parameter "comfyQueueRequest" was null or undefined when calling queuePromptApiComfyQueuePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/comfy/queue`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComfyQueueRequestToJSON(requestParameters['comfyQueueRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Queue a ComfyUI workflow for execution.
     * Queue Prompt
     */
    async queuePromptApiComfyQueuePost(requestParameters: QueuePromptApiComfyQueuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.queuePromptApiComfyQueuePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stream status updates for a prompt.
     * Stream Status
     */
    async streamStatusApiComfyStreamPromptIdGetRaw(requestParameters: StreamStatusApiComfyStreamPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling streamStatusApiComfyStreamPromptIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/stream/{prompt_id}`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stream status updates for a prompt.
     * Stream Status
     */
    async streamStatusApiComfyStreamPromptIdGet(requestParameters: StreamStatusApiComfyStreamPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.streamStatusApiComfyStreamPromptIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate an image from text using a simple workflow.
     * Text2Img
     */
    async text2imgApiComfyText2imgPostRaw(requestParameters: Text2imgApiComfyText2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['comfyText2ImgRequest'] == null) {
            throw new runtime.RequiredError(
                'comfyText2ImgRequest',
                'Required parameter "comfyText2ImgRequest" was null or undefined when calling text2imgApiComfyText2imgPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/comfy/text2img`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ComfyText2ImgRequestToJSON(requestParameters['comfyText2ImgRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Generate an image from text using a simple workflow.
     * Text2Img
     */
    async text2imgApiComfyText2imgPost(requestParameters: Text2imgApiComfyText2imgPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.text2imgApiComfyText2imgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate checkpoint and suggest alternatives.
     * Validate Checkpoint
     */
    async validateCheckpointApiComfyValidateCheckpointCheckpointGetRaw(requestParameters: ValidateCheckpointApiComfyValidateCheckpointCheckpointGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['checkpoint'] == null) {
            throw new runtime.RequiredError(
                'checkpoint',
                'Required parameter "checkpoint" was null or undefined when calling validateCheckpointApiComfyValidateCheckpointCheckpointGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/validate/checkpoint/{checkpoint}`;
        urlPath = urlPath.replace(`{${"checkpoint"}}`, encodeURIComponent(String(requestParameters['checkpoint'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Validate checkpoint and suggest alternatives.
     * Validate Checkpoint
     */
    async validateCheckpointApiComfyValidateCheckpointCheckpointGet(requestParameters: ValidateCheckpointApiComfyValidateCheckpointCheckpointGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.validateCheckpointApiComfyValidateCheckpointCheckpointGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate LoRA and suggest alternatives.
     * Validate Lora
     */
    async validateLoraApiComfyValidateLoraLoraGetRaw(requestParameters: ValidateLoraApiComfyValidateLoraLoraGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['lora'] == null) {
            throw new runtime.RequiredError(
                'lora',
                'Required parameter "lora" was null or undefined when calling validateLoraApiComfyValidateLoraLoraGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/validate/lora/{lora}`;
        urlPath = urlPath.replace(`{${"lora"}}`, encodeURIComponent(String(requestParameters['lora'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Validate LoRA and suggest alternatives.
     * Validate Lora
     */
    async validateLoraApiComfyValidateLoraLoraGet(requestParameters: ValidateLoraApiComfyValidateLoraLoraGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.validateLoraApiComfyValidateLoraLoraGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate sampler and suggest alternatives.
     * Validate Sampler
     */
    async validateSamplerApiComfyValidateSamplerSamplerGetRaw(requestParameters: ValidateSamplerApiComfyValidateSamplerSamplerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['sampler'] == null) {
            throw new runtime.RequiredError(
                'sampler',
                'Required parameter "sampler" was null or undefined when calling validateSamplerApiComfyValidateSamplerSamplerGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/validate/sampler/{sampler}`;
        urlPath = urlPath.replace(`{${"sampler"}}`, encodeURIComponent(String(requestParameters['sampler'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Validate sampler and suggest alternatives.
     * Validate Sampler
     */
    async validateSamplerApiComfyValidateSamplerSamplerGet(requestParameters: ValidateSamplerApiComfyValidateSamplerSamplerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.validateSamplerApiComfyValidateSamplerSamplerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate scheduler and suggest alternatives.
     * Validate Scheduler
     */
    async validateSchedulerApiComfyValidateSchedulerSchedulerGetRaw(requestParameters: ValidateSchedulerApiComfyValidateSchedulerSchedulerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['scheduler'] == null) {
            throw new runtime.RequiredError(
                'scheduler',
                'Required parameter "scheduler" was null or undefined when calling validateSchedulerApiComfyValidateSchedulerSchedulerGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/validate/scheduler/{scheduler}`;
        urlPath = urlPath.replace(`{${"scheduler"}}`, encodeURIComponent(String(requestParameters['scheduler'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Validate scheduler and suggest alternatives.
     * Validate Scheduler
     */
    async validateSchedulerApiComfyValidateSchedulerSchedulerGet(requestParameters: ValidateSchedulerApiComfyValidateSchedulerSchedulerGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.validateSchedulerApiComfyValidateSchedulerSchedulerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * View a generated image.
     * View Image
     */
    async viewImageApiComfyViewGetRaw(requestParameters: ViewImageApiComfyViewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['filename'] == null) {
            throw new runtime.RequiredError(
                'filename',
                'Required parameter "filename" was null or undefined when calling viewImageApiComfyViewGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filename'] != null) {
            queryParameters['filename'] = requestParameters['filename'];
        }

        if (requestParameters['subfolder'] != null) {
            queryParameters['subfolder'] = requestParameters['subfolder'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/comfy/view`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * View a generated image.
     * View Image
     */
    async viewImageApiComfyViewGet(requestParameters: ViewImageApiComfyViewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.viewImageApiComfyViewGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
