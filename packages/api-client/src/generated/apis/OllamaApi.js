/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { OllamaAssistantRequestToJSON, OllamaAssistantResponseFromJSON, OllamaChatRequestToJSON, OllamaChatResponseFromJSON, OllamaStatsFromJSON, } from "../models/index";
/**
 *
 */
export class OllamaApi extends runtime.BaseAPI {
    /**
     * Chat with ReynardAssistant.
     * Assistant Chat
     */
    async assistantChatApiOllamaAssistantPostRaw(requestParameters, initOverrides) {
        if (requestParameters["ollamaAssistantRequest"] == null) {
            throw new runtime.RequiredError("ollamaAssistantRequest", 'Required parameter "ollamaAssistantRequest" was null or undefined when calling assistantChatApiOllamaAssistantPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/ollama/assistant`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: OllamaAssistantRequestToJSON(requestParameters["ollamaAssistantRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => OllamaAssistantResponseFromJSON(jsonValue));
    }
    /**
     * Chat with ReynardAssistant.
     * Assistant Chat
     */
    async assistantChatApiOllamaAssistantPost(requestParameters, initOverrides) {
        const response = await this.assistantChatApiOllamaAssistantPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Chat with ReynardAssistant with streaming support.
     * Assistant Chat Stream
     */
    async assistantChatStreamApiOllamaAssistantStreamPostRaw(requestParameters, initOverrides) {
        if (requestParameters["ollamaAssistantRequest"] == null) {
            throw new runtime.RequiredError("ollamaAssistantRequest", 'Required parameter "ollamaAssistantRequest" was null or undefined when calling assistantChatStreamApiOllamaAssistantStreamPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/ollama/assistant/stream`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: OllamaAssistantRequestToJSON(requestParameters["ollamaAssistantRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Chat with ReynardAssistant with streaming support.
     * Assistant Chat Stream
     */
    async assistantChatStreamApiOllamaAssistantStreamPost(requestParameters, initOverrides) {
        const response = await this.assistantChatStreamApiOllamaAssistantStreamPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Chat with Ollama model.
     * Chat
     */
    async chatApiOllamaChatPostRaw(requestParameters, initOverrides) {
        if (requestParameters["ollamaChatRequest"] == null) {
            throw new runtime.RequiredError("ollamaChatRequest", 'Required parameter "ollamaChatRequest" was null or undefined when calling chatApiOllamaChatPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/ollama/chat`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: OllamaChatRequestToJSON(requestParameters["ollamaChatRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => OllamaChatResponseFromJSON(jsonValue));
    }
    /**
     * Chat with Ollama model.
     * Chat
     */
    async chatApiOllamaChatPost(requestParameters, initOverrides) {
        const response = await this.chatApiOllamaChatPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Chat with Ollama model with streaming support.
     * Chat Stream
     */
    async chatStreamApiOllamaChatStreamPostRaw(requestParameters, initOverrides) {
        if (requestParameters["ollamaChatRequest"] == null) {
            throw new runtime.RequiredError("ollamaChatRequest", 'Required parameter "ollamaChatRequest" was null or undefined when calling chatStreamApiOllamaChatStreamPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/ollama/chat/stream`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: OllamaChatRequestToJSON(requestParameters["ollamaChatRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Chat with Ollama model with streaming support.
     * Chat Stream
     */
    async chatStreamApiOllamaChatStreamPost(requestParameters, initOverrides) {
        const response = await this.chatStreamApiOllamaChatStreamPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Cleanup service resources.
     * Cleanup
     */
    async cleanupApiOllamaAdminCleanupPostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/ollama/admin/cleanup`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Cleanup service resources.
     * Cleanup
     */
    async cleanupApiOllamaAdminCleanupPost(initOverrides) {
        const response = await this.cleanupApiOllamaAdminCleanupPostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get current configuration.
     * Get Config
     */
    async getConfigApiOllamaConfigGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/ollama/config`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get current configuration.
     * Get Config
     */
    async getConfigApiOllamaConfigGet(initOverrides) {
        const response = await this.getConfigApiOllamaConfigGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get available models with detailed information.
     * Get Models
     */
    async getModelsApiOllamaAdminModelsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/ollama/admin/models`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get available models with detailed information.
     * Get Models
     */
    async getModelsApiOllamaAdminModelsGet(initOverrides) {
        const response = await this.getModelsApiOllamaAdminModelsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get available Ollama models.
     * Get Models
     */
    async getModelsApiOllamaModelsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/ollama/models`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get available Ollama models.
     * Get Models
     */
    async getModelsApiOllamaModelsGet(initOverrides) {
        const response = await this.getModelsApiOllamaModelsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get service statistics.
     * Get Stats
     */
    async getStatsApiOllamaAdminStatsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/ollama/admin/stats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => OllamaStatsFromJSON(jsonValue));
    }
    /**
     * Get service statistics.
     * Get Stats
     */
    async getStatsApiOllamaAdminStatsGet(initOverrides) {
        const response = await this.getStatsApiOllamaAdminStatsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Check service health.
     * Health Check
     */
    async healthCheckApiOllamaAdminHealthGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/ollama/admin/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Check service health.
     * Health Check
     */
    async healthCheckApiOllamaAdminHealthGet(initOverrides) {
        const response = await this.healthCheckApiOllamaAdminHealthGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Pull a model from Ollama registry.
     * Pull Model
     */
    async pullModelApiOllamaAdminModelsModelNamePullPostRaw(requestParameters, initOverrides) {
        if (requestParameters["modelName"] == null) {
            throw new runtime.RequiredError("modelName", 'Required parameter "modelName" was null or undefined when calling pullModelApiOllamaAdminModelsModelNamePullPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/ollama/admin/models/{model_name}/pull`;
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters["modelName"])));
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Pull a model from Ollama registry.
     * Pull Model
     */
    async pullModelApiOllamaAdminModelsModelNamePullPost(requestParameters, initOverrides) {
        const response = await this.pullModelApiOllamaAdminModelsModelNamePullPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update configuration.
     * Update Config
     */
    async updateConfigApiOllamaConfigPostRaw(requestParameters, initOverrides) {
        if (requestParameters["requestBody"] == null) {
            throw new runtime.RequiredError("requestBody", 'Required parameter "requestBody" was null or undefined when calling updateConfigApiOllamaConfigPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/ollama/config`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters["requestBody"],
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Update configuration.
     * Update Config
     */
    async updateConfigApiOllamaConfigPost(requestParameters, initOverrides) {
        const response = await this.updateConfigApiOllamaConfigPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
