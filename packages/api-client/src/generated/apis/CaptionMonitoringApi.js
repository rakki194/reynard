/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
/**
 *
 */
export class CaptionMonitoringApi extends runtime.BaseAPI {
    /**
     * Get circuit breaker state for a specific model.
     * Get Circuit Breaker State
     */
    async getCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGetRaw(requestParameters, initOverrides) {
        if (requestParameters["modelName"] == null) {
            throw new runtime.RequiredError("modelName", 'Required parameter "modelName" was null or undefined when calling getCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/caption/models/{model_name}/circuit-breaker`;
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters["modelName"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get circuit breaker state for a specific model.
     * Get Circuit Breaker State
     */
    async getCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGet(requestParameters, initOverrides) {
        const response = await this.getCircuitBreakerStateApiCaptionModelsModelNameCircuitBreakerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get system health status.
     * Get Health Status
     */
    async getHealthStatusApiCaptionHealthGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/caption/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get system health status.
     * Get Health Status
     */
    async getHealthStatusApiCaptionHealthGet(initOverrides) {
        const response = await this.getHealthStatusApiCaptionHealthGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get health status for a specific model.
     * Get Model Health Status
     */
    async getModelHealthStatusApiCaptionModelsModelNameHealthGetRaw(requestParameters, initOverrides) {
        if (requestParameters["modelName"] == null) {
            throw new runtime.RequiredError("modelName", 'Required parameter "modelName" was null or undefined when calling getModelHealthStatusApiCaptionModelsModelNameHealthGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/caption/models/{model_name}/health`;
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters["modelName"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get health status for a specific model.
     * Get Model Health Status
     */
    async getModelHealthStatusApiCaptionModelsModelNameHealthGet(requestParameters, initOverrides) {
        const response = await this.getModelHealthStatusApiCaptionModelsModelNameHealthGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get usage statistics for a specific model.
     * Get Model Usage Stats
     */
    async getModelUsageStatsApiCaptionModelsModelNameStatsGetRaw(requestParameters, initOverrides) {
        if (requestParameters["modelName"] == null) {
            throw new runtime.RequiredError("modelName", 'Required parameter "modelName" was null or undefined when calling getModelUsageStatsApiCaptionModelsModelNameStatsGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/caption/models/{model_name}/stats`;
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters["modelName"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get usage statistics for a specific model.
     * Get Model Usage Stats
     */
    async getModelUsageStatsApiCaptionModelsModelNameStatsGet(requestParameters, initOverrides) {
        const response = await this.getModelUsageStatsApiCaptionModelsModelNameStatsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get request queue status.
     * Get Queue Status
     */
    async getQueueStatusApiCaptionQueueGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/caption/queue`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get request queue status.
     * Get Queue Status
     */
    async getQueueStatusApiCaptionQueueGet(initOverrides) {
        const response = await this.getQueueStatusApiCaptionQueueGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get comprehensive system statistics and usage metrics.
     * Get System Statistics
     */
    async getSystemStatisticsApiCaptionStatsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/caption/stats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get comprehensive system statistics and usage metrics.
     * Get System Statistics
     */
    async getSystemStatisticsApiCaptionStatsGet(initOverrides) {
        const response = await this.getSystemStatisticsApiCaptionStatsGetRaw(initOverrides);
        return await response.value();
    }
}
