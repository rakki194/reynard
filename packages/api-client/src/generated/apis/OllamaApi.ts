/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  OllamaAssistantRequest,
  OllamaAssistantResponse,
  OllamaChatRequest,
  OllamaChatResponse,
  OllamaStats,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    OllamaAssistantRequestFromJSON,
    OllamaAssistantRequestToJSON,
    OllamaAssistantResponseFromJSON,
    OllamaAssistantResponseToJSON,
    OllamaChatRequestFromJSON,
    OllamaChatRequestToJSON,
    OllamaChatResponseFromJSON,
    OllamaChatResponseToJSON,
    OllamaStatsFromJSON,
    OllamaStatsToJSON,
} from '../models/index';

export interface AssistantChatApiOllamaAssistantPostRequest {
    ollamaAssistantRequest: OllamaAssistantRequest;
}

export interface AssistantChatStreamApiOllamaAssistantStreamPostRequest {
    ollamaAssistantRequest: OllamaAssistantRequest;
}

export interface ChatApiOllamaChatPostRequest {
    ollamaChatRequest: OllamaChatRequest;
}

export interface ChatStreamApiOllamaChatStreamPostRequest {
    ollamaChatRequest: OllamaChatRequest;
}

export interface PullModelApiOllamaAdminModelsModelNamePullPostRequest {
    modelName: string;
}

export interface UpdateConfigApiOllamaConfigPostRequest {
    body: object;
}

/**
 * OllamaApi - interface
 * 
 * @export
 * @interface OllamaApiInterface
 */
export interface OllamaApiInterface {
    /**
     * Chat with YipYapAssistant.
     * @summary Assistant Chat
     * @param {OllamaAssistantRequest} ollamaAssistantRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    assistantChatApiOllamaAssistantPostRaw(requestParameters: AssistantChatApiOllamaAssistantPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaAssistantResponse>>;

    /**
     * Chat with YipYapAssistant.
     * Assistant Chat
     */
    assistantChatApiOllamaAssistantPost(requestParameters: AssistantChatApiOllamaAssistantPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaAssistantResponse>;

    /**
     * Chat with YipYapAssistant with streaming support.
     * @summary Assistant Chat Stream
     * @param {OllamaAssistantRequest} ollamaAssistantRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    assistantChatStreamApiOllamaAssistantStreamPostRaw(requestParameters: AssistantChatStreamApiOllamaAssistantStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Chat with YipYapAssistant with streaming support.
     * Assistant Chat Stream
     */
    assistantChatStreamApiOllamaAssistantStreamPost(requestParameters: AssistantChatStreamApiOllamaAssistantStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Chat with Ollama model.
     * @summary Chat
     * @param {OllamaChatRequest} ollamaChatRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    chatApiOllamaChatPostRaw(requestParameters: ChatApiOllamaChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaChatResponse>>;

    /**
     * Chat with Ollama model.
     * Chat
     */
    chatApiOllamaChatPost(requestParameters: ChatApiOllamaChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaChatResponse>;

    /**
     * Chat with Ollama model with streaming support.
     * @summary Chat Stream
     * @param {OllamaChatRequest} ollamaChatRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    chatStreamApiOllamaChatStreamPostRaw(requestParameters: ChatStreamApiOllamaChatStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Chat with Ollama model with streaming support.
     * Chat Stream
     */
    chatStreamApiOllamaChatStreamPost(requestParameters: ChatStreamApiOllamaChatStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Cleanup service resources.
     * @summary Cleanup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    cleanupApiOllamaAdminCleanupPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Cleanup service resources.
     * Cleanup
     */
    cleanupApiOllamaAdminCleanupPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get current configuration.
     * @summary Get Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    getConfigApiOllamaConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get current configuration.
     * Get Config
     */
    getConfigApiOllamaConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get available models with detailed information.
     * @summary Get Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    getModelsApiOllamaAdminModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get available models with detailed information.
     * Get Models
     */
    getModelsApiOllamaAdminModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get available Ollama models.
     * @summary Get Models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    getModelsApiOllamaModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get available Ollama models.
     * Get Models
     */
    getModelsApiOllamaModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get service statistics.
     * @summary Get Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    getStatsApiOllamaAdminStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaStats>>;

    /**
     * Get service statistics.
     * Get Stats
     */
    getStatsApiOllamaAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaStats>;

    /**
     * Check service health.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    healthCheckApiOllamaAdminHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Check service health.
     * Health Check
     */
    healthCheckApiOllamaAdminHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Pull a model from Ollama registry.
     * @summary Pull Model
     * @param {string} modelName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    pullModelApiOllamaAdminModelsModelNamePullPostRaw(requestParameters: PullModelApiOllamaAdminModelsModelNamePullPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Pull a model from Ollama registry.
     * Pull Model
     */
    pullModelApiOllamaAdminModelsModelNamePullPost(requestParameters: PullModelApiOllamaAdminModelsModelNamePullPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Update configuration.
     * @summary Update Config
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OllamaApiInterface
     */
    updateConfigApiOllamaConfigPostRaw(requestParameters: UpdateConfigApiOllamaConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Update configuration.
     * Update Config
     */
    updateConfigApiOllamaConfigPost(requestParameters: UpdateConfigApiOllamaConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class OllamaApi extends runtime.BaseAPI implements OllamaApiInterface {

    /**
     * Chat with YipYapAssistant.
     * Assistant Chat
     */
    async assistantChatApiOllamaAssistantPostRaw(requestParameters: AssistantChatApiOllamaAssistantPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaAssistantResponse>> {
        if (requestParameters['ollamaAssistantRequest'] == null) {
            throw new runtime.RequiredError(
                'ollamaAssistantRequest',
                'Required parameter "ollamaAssistantRequest" was null or undefined when calling assistantChatApiOllamaAssistantPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/ollama/assistant`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OllamaAssistantRequestToJSON(requestParameters['ollamaAssistantRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaAssistantResponseFromJSON(jsonValue));
    }

    /**
     * Chat with YipYapAssistant.
     * Assistant Chat
     */
    async assistantChatApiOllamaAssistantPost(requestParameters: AssistantChatApiOllamaAssistantPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaAssistantResponse> {
        const response = await this.assistantChatApiOllamaAssistantPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Chat with YipYapAssistant with streaming support.
     * Assistant Chat Stream
     */
    async assistantChatStreamApiOllamaAssistantStreamPostRaw(requestParameters: AssistantChatStreamApiOllamaAssistantStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['ollamaAssistantRequest'] == null) {
            throw new runtime.RequiredError(
                'ollamaAssistantRequest',
                'Required parameter "ollamaAssistantRequest" was null or undefined when calling assistantChatStreamApiOllamaAssistantStreamPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/ollama/assistant/stream`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OllamaAssistantRequestToJSON(requestParameters['ollamaAssistantRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Chat with YipYapAssistant with streaming support.
     * Assistant Chat Stream
     */
    async assistantChatStreamApiOllamaAssistantStreamPost(requestParameters: AssistantChatStreamApiOllamaAssistantStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.assistantChatStreamApiOllamaAssistantStreamPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Chat with Ollama model.
     * Chat
     */
    async chatApiOllamaChatPostRaw(requestParameters: ChatApiOllamaChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaChatResponse>> {
        if (requestParameters['ollamaChatRequest'] == null) {
            throw new runtime.RequiredError(
                'ollamaChatRequest',
                'Required parameter "ollamaChatRequest" was null or undefined when calling chatApiOllamaChatPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/ollama/chat`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OllamaChatRequestToJSON(requestParameters['ollamaChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaChatResponseFromJSON(jsonValue));
    }

    /**
     * Chat with Ollama model.
     * Chat
     */
    async chatApiOllamaChatPost(requestParameters: ChatApiOllamaChatPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaChatResponse> {
        const response = await this.chatApiOllamaChatPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Chat with Ollama model with streaming support.
     * Chat Stream
     */
    async chatStreamApiOllamaChatStreamPostRaw(requestParameters: ChatStreamApiOllamaChatStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['ollamaChatRequest'] == null) {
            throw new runtime.RequiredError(
                'ollamaChatRequest',
                'Required parameter "ollamaChatRequest" was null or undefined when calling chatStreamApiOllamaChatStreamPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/ollama/chat/stream`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OllamaChatRequestToJSON(requestParameters['ollamaChatRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Chat with Ollama model with streaming support.
     * Chat Stream
     */
    async chatStreamApiOllamaChatStreamPost(requestParameters: ChatStreamApiOllamaChatStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.chatStreamApiOllamaChatStreamPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cleanup service resources.
     * Cleanup
     */
    async cleanupApiOllamaAdminCleanupPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ollama/admin/cleanup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Cleanup service resources.
     * Cleanup
     */
    async cleanupApiOllamaAdminCleanupPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.cleanupApiOllamaAdminCleanupPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current configuration.
     * Get Config
     */
    async getConfigApiOllamaConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ollama/config`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get current configuration.
     * Get Config
     */
    async getConfigApiOllamaConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getConfigApiOllamaConfigGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get available models with detailed information.
     * Get Models
     */
    async getModelsApiOllamaAdminModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ollama/admin/models`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get available models with detailed information.
     * Get Models
     */
    async getModelsApiOllamaAdminModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getModelsApiOllamaAdminModelsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get available Ollama models.
     * Get Models
     */
    async getModelsApiOllamaModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ollama/models`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get available Ollama models.
     * Get Models
     */
    async getModelsApiOllamaModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getModelsApiOllamaModelsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get service statistics.
     * Get Stats
     */
    async getStatsApiOllamaAdminStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OllamaStats>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ollama/admin/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OllamaStatsFromJSON(jsonValue));
    }

    /**
     * Get service statistics.
     * Get Stats
     */
    async getStatsApiOllamaAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OllamaStats> {
        const response = await this.getStatsApiOllamaAdminStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Check service health.
     * Health Check
     */
    async healthCheckApiOllamaAdminHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ollama/admin/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check service health.
     * Health Check
     */
    async healthCheckApiOllamaAdminHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.healthCheckApiOllamaAdminHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Pull a model from Ollama registry.
     * Pull Model
     */
    async pullModelApiOllamaAdminModelsModelNamePullPostRaw(requestParameters: PullModelApiOllamaAdminModelsModelNamePullPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['modelName'] == null) {
            throw new runtime.RequiredError(
                'modelName',
                'Required parameter "modelName" was null or undefined when calling pullModelApiOllamaAdminModelsModelNamePullPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ollama/admin/models/{model_name}/pull`;
        urlPath = urlPath.replace(`{${"model_name"}}`, encodeURIComponent(String(requestParameters['modelName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Pull a model from Ollama registry.
     * Pull Model
     */
    async pullModelApiOllamaAdminModelsModelNamePullPost(requestParameters: PullModelApiOllamaAdminModelsModelNamePullPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.pullModelApiOllamaAdminModelsModelNamePullPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update configuration.
     * Update Config
     */
    async updateConfigApiOllamaConfigPostRaw(requestParameters: UpdateConfigApiOllamaConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateConfigApiOllamaConfigPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/ollama/config`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update configuration.
     * Update Config
     */
    async updateConfigApiOllamaConfigPost(requestParameters: UpdateConfigApiOllamaConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateConfigApiOllamaConfigPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
