/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { ExecutorConfigRequestToJSON, ExecutorStateResponseFromJSON, ExecutorStatsResponseFromJSON, TaskExecutionRequestToJSON, TaskInfoResponseFromJSON, } from "../models/index";
/**
 *
 */
export class ExecutorApi extends runtime.BaseAPI {
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * Execute Task
     */
    async executeTaskApiExecutorApiExecutorExecutePostRaw(requestParameters, initOverrides) {
        if (requestParameters["taskExecutionRequest"] == null) {
            throw new runtime.RequiredError("taskExecutionRequest", 'Required parameter "taskExecutionRequest" was null or undefined when calling executeTaskApiExecutorApiExecutorExecutePost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/executor/api/executor/execute`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: TaskExecutionRequestToJSON(requestParameters["taskExecutionRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * Execute Task
     */
    async executeTaskApiExecutorApiExecutorExecutePost(requestParameters, initOverrides) {
        const response = await this.executeTaskApiExecutorApiExecutorExecutePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * Execute Task
     */
    async executeTaskApiExecutorApiExecutorExecutePost_1Raw(requestParameters, initOverrides) {
        if (requestParameters["taskExecutionRequest"] == null) {
            throw new runtime.RequiredError("taskExecutionRequest", 'Required parameter "taskExecutionRequest" was null or undefined when calling executeTaskApiExecutorApiExecutorExecutePost_1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/executor/api/executor/execute`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: TaskExecutionRequestToJSON(requestParameters["taskExecutionRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Execute a task in the thread pool.  Note: This is a simplified endpoint for demonstration. In practice, you\'d want to implement proper task serialization and execution mechanisms.
     * Execute Task
     */
    async executeTaskApiExecutorApiExecutorExecutePost_1(requestParameters, initOverrides) {
        const response = await this.executeTaskApiExecutorApiExecutorExecutePost_1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get information about active tasks.
     * Get Active Tasks
     */
    async getActiveTasksApiExecutorApiExecutorActiveTasksGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/executor/api/executor/active-tasks`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(TaskInfoResponseFromJSON));
    }
    /**
     * Get information about active tasks.
     * Get Active Tasks
     */
    async getActiveTasksApiExecutorApiExecutorActiveTasksGet(initOverrides) {
        const response = await this.getActiveTasksApiExecutorApiExecutorActiveTasksGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get information about active tasks.
     * Get Active Tasks
     */
    async getActiveTasksApiExecutorApiExecutorActiveTasksGet_2Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/executor/api/executor/active-tasks`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(TaskInfoResponseFromJSON));
    }
    /**
     * Get information about active tasks.
     * Get Active Tasks
     */
    async getActiveTasksApiExecutorApiExecutorActiveTasksGet_2(initOverrides) {
        const response = await this.getActiveTasksApiExecutorApiExecutorActiveTasksGet_2Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get the current state of the executor.
     * Get Executor State
     */
    async getExecutorStateApiExecutorApiExecutorStateGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/executor/api/executor/state`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ExecutorStateResponseFromJSON(jsonValue));
    }
    /**
     * Get the current state of the executor.
     * Get Executor State
     */
    async getExecutorStateApiExecutorApiExecutorStateGet(initOverrides) {
        const response = await this.getExecutorStateApiExecutorApiExecutorStateGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get the current state of the executor.
     * Get Executor State
     */
    async getExecutorStateApiExecutorApiExecutorStateGet_3Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/executor/api/executor/state`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ExecutorStateResponseFromJSON(jsonValue));
    }
    /**
     * Get the current state of the executor.
     * Get Executor State
     */
    async getExecutorStateApiExecutorApiExecutorStateGet_3(initOverrides) {
        const response = await this.getExecutorStateApiExecutorApiExecutorStateGet_3Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get executor statistics.
     * Get Executor Stats
     */
    async getExecutorStatsApiExecutorApiExecutorStatsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/executor/api/executor/stats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ExecutorStatsResponseFromJSON(jsonValue));
    }
    /**
     * Get executor statistics.
     * Get Executor Stats
     */
    async getExecutorStatsApiExecutorApiExecutorStatsGet(initOverrides) {
        const response = await this.getExecutorStatsApiExecutorApiExecutorStatsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get executor statistics.
     * Get Executor Stats
     */
    async getExecutorStatsApiExecutorApiExecutorStatsGet_4Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/executor/api/executor/stats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ExecutorStatsResponseFromJSON(jsonValue));
    }
    /**
     * Get executor statistics.
     * Get Executor Stats
     */
    async getExecutorStatsApiExecutorApiExecutorStatsGet_4(initOverrides) {
        const response = await this.getExecutorStatsApiExecutorApiExecutorStatsGet_4Raw(initOverrides);
        return await response.value();
    }
    /**
     * Health check endpoint for the executor service.
     * Health Check
     */
    async healthCheckApiExecutorApiExecutorHealthGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/executor/api/executor/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Health check endpoint for the executor service.
     * Health Check
     */
    async healthCheckApiExecutorApiExecutorHealthGet(initOverrides) {
        const response = await this.healthCheckApiExecutorApiExecutorHealthGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Health check endpoint for the executor service.
     * Health Check
     */
    async healthCheckApiExecutorApiExecutorHealthGet_5Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/executor/api/executor/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Health check endpoint for the executor service.
     * Health Check
     */
    async healthCheckApiExecutorApiExecutorHealthGet_5(initOverrides) {
        const response = await this.healthCheckApiExecutorApiExecutorHealthGet_5Raw(initOverrides);
        return await response.value();
    }
    /**
     * Initialize the executor with optional configuration.
     * Initialize Executor
     */
    async initializeExecutorApiExecutorApiExecutorInitializePostRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/executor/api/executor/initialize`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ExecutorConfigRequestToJSON(requestParameters["executorConfigRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Initialize the executor with optional configuration.
     * Initialize Executor
     */
    async initializeExecutorApiExecutorApiExecutorInitializePost(requestParameters = {}, initOverrides) {
        const response = await this.initializeExecutorApiExecutorApiExecutorInitializePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Initialize the executor with optional configuration.
     * Initialize Executor
     */
    async initializeExecutorApiExecutorApiExecutorInitializePost_6Raw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/executor/api/executor/initialize`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ExecutorConfigRequestToJSON(requestParameters["executorConfigRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Initialize the executor with optional configuration.
     * Initialize Executor
     */
    async initializeExecutorApiExecutorApiExecutorInitializePost_6(requestParameters = {}, initOverrides) {
        const response = await this.initializeExecutorApiExecutorApiExecutorInitializePost_6Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Shutdown the executor.
     * Shutdown Executor
     */
    async shutdownExecutorApiExecutorApiExecutorShutdownPostRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters["wait"] != null) {
            queryParameters["wait"] = requestParameters["wait"];
        }
        const headerParameters = {};
        let urlPath = `/api/executor/api/executor/shutdown`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Shutdown the executor.
     * Shutdown Executor
     */
    async shutdownExecutorApiExecutorApiExecutorShutdownPost(requestParameters = {}, initOverrides) {
        const response = await this.shutdownExecutorApiExecutorApiExecutorShutdownPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Shutdown the executor.
     * Shutdown Executor
     */
    async shutdownExecutorApiExecutorApiExecutorShutdownPost_7Raw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters["wait"] != null) {
            queryParameters["wait"] = requestParameters["wait"];
        }
        const headerParameters = {};
        let urlPath = `/api/executor/api/executor/shutdown`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Shutdown the executor.
     * Shutdown Executor
     */
    async shutdownExecutorApiExecutorApiExecutorShutdownPost_7(requestParameters = {}, initOverrides) {
        const response = await this.shutdownExecutorApiExecutorApiExecutorShutdownPost_7Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
