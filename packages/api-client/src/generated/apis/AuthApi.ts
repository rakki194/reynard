/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

/**
 * AuthApi - interface
 *
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
  /**
   * Protected route demonstrating authentication and authorization.  This endpoint requires valid JWT authentication and demonstrates the integration with the Gatekeeper authentication service. It serves as a reference implementation for securing API endpoints and accessing authenticated user information.  Args:     current_user: Authenticated user object provided by the require_active_user dependency.                  Automatically injected by FastAPI\'s dependency injection system.  Returns:     dict: Authenticated user information containing:         - message: Personalized greeting message         - user_id: Unique identifier for the authenticated user         - timestamp: Current UTC timestamp         - authenticated: Authentication status confirmation  Raises:     HTTPException: 401 Unauthorized if authentication fails or token is invalid.     HTTPException: 403 Forbidden if user account is inactive or disabled.
   * @summary Protected Route
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApiInterface
   */
  protectedRouteApiProtectedGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>>;

  /**
   * Protected route demonstrating authentication and authorization.  This endpoint requires valid JWT authentication and demonstrates the integration with the Gatekeeper authentication service. It serves as a reference implementation for securing API endpoints and accessing authenticated user information.  Args:     current_user: Authenticated user object provided by the require_active_user dependency.                  Automatically injected by FastAPI\'s dependency injection system.  Returns:     dict: Authenticated user information containing:         - message: Personalized greeting message         - user_id: Unique identifier for the authenticated user         - timestamp: Current UTC timestamp         - authenticated: Authentication status confirmation  Raises:     HTTPException: 401 Unauthorized if authentication fails or token is invalid.     HTTPException: 403 Forbidden if user account is inactive or disabled.
   * Protected Route
   */
  protectedRouteApiProtectedGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {
  /**
   * Protected route demonstrating authentication and authorization.  This endpoint requires valid JWT authentication and demonstrates the integration with the Gatekeeper authentication service. It serves as a reference implementation for securing API endpoints and accessing authenticated user information.  Args:     current_user: Authenticated user object provided by the require_active_user dependency.                  Automatically injected by FastAPI\'s dependency injection system.  Returns:     dict: Authenticated user information containing:         - message: Personalized greeting message         - user_id: Unique identifier for the authenticated user         - timestamp: Current UTC timestamp         - authenticated: Authentication status confirmation  Raises:     HTTPException: 401 Unauthorized if authentication fails or token is invalid.     HTTPException: 403 Forbidden if user account is inactive or disabled.
   * Protected Route
   */
  async protectedRouteApiProtectedGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
    }

    let urlPath = `/api/protected`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Protected route demonstrating authentication and authorization.  This endpoint requires valid JWT authentication and demonstrates the integration with the Gatekeeper authentication service. It serves as a reference implementation for securing API endpoints and accessing authenticated user information.  Args:     current_user: Authenticated user object provided by the require_active_user dependency.                  Automatically injected by FastAPI\'s dependency injection system.  Returns:     dict: Authenticated user information containing:         - message: Personalized greeting message         - user_id: Unique identifier for the authenticated user         - timestamp: Current UTC timestamp         - authenticated: Authentication status confirmation  Raises:     HTTPException: 401 Unauthorized if authentication fails or token is invalid.     HTTPException: 403 Forbidden if user account is inactive or disabled.
   * Protected Route
   */
  async protectedRouteApiProtectedGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
    const response = await this.protectedRouteApiProtectedGetRaw(initOverrides);
    return await response.value();
  }
}
