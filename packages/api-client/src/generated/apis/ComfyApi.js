/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { ComfyQueueRequestToJSON, ComfyText2ImgRequestToJSON, } from "../models/index";
/**
 *
 */
export class ComfyApi extends runtime.BaseAPI {
    /**
     * Force a health check.
     * Force Health Check
     */
    async forceHealthCheckApiComfyHealthForceCheckPostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/comfy/health/force-check`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Force a health check.
     * Force Health Check
     */
    async forceHealthCheckApiComfyHealthForceCheckPost(initOverrides) {
        const response = await this.forceHealthCheckApiComfyHealthForceCheckPostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get the history for a prompt.
     * Get History
     */
    async getHistoryApiComfyHistoryPromptIdGetRaw(requestParameters, initOverrides) {
        if (requestParameters["promptId"] == null) {
            throw new runtime.RequiredError("promptId", 'Required parameter "promptId" was null or undefined when calling getHistoryApiComfyHistoryPromptIdGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/comfy/history/{prompt_id}`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters["promptId"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get the history for a prompt.
     * Get History
     */
    async getHistoryApiComfyHistoryPromptIdGet(requestParameters, initOverrides) {
        const response = await this.getHistoryApiComfyHistoryPromptIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get ComfyUI object information.
     * Get Object Info
     */
    async getObjectInfoApiComfyObjectInfoGetRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters["refresh"] != null) {
            queryParameters["refresh"] = requestParameters["refresh"];
        }
        const headerParameters = {};
        let urlPath = `/api/comfy/object-info`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get ComfyUI object information.
     * Get Object Info
     */
    async getObjectInfoApiComfyObjectInfoGet(requestParameters = {}, initOverrides) {
        const response = await this.getObjectInfoApiComfyObjectInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get the status of a queued prompt.
     * Get Status
     */
    async getStatusApiComfyStatusPromptIdGetRaw(requestParameters, initOverrides) {
        if (requestParameters["promptId"] == null) {
            throw new runtime.RequiredError("promptId", 'Required parameter "promptId" was null or undefined when calling getStatusApiComfyStatusPromptIdGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/comfy/status/{prompt_id}`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters["promptId"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get the status of a queued prompt.
     * Get Status
     */
    async getStatusApiComfyStatusPromptIdGet(requestParameters, initOverrides) {
        const response = await this.getStatusApiComfyStatusPromptIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Check ComfyUI service health.
     * Health Check
     */
    async healthCheckApiComfyHealthGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/comfy/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Check ComfyUI service health.
     * Health Check
     */
    async healthCheckApiComfyHealthGet(initOverrides) {
        const response = await this.healthCheckApiComfyHealthGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Ingest a generated image into the gallery.
     * Ingest Generated Image
     */
    async ingestGeneratedImageApiComfyIngestPostRaw(requestParameters, initOverrides) {
        if (requestParameters["file"] == null) {
            throw new runtime.RequiredError("file", 'Required parameter "file" was null or undefined when calling ingestGeneratedImageApiComfyIngestPost().');
        }
        if (requestParameters["promptId"] == null) {
            throw new runtime.RequiredError("promptId", 'Required parameter "promptId" was null or undefined when calling ingestGeneratedImageApiComfyIngestPost().');
        }
        if (requestParameters["workflow"] == null) {
            throw new runtime.RequiredError("workflow", 'Required parameter "workflow" was null or undefined when calling ingestGeneratedImageApiComfyIngestPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const consumes = [{ contentType: "multipart/form-data" }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters["file"] != null) {
            formParams.append("file", requestParameters["file"]);
        }
        if (requestParameters["promptId"] != null) {
            formParams.append("prompt_id", requestParameters["promptId"]);
        }
        if (requestParameters["workflow"] != null) {
            formParams.append("workflow", requestParameters["workflow"]);
        }
        if (requestParameters["metadata"] != null) {
            formParams.append("metadata", requestParameters["metadata"]);
        }
        let urlPath = `/api/comfy/ingest`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Ingest a generated image into the gallery.
     * Ingest Generated Image
     */
    async ingestGeneratedImageApiComfyIngestPost(requestParameters, initOverrides) {
        const response = await this.ingestGeneratedImageApiComfyIngestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Queue a ComfyUI workflow for execution.
     * Queue Prompt
     */
    async queuePromptApiComfyQueuePostRaw(requestParameters, initOverrides) {
        if (requestParameters["comfyQueueRequest"] == null) {
            throw new runtime.RequiredError("comfyQueueRequest", 'Required parameter "comfyQueueRequest" was null or undefined when calling queuePromptApiComfyQueuePost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/comfy/queue`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ComfyQueueRequestToJSON(requestParameters["comfyQueueRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Queue a ComfyUI workflow for execution.
     * Queue Prompt
     */
    async queuePromptApiComfyQueuePost(requestParameters, initOverrides) {
        const response = await this.queuePromptApiComfyQueuePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Stream status updates for a prompt.
     * Stream Status
     */
    async streamStatusApiComfyStreamPromptIdGetRaw(requestParameters, initOverrides) {
        if (requestParameters["promptId"] == null) {
            throw new runtime.RequiredError("promptId", 'Required parameter "promptId" was null or undefined when calling streamStatusApiComfyStreamPromptIdGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/comfy/stream/{prompt_id}`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters["promptId"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Stream status updates for a prompt.
     * Stream Status
     */
    async streamStatusApiComfyStreamPromptIdGet(requestParameters, initOverrides) {
        const response = await this.streamStatusApiComfyStreamPromptIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Generate an image from text using a simple workflow.
     * Text2Img
     */
    async text2imgApiComfyText2imgPostRaw(requestParameters, initOverrides) {
        if (requestParameters["comfyText2ImgRequest"] == null) {
            throw new runtime.RequiredError("comfyText2ImgRequest", 'Required parameter "comfyText2ImgRequest" was null or undefined when calling text2imgApiComfyText2imgPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/comfy/text2img`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ComfyText2ImgRequestToJSON(requestParameters["comfyText2ImgRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Generate an image from text using a simple workflow.
     * Text2Img
     */
    async text2imgApiComfyText2imgPost(requestParameters, initOverrides) {
        const response = await this.text2imgApiComfyText2imgPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Validate checkpoint and suggest alternatives.
     * Validate Checkpoint
     */
    async validateCheckpointApiComfyValidateCheckpointCheckpointGetRaw(requestParameters, initOverrides) {
        if (requestParameters["checkpoint"] == null) {
            throw new runtime.RequiredError("checkpoint", 'Required parameter "checkpoint" was null or undefined when calling validateCheckpointApiComfyValidateCheckpointCheckpointGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/comfy/validate/checkpoint/{checkpoint}`;
        urlPath = urlPath.replace(`{${"checkpoint"}}`, encodeURIComponent(String(requestParameters["checkpoint"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Validate checkpoint and suggest alternatives.
     * Validate Checkpoint
     */
    async validateCheckpointApiComfyValidateCheckpointCheckpointGet(requestParameters, initOverrides) {
        const response = await this.validateCheckpointApiComfyValidateCheckpointCheckpointGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Validate LoRA and suggest alternatives.
     * Validate Lora
     */
    async validateLoraApiComfyValidateLoraLoraGetRaw(requestParameters, initOverrides) {
        if (requestParameters["lora"] == null) {
            throw new runtime.RequiredError("lora", 'Required parameter "lora" was null or undefined when calling validateLoraApiComfyValidateLoraLoraGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/comfy/validate/lora/{lora}`;
        urlPath = urlPath.replace(`{${"lora"}}`, encodeURIComponent(String(requestParameters["lora"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Validate LoRA and suggest alternatives.
     * Validate Lora
     */
    async validateLoraApiComfyValidateLoraLoraGet(requestParameters, initOverrides) {
        const response = await this.validateLoraApiComfyValidateLoraLoraGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Validate sampler and suggest alternatives.
     * Validate Sampler
     */
    async validateSamplerApiComfyValidateSamplerSamplerGetRaw(requestParameters, initOverrides) {
        if (requestParameters["sampler"] == null) {
            throw new runtime.RequiredError("sampler", 'Required parameter "sampler" was null or undefined when calling validateSamplerApiComfyValidateSamplerSamplerGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/comfy/validate/sampler/{sampler}`;
        urlPath = urlPath.replace(`{${"sampler"}}`, encodeURIComponent(String(requestParameters["sampler"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Validate sampler and suggest alternatives.
     * Validate Sampler
     */
    async validateSamplerApiComfyValidateSamplerSamplerGet(requestParameters, initOverrides) {
        const response = await this.validateSamplerApiComfyValidateSamplerSamplerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Validate scheduler and suggest alternatives.
     * Validate Scheduler
     */
    async validateSchedulerApiComfyValidateSchedulerSchedulerGetRaw(requestParameters, initOverrides) {
        if (requestParameters["scheduler"] == null) {
            throw new runtime.RequiredError("scheduler", 'Required parameter "scheduler" was null or undefined when calling validateSchedulerApiComfyValidateSchedulerSchedulerGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/comfy/validate/scheduler/{scheduler}`;
        urlPath = urlPath.replace(`{${"scheduler"}}`, encodeURIComponent(String(requestParameters["scheduler"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Validate scheduler and suggest alternatives.
     * Validate Scheduler
     */
    async validateSchedulerApiComfyValidateSchedulerSchedulerGet(requestParameters, initOverrides) {
        const response = await this.validateSchedulerApiComfyValidateSchedulerSchedulerGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * View a generated image.
     * View Image
     */
    async viewImageApiComfyViewGetRaw(requestParameters, initOverrides) {
        if (requestParameters["filename"] == null) {
            throw new runtime.RequiredError("filename", 'Required parameter "filename" was null or undefined when calling viewImageApiComfyViewGet().');
        }
        const queryParameters = {};
        if (requestParameters["filename"] != null) {
            queryParameters["filename"] = requestParameters["filename"];
        }
        if (requestParameters["subfolder"] != null) {
            queryParameters["subfolder"] = requestParameters["subfolder"];
        }
        if (requestParameters["type"] != null) {
            queryParameters["type"] = requestParameters["type"];
        }
        const headerParameters = {};
        let urlPath = `/api/comfy/view`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * View a generated image.
     * View Image
     */
    async viewImageApiComfyViewGet(requestParameters, initOverrides) {
        const response = await this.viewImageApiComfyViewGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
