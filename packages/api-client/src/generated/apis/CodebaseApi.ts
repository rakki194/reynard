/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

/**
 * CodebaseApi - interface
 * 
 * @export
 * @interface CodebaseApiInterface
 */
export interface CodebaseApiInterface {
    /**
     * Get codebase indexing statistics.
     * @summary Get Codebase Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodebaseApiInterface
     */
    getCodebaseStatsApiRagCodebaseStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Get codebase indexing statistics.
     * Get Codebase Stats
     */
    getCodebaseStatsApiRagCodebaseStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Check RAG service health.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodebaseApiInterface
     */
    healthCheckApiRagCodebaseHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Check RAG service health.
     * Health Check
     */
    healthCheckApiRagCodebaseHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * Index the Reynard codebase for semantic search.
     * @summary Index Codebase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodebaseApiInterface
     */
    indexCodebaseApiRagCodebaseIndexPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Index the Reynard codebase for semantic search.
     * Index Codebase
     */
    indexCodebaseApiRagCodebaseIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Scan the codebase and return file information.
     * @summary Scan Codebase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodebaseApiInterface
     */
    scanCodebaseApiRagCodebaseScanPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Scan the codebase and return file information.
     * Scan Codebase
     */
    scanCodebaseApiRagCodebaseScanPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class CodebaseApi extends runtime.BaseAPI implements CodebaseApiInterface {

    /**
     * Get codebase indexing statistics.
     * Get Codebase Stats
     */
    async getCodebaseStatsApiRagCodebaseStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/rag/codebase/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get codebase indexing statistics.
     * Get Codebase Stats
     */
    async getCodebaseStatsApiRagCodebaseStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.getCodebaseStatsApiRagCodebaseStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Check RAG service health.
     * Health Check
     */
    async healthCheckApiRagCodebaseHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/rag/codebase/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Check RAG service health.
     * Health Check
     */
    async healthCheckApiRagCodebaseHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.healthCheckApiRagCodebaseHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Index the Reynard codebase for semantic search.
     * Index Codebase
     */
    async indexCodebaseApiRagCodebaseIndexPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/rag/codebase/index`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Index the Reynard codebase for semantic search.
     * Index Codebase
     */
    async indexCodebaseApiRagCodebaseIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.indexCodebaseApiRagCodebaseIndexPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Scan the codebase and return file information.
     * Scan Codebase
     */
    async scanCodebaseApiRagCodebaseScanPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/rag/codebase/scan`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Scan the codebase and return file information.
     * Scan Codebase
     */
    async scanCodebaseApiRagCodebaseScanPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.scanCodebaseApiRagCodebaseScanPostRaw(initOverrides);
        return await response.value();
    }

}
