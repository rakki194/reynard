/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { TTSBatchRequestToJSON, TTSBatchResponseFromJSON, TTSConfigRequestToJSON, TTSConfigResponseFromJSON, TTSStatsResponseFromJSON, TTSSynthesisRequestToJSON, TTSSynthesisResponseFromJSON, } from "../models/index";
/**
 *
 */
export class TtsApi extends runtime.BaseAPI {
    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    async cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/admin/cleanup`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Clean up old audio files.
     * Cleanup Audio Files
     */
    async cleanupAudioFilesApiTtsApiTtsAdminCleanupPost(initOverrides) {
        const response = await this.cleanupAudioFilesApiTtsApiTtsAdminCleanupPostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get generated audio file.
     * Get Audio File
     */
    async getAudioFileApiTtsApiTtsAudioFilenameGetRaw(requestParameters, initOverrides) {
        if (requestParameters["filename"] == null) {
            throw new runtime.RequiredError("filename", 'Required parameter "filename" was null or undefined when calling getAudioFileApiTtsApiTtsAudioFilenameGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/audio/{filename}`;
        urlPath = urlPath.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters["filename"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get generated audio file.
     * Get Audio File
     */
    async getAudioFileApiTtsApiTtsAudioFilenameGet(requestParameters, initOverrides) {
        const response = await this.getAudioFileApiTtsApiTtsAudioFilenameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get generated audio file.
     * Get Audio File
     */
    async getAudioFileApiTtsApiTtsAudioFilenameGet_1Raw(requestParameters, initOverrides) {
        if (requestParameters["filename"] == null) {
            throw new runtime.RequiredError("filename", 'Required parameter "filename" was null or undefined when calling getAudioFileApiTtsApiTtsAudioFilenameGet_1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/audio/{filename}`;
        urlPath = urlPath.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters["filename"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get generated audio file.
     * Get Audio File
     */
    async getAudioFileApiTtsApiTtsAudioFilenameGet_1(requestParameters, initOverrides) {
        const response = await this.getAudioFileApiTtsApiTtsAudioFilenameGet_1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    async getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/admin/backends`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get list of available TTS backends.
     * Get Available Backends
     */
    async getAvailableBackendsApiTtsApiTtsAdminBackendsGet(initOverrides) {
        const response = await this.getAvailableBackendsApiTtsApiTtsAdminBackendsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    async getTtsConfigApiTtsApiTtsConfigGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/config`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TTSConfigResponseFromJSON(jsonValue));
    }
    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    async getTtsConfigApiTtsApiTtsConfigGet(initOverrides) {
        const response = await this.getTtsConfigApiTtsApiTtsConfigGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    async getTtsConfigApiTtsApiTtsConfigGet_2Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/config`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TTSConfigResponseFromJSON(jsonValue));
    }
    /**
     * Get current TTS configuration.
     * Get Tts Config
     */
    async getTtsConfigApiTtsApiTtsConfigGet_2(initOverrides) {
        const response = await this.getTtsConfigApiTtsApiTtsConfigGet_2Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    async getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/admin/stats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TTSStatsResponseFromJSON(jsonValue));
    }
    /**
     * Get TTS service statistics.
     * Get Tts Stats
     */
    async getTtsStatsApiTtsApiTtsAdminStatsGet(initOverrides) {
        const response = await this.getTtsStatsApiTtsApiTtsAdminStatsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Perform TTS service health check.
     * Health Check
     */
    async healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/admin/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Perform TTS service health check.
     * Health Check
     */
    async healthCheckApiTtsApiTtsAdminHealthGet(initOverrides) {
        const response = await this.healthCheckApiTtsApiTtsAdminHealthGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    async reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw(requestParameters, initOverrides) {
        if (requestParameters["backendName"] == null) {
            throw new runtime.RequiredError("backendName", 'Required parameter "backendName" was null or undefined when calling reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/tts/api/tts/admin/backends/{backend_name}/reload`;
        urlPath = urlPath.replace(`{${"backend_name"}}`, encodeURIComponent(String(requestParameters["backendName"])));
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Reload a specific TTS backend.
     * Reload Backend
     */
    async reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPost(requestParameters, initOverrides) {
        const response = await this.reloadBackendApiTtsApiTtsAdminBackendsBackendNameReloadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    async synthesizeBatchApiTtsApiTtsSynthesizeBatchPostRaw(requestParameters, initOverrides) {
        if (requestParameters["tTSBatchRequest"] == null) {
            throw new runtime.RequiredError("tTSBatchRequest", 'Required parameter "tTSBatchRequest" was null or undefined when calling synthesizeBatchApiTtsApiTtsSynthesizeBatchPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/tts/api/tts/synthesize/batch`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: TTSBatchRequestToJSON(requestParameters["tTSBatchRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TTSBatchResponseFromJSON(jsonValue));
    }
    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    async synthesizeBatchApiTtsApiTtsSynthesizeBatchPost(requestParameters, initOverrides) {
        const response = await this.synthesizeBatchApiTtsApiTtsSynthesizeBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    async synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3Raw(requestParameters, initOverrides) {
        if (requestParameters["tTSBatchRequest"] == null) {
            throw new runtime.RequiredError("tTSBatchRequest", 'Required parameter "tTSBatchRequest" was null or undefined when calling synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/tts/api/tts/synthesize/batch`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: TTSBatchRequestToJSON(requestParameters["tTSBatchRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TTSBatchResponseFromJSON(jsonValue));
    }
    /**
     * Synthesize multiple texts to speech.
     * Synthesize Batch
     */
    async synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3(requestParameters, initOverrides) {
        const response = await this.synthesizeBatchApiTtsApiTtsSynthesizeBatchPost_3Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    async synthesizeTextApiTtsApiTtsSynthesizePostRaw(requestParameters, initOverrides) {
        if (requestParameters["tTSSynthesisRequest"] == null) {
            throw new runtime.RequiredError("tTSSynthesisRequest", 'Required parameter "tTSSynthesisRequest" was null or undefined when calling synthesizeTextApiTtsApiTtsSynthesizePost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/tts/api/tts/synthesize`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: TTSSynthesisRequestToJSON(requestParameters["tTSSynthesisRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TTSSynthesisResponseFromJSON(jsonValue));
    }
    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    async synthesizeTextApiTtsApiTtsSynthesizePost(requestParameters, initOverrides) {
        const response = await this.synthesizeTextApiTtsApiTtsSynthesizePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    async synthesizeTextApiTtsApiTtsSynthesizePost_4Raw(requestParameters, initOverrides) {
        if (requestParameters["tTSSynthesisRequest"] == null) {
            throw new runtime.RequiredError("tTSSynthesisRequest", 'Required parameter "tTSSynthesisRequest" was null or undefined when calling synthesizeTextApiTtsApiTtsSynthesizePost_4().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/tts/api/tts/synthesize`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: TTSSynthesisRequestToJSON(requestParameters["tTSSynthesisRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TTSSynthesisResponseFromJSON(jsonValue));
    }
    /**
     * Synthesize text to speech.
     * Synthesize Text
     */
    async synthesizeTextApiTtsApiTtsSynthesizePost_4(requestParameters, initOverrides) {
        const response = await this.synthesizeTextApiTtsApiTtsSynthesizePost_4Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    async synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRaw(requestParameters, initOverrides) {
        if (requestParameters["text"] == null) {
            throw new runtime.RequiredError("text", 'Required parameter "text" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost().');
        }
        if (requestParameters["referenceAudio"] == null) {
            throw new runtime.RequiredError("referenceAudio", 'Required parameter "referenceAudio" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const consumes = [{ contentType: "multipart/form-data" }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters["text"] != null) {
            formParams.append("text", requestParameters["text"]);
        }
        if (requestParameters["referenceAudio"] != null) {
            formParams.append("reference_audio", requestParameters["referenceAudio"]);
        }
        if (requestParameters["speed"] != null) {
            formParams.append("speed", requestParameters["speed"]);
        }
        if (requestParameters["lang"] != null) {
            formParams.append("lang", requestParameters["lang"]);
        }
        let urlPath = `/api/tts/api/tts/voice-clone`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    async synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost(requestParameters, initOverrides) {
        const response = await this.synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    async synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5Raw(requestParameters, initOverrides) {
        if (requestParameters["text"] == null) {
            throw new runtime.RequiredError("text", 'Required parameter "text" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5().');
        }
        if (requestParameters["referenceAudio"] == null) {
            throw new runtime.RequiredError("referenceAudio", 'Required parameter "referenceAudio" was null or undefined when calling synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const consumes = [{ contentType: "multipart/form-data" }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters["text"] != null) {
            formParams.append("text", requestParameters["text"]);
        }
        if (requestParameters["referenceAudio"] != null) {
            formParams.append("reference_audio", requestParameters["referenceAudio"]);
        }
        if (requestParameters["speed"] != null) {
            formParams.append("speed", requestParameters["speed"]);
        }
        if (requestParameters["lang"] != null) {
            formParams.append("lang", requestParameters["lang"]);
        }
        let urlPath = `/api/tts/api/tts/voice-clone`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Synthesize text with voice cloning using XTTS.
     * Synthesize With Voice Clone
     */
    async synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5(requestParameters, initOverrides) {
        const response = await this.synthesizeWithVoiceCloneApiTtsApiTtsVoiceClonePost_5Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    async updateTtsConfigApiTtsApiTtsConfigPostRaw(requestParameters, initOverrides) {
        if (requestParameters["tTSConfigRequest"] == null) {
            throw new runtime.RequiredError("tTSConfigRequest", 'Required parameter "tTSConfigRequest" was null or undefined when calling updateTtsConfigApiTtsApiTtsConfigPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/tts/api/tts/config`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: TTSConfigRequestToJSON(requestParameters["tTSConfigRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TTSConfigResponseFromJSON(jsonValue));
    }
    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    async updateTtsConfigApiTtsApiTtsConfigPost(requestParameters, initOverrides) {
        const response = await this.updateTtsConfigApiTtsApiTtsConfigPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    async updateTtsConfigApiTtsApiTtsConfigPost_6Raw(requestParameters, initOverrides) {
        if (requestParameters["tTSConfigRequest"] == null) {
            throw new runtime.RequiredError("tTSConfigRequest", 'Required parameter "tTSConfigRequest" was null or undefined when calling updateTtsConfigApiTtsApiTtsConfigPost_6().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/tts/api/tts/config`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: TTSConfigRequestToJSON(requestParameters["tTSConfigRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => TTSConfigResponseFromJSON(jsonValue));
    }
    /**
     * Update TTS configuration.
     * Update Tts Config
     */
    async updateTtsConfigApiTtsApiTtsConfigPost_6(requestParameters, initOverrides) {
        const response = await this.updateTtsConfigApiTtsApiTtsConfigPost_6Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
