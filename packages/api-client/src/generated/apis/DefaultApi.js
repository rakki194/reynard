/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
    /**
     * Health check endpoint
     * Health Check
     */
    async healthCheckApiHealthGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Health check endpoint
     * Health Check
     */
    async healthCheckApiHealthGet(initOverrides) {
        const response = await this.healthCheckApiHealthGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Protected route that requires authentication
     * Protected Route
     */
    async protectedRouteApiProtectedGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        let urlPath = `/api/protected`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Protected route that requires authentication
     * Protected Route
     */
    async protectedRouteApiProtectedGet(initOverrides) {
        const response = await this.protectedRouteApiProtectedGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Root endpoint
     * Root
     */
    async rootGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Root endpoint
     * Root
     */
    async rootGet(initOverrides) {
        const response = await this.rootGetRaw(initOverrides);
        return await response.value();
    }
}
