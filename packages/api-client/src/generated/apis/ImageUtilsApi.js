/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { AspectRatioResponseFromJSON, ImageDimensionsRequestToJSON, ImageFormatResponseFromJSON, ImageProcessingServiceInfoResponseFromJSON, ImageValidationRequestToJSON, ResizeDimensionsRequestToJSON, ResizeDimensionsResponseFromJSON, ValidationResponseFromJSON, } from "../models/index";
/**
 *
 */
export class ImageUtilsApi extends runtime.BaseAPI {
    /**
     * Calculate resize dimensions maintaining aspect ratio.
     * Calculate Resize Dimensions
     */
    async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPostRaw(requestParameters, initOverrides) {
        if (requestParameters["resizeDimensionsRequest"] == null) {
            throw new runtime.RequiredError("resizeDimensionsRequest", 'Required parameter "resizeDimensionsRequest" was null or undefined when calling calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/resize-dimensions`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ResizeDimensionsRequestToJSON(requestParameters["resizeDimensionsRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ResizeDimensionsResponseFromJSON(jsonValue));
    }
    /**
     * Calculate resize dimensions maintaining aspect ratio.
     * Calculate Resize Dimensions
     */
    async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost(requestParameters, initOverrides) {
        const response = await this.calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Calculate resize dimensions maintaining aspect ratio.
     * Calculate Resize Dimensions
     */
    async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_1Raw(requestParameters, initOverrides) {
        if (requestParameters["resizeDimensionsRequest"] == null) {
            throw new runtime.RequiredError("resizeDimensionsRequest", 'Required parameter "resizeDimensionsRequest" was null or undefined when calling calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/resize-dimensions`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ResizeDimensionsRequestToJSON(requestParameters["resizeDimensionsRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ResizeDimensionsResponseFromJSON(jsonValue));
    }
    /**
     * Calculate resize dimensions maintaining aspect ratio.
     * Calculate Resize Dimensions
     */
    async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_1(requestParameters, initOverrides) {
        const response = await this.calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Calculate resize dimensions maintaining aspect ratio.
     * Calculate Resize Dimensions
     */
    async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_2Raw(requestParameters, initOverrides) {
        if (requestParameters["resizeDimensionsRequest"] == null) {
            throw new runtime.RequiredError("resizeDimensionsRequest", 'Required parameter "resizeDimensionsRequest" was null or undefined when calling calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_2().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/resize-dimensions`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ResizeDimensionsRequestToJSON(requestParameters["resizeDimensionsRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ResizeDimensionsResponseFromJSON(jsonValue));
    }
    /**
     * Calculate resize dimensions maintaining aspect ratio.
     * Calculate Resize Dimensions
     */
    async calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_2(requestParameters, initOverrides) {
        const response = await this.calculateResizeDimensionsApiImageUtilsApiImageUtilsApiImageUtilsResizeDimensionsPost_2Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Calculate aspect ratio for given dimensions.
     * Get Aspect Ratio
     */
    async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPostRaw(requestParameters, initOverrides) {
        if (requestParameters["imageDimensionsRequest"] == null) {
            throw new runtime.RequiredError("imageDimensionsRequest", 'Required parameter "imageDimensionsRequest" was null or undefined when calling getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/aspect-ratio`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => AspectRatioResponseFromJSON(jsonValue));
    }
    /**
     * Calculate aspect ratio for given dimensions.
     * Get Aspect Ratio
     */
    async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost(requestParameters, initOverrides) {
        const response = await this.getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Calculate aspect ratio for given dimensions.
     * Get Aspect Ratio
     */
    async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_3Raw(requestParameters, initOverrides) {
        if (requestParameters["imageDimensionsRequest"] == null) {
            throw new runtime.RequiredError("imageDimensionsRequest", 'Required parameter "imageDimensionsRequest" was null or undefined when calling getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_3().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/aspect-ratio`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => AspectRatioResponseFromJSON(jsonValue));
    }
    /**
     * Calculate aspect ratio for given dimensions.
     * Get Aspect Ratio
     */
    async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_3(requestParameters, initOverrides) {
        const response = await this.getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_3Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Calculate aspect ratio for given dimensions.
     * Get Aspect Ratio
     */
    async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_4Raw(requestParameters, initOverrides) {
        if (requestParameters["imageDimensionsRequest"] == null) {
            throw new runtime.RequiredError("imageDimensionsRequest", 'Required parameter "imageDimensionsRequest" was null or undefined when calling getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_4().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/aspect-ratio`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => AspectRatioResponseFromJSON(jsonValue));
    }
    /**
     * Calculate aspect ratio for given dimensions.
     * Get Aspect Ratio
     */
    async getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_4(requestParameters, initOverrides) {
        const response = await this.getAspectRatioApiImageUtilsApiImageUtilsApiImageUtilsAspectRatioPost_4Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get default normalization values for a model type.
     * Get Default Normalization
     */
    async getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGetRaw(requestParameters, initOverrides) {
        if (requestParameters["modelType"] == null) {
            throw new runtime.RequiredError("modelType", 'Required parameter "modelType" was null or undefined when calling getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/normalization/{model_type}`;
        urlPath = urlPath.replace(`{${"model_type"}}`, encodeURIComponent(String(requestParameters["modelType"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get default normalization values for a model type.
     * Get Default Normalization
     */
    async getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet(requestParameters, initOverrides) {
        const response = await this.getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get default normalization values for a model type.
     * Get Default Normalization
     */
    async getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet_5Raw(requestParameters, initOverrides) {
        if (requestParameters["modelType"] == null) {
            throw new runtime.RequiredError("modelType", 'Required parameter "modelType" was null or undefined when calling getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet_5().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/normalization/{model_type}`;
        urlPath = urlPath.replace(`{${"model_type"}}`, encodeURIComponent(String(requestParameters["modelType"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get default normalization values for a model type.
     * Get Default Normalization
     */
    async getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet_5(requestParameters, initOverrides) {
        const response = await this.getDefaultNormalizationApiImageUtilsApiImageUtilsNormalizationModelTypeGet_5Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get format information for a specific extension.
     * Get Format Info
     */
    async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGetRaw(requestParameters, initOverrides) {
        if (requestParameters["extension"] == null) {
            throw new runtime.RequiredError("extension", 'Required parameter "extension" was null or undefined when calling getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/format/{extension}`;
        urlPath = urlPath.replace(`{${"extension"}}`, encodeURIComponent(String(requestParameters["extension"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ImageFormatResponseFromJSON(jsonValue));
    }
    /**
     * Get format information for a specific extension.
     * Get Format Info
     */
    async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet(requestParameters, initOverrides) {
        const response = await this.getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get format information for a specific extension.
     * Get Format Info
     */
    async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_6Raw(requestParameters, initOverrides) {
        if (requestParameters["extension"] == null) {
            throw new runtime.RequiredError("extension", 'Required parameter "extension" was null or undefined when calling getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_6().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/format/{extension}`;
        urlPath = urlPath.replace(`{${"extension"}}`, encodeURIComponent(String(requestParameters["extension"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ImageFormatResponseFromJSON(jsonValue));
    }
    /**
     * Get format information for a specific extension.
     * Get Format Info
     */
    async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_6(requestParameters, initOverrides) {
        const response = await this.getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_6Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get format information for a specific extension.
     * Get Format Info
     */
    async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_7Raw(requestParameters, initOverrides) {
        if (requestParameters["extension"] == null) {
            throw new runtime.RequiredError("extension", 'Required parameter "extension" was null or undefined when calling getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_7().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/format/{extension}`;
        urlPath = urlPath.replace(`{${"extension"}}`, encodeURIComponent(String(requestParameters["extension"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ImageFormatResponseFromJSON(jsonValue));
    }
    /**
     * Get format information for a specific extension.
     * Get Format Info
     */
    async getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_7(requestParameters, initOverrides) {
        const response = await this.getFormatInfoApiImageUtilsApiImageUtilsApiImageUtilsFormatExtensionGet_7Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get image processing service information.
     * Get Service Info
     */
    async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/service-info`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ImageProcessingServiceInfoResponseFromJSON(jsonValue));
    }
    /**
     * Get image processing service information.
     * Get Service Info
     */
    async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet(initOverrides) {
        const response = await this.getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get image processing service information.
     * Get Service Info
     */
    async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_8Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/service-info`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ImageProcessingServiceInfoResponseFromJSON(jsonValue));
    }
    /**
     * Get image processing service information.
     * Get Service Info
     */
    async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_8(initOverrides) {
        const response = await this.getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_8Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get image processing service information.
     * Get Service Info
     */
    async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_9Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/service-info`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ImageProcessingServiceInfoResponseFromJSON(jsonValue));
    }
    /**
     * Get image processing service information.
     * Get Service Info
     */
    async getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_9(initOverrides) {
        const response = await this.getServiceInfoApiImageUtilsApiImageUtilsApiImageUtilsServiceInfoGet_9Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get list of supported image formats.
     * Get Supported Formats
     */
    async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/supported-formats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Get list of supported image formats.
     * Get Supported Formats
     */
    async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet(initOverrides) {
        const response = await this.getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get list of supported image formats.
     * Get Supported Formats
     */
    async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_10Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/supported-formats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Get list of supported image formats.
     * Get Supported Formats
     */
    async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_10(initOverrides) {
        const response = await this.getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_10Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get list of supported image formats.
     * Get Supported Formats
     */
    async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_11Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/supported-formats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Get list of supported image formats.
     * Get Supported Formats
     */
    async getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_11(initOverrides) {
        const response = await this.getSupportedFormatsApiImageUtilsApiImageUtilsApiImageUtilsSupportedFormatsGet_11Raw(initOverrides);
        return await response.value();
    }
    /**
     * Health check endpoint for the image utils service.
     * Health Check
     */
    async healthCheckApiImageUtilsApiImageUtilsHealthGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Health check endpoint for the image utils service.
     * Health Check
     */
    async healthCheckApiImageUtilsApiImageUtilsHealthGet(initOverrides) {
        const response = await this.healthCheckApiImageUtilsApiImageUtilsHealthGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Health check endpoint for the image utils service.
     * Health Check
     */
    async healthCheckApiImageUtilsApiImageUtilsHealthGet_12Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Health check endpoint for the image utils service.
     * Health Check
     */
    async healthCheckApiImageUtilsApiImageUtilsHealthGet_12(initOverrides) {
        const response = await this.healthCheckApiImageUtilsApiImageUtilsHealthGet_12Raw(initOverrides);
        return await response.value();
    }
    /**
     * Check if AVIF format is supported.
     * Is Avif Supported
     */
    async isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/avif-supported`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Check if AVIF format is supported.
     * Is Avif Supported
     */
    async isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet(initOverrides) {
        const response = await this.isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Check if AVIF format is supported.
     * Is Avif Supported
     */
    async isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet_13Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/avif-supported`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Check if AVIF format is supported.
     * Is Avif Supported
     */
    async isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet_13(initOverrides) {
        const response = await this.isAvifSupportedApiImageUtilsApiImageUtilsAvifSupportedGet_13Raw(initOverrides);
        return await response.value();
    }
    /**
     * Check if JXL format is supported.
     * Is Jxl Supported
     */
    async isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/jxl-supported`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Check if JXL format is supported.
     * Is Jxl Supported
     */
    async isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet(initOverrides) {
        const response = await this.isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Check if JXL format is supported.
     * Is Jxl Supported
     */
    async isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet_14Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/image-utils/api/image-utils/jxl-supported`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Check if JXL format is supported.
     * Is Jxl Supported
     */
    async isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet_14(initOverrides) {
        const response = await this.isJxlSupportedApiImageUtilsApiImageUtilsJxlSupportedGet_14Raw(initOverrides);
        return await response.value();
    }
    /**
     * Validate image dimensions.
     * Validate Dimensions
     */
    async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPostRaw(requestParameters, initOverrides) {
        if (requestParameters["imageDimensionsRequest"] == null) {
            throw new runtime.RequiredError("imageDimensionsRequest", 'Required parameter "imageDimensionsRequest" was null or undefined when calling validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-dimensions`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
    }
    /**
     * Validate image dimensions.
     * Validate Dimensions
     */
    async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost(requestParameters, initOverrides) {
        const response = await this.validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Validate image dimensions.
     * Validate Dimensions
     */
    async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_15Raw(requestParameters, initOverrides) {
        if (requestParameters["imageDimensionsRequest"] == null) {
            throw new runtime.RequiredError("imageDimensionsRequest", 'Required parameter "imageDimensionsRequest" was null or undefined when calling validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_15().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-dimensions`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
    }
    /**
     * Validate image dimensions.
     * Validate Dimensions
     */
    async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_15(requestParameters, initOverrides) {
        const response = await this.validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_15Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Validate image dimensions.
     * Validate Dimensions
     */
    async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_16Raw(requestParameters, initOverrides) {
        if (requestParameters["imageDimensionsRequest"] == null) {
            throw new runtime.RequiredError("imageDimensionsRequest", 'Required parameter "imageDimensionsRequest" was null or undefined when calling validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_16().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-dimensions`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ImageDimensionsRequestToJSON(requestParameters["imageDimensionsRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
    }
    /**
     * Validate image dimensions.
     * Validate Dimensions
     */
    async validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_16(requestParameters, initOverrides) {
        const response = await this.validateDimensionsApiImageUtilsApiImageUtilsApiImageUtilsValidateDimensionsPost_16Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Validate an image file path.
     * Validate Image Path
     */
    async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPostRaw(requestParameters, initOverrides) {
        if (requestParameters["imageValidationRequest"] == null) {
            throw new runtime.RequiredError("imageValidationRequest", 'Required parameter "imageValidationRequest" was null or undefined when calling validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-path`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ImageValidationRequestToJSON(requestParameters["imageValidationRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
    }
    /**
     * Validate an image file path.
     * Validate Image Path
     */
    async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost(requestParameters, initOverrides) {
        const response = await this.validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Validate an image file path.
     * Validate Image Path
     */
    async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_17Raw(requestParameters, initOverrides) {
        if (requestParameters["imageValidationRequest"] == null) {
            throw new runtime.RequiredError("imageValidationRequest", 'Required parameter "imageValidationRequest" was null or undefined when calling validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_17().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-path`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ImageValidationRequestToJSON(requestParameters["imageValidationRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
    }
    /**
     * Validate an image file path.
     * Validate Image Path
     */
    async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_17(requestParameters, initOverrides) {
        const response = await this.validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_17Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Validate an image file path.
     * Validate Image Path
     */
    async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_18Raw(requestParameters, initOverrides) {
        if (requestParameters["imageValidationRequest"] == null) {
            throw new runtime.RequiredError("imageValidationRequest", 'Required parameter "imageValidationRequest" was null or undefined when calling validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_18().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/image-utils/api/image-utils/api/image-utils/validate-path`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ImageValidationRequestToJSON(requestParameters["imageValidationRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ValidationResponseFromJSON(jsonValue));
    }
    /**
     * Validate an image file path.
     * Validate Image Path
     */
    async validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_18(requestParameters, initOverrides) {
        const response = await this.validateImagePathApiImageUtilsApiImageUtilsApiImageUtilsValidatePathPost_18Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
