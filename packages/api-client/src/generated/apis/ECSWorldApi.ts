/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentCreateRequest,
  AgentResponse,
  HTTPValidationError,
  OffspringCreateRequest,
  WorldStatusResponse,
} from '../models/index';
import {
    AgentCreateRequestFromJSON,
    AgentCreateRequestToJSON,
    AgentResponseFromJSON,
    AgentResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    OffspringCreateRequestFromJSON,
    OffspringCreateRequestToJSON,
    WorldStatusResponseFromJSON,
    WorldStatusResponseToJSON,
} from '../models/index';

export interface AnalyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGetRequest {
    agent1Id: string;
    agent2Id: string;
}

export interface CreateAgentApiEcsAgentsPostRequest {
    agentCreateRequest: AgentCreateRequest;
}

export interface CreateOffspringApiEcsAgentsOffspringPostRequest {
    offspringCreateRequest: OffspringCreateRequest;
}

export interface EnableBreedingApiEcsBreedingEnablePostRequest {
    enabled?: boolean;
}

export interface FindCompatibleMatesApiEcsAgentsAgentIdMatesGetRequest {
    agentId: string;
    maxResults?: number;
}

export interface GetAgentLineageApiEcsAgentsAgentIdLineageGetRequest {
    agentId: string;
    depth?: number;
}

/**
 * ECSWorldApi - interface
 * 
 * @export
 * @interface ECSWorldApiInterface
 */
export interface ECSWorldApiInterface {
    /**
     * Analyze genetic compatibility between two agents.
     * @summary Analyze Compatibility
     * @param {string} agent1Id 
     * @param {string} agent2Id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECSWorldApiInterface
     */
    analyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGetRaw(requestParameters: AnalyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Analyze genetic compatibility between two agents.
     * Analyze Compatibility
     */
    analyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGet(requestParameters: AnalyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Create a new agent.
     * @summary Create Agent
     * @param {AgentCreateRequest} agentCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECSWorldApiInterface
     */
    createAgentApiEcsAgentsPostRaw(requestParameters: CreateAgentApiEcsAgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>>;

    /**
     * Create a new agent.
     * Create Agent
     */
    createAgentApiEcsAgentsPost(requestParameters: CreateAgentApiEcsAgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse>;

    /**
     * Create offspring from two parent agents.
     * @summary Create Offspring
     * @param {OffspringCreateRequest} offspringCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECSWorldApiInterface
     */
    createOffspringApiEcsAgentsOffspringPostRaw(requestParameters: CreateOffspringApiEcsAgentsOffspringPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>>;

    /**
     * Create offspring from two parent agents.
     * Create Offspring
     */
    createOffspringApiEcsAgentsOffspringPost(requestParameters: CreateOffspringApiEcsAgentsOffspringPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse>;

    /**
     * Enable or disable automatic breeding.
     * @summary Enable Breeding
     * @param {boolean} [enabled] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECSWorldApiInterface
     */
    enableBreedingApiEcsBreedingEnablePostRaw(requestParameters: EnableBreedingApiEcsBreedingEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Enable or disable automatic breeding.
     * Enable Breeding
     */
    enableBreedingApiEcsBreedingEnablePost(requestParameters: EnableBreedingApiEcsBreedingEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Find compatible mates for an agent.
     * @summary Find Compatible Mates
     * @param {string} agentId 
     * @param {number} [maxResults] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECSWorldApiInterface
     */
    findCompatibleMatesApiEcsAgentsAgentIdMatesGetRaw(requestParameters: FindCompatibleMatesApiEcsAgentsAgentIdMatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Find compatible mates for an agent.
     * Find Compatible Mates
     */
    findCompatibleMatesApiEcsAgentsAgentIdMatesGet(requestParameters: FindCompatibleMatesApiEcsAgentsAgentIdMatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get agent family tree and lineage.
     * @summary Get Agent Lineage
     * @param {string} agentId 
     * @param {number} [depth] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECSWorldApiInterface
     */
    getAgentLineageApiEcsAgentsAgentIdLineageGetRaw(requestParameters: GetAgentLineageApiEcsAgentsAgentIdLineageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get agent family tree and lineage.
     * Get Agent Lineage
     */
    getAgentLineageApiEcsAgentsAgentIdLineageGet(requestParameters: GetAgentLineageApiEcsAgentsAgentIdLineageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get all agents in the world.
     * @summary Get Agents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECSWorldApiInterface
     */
    getAgentsApiEcsAgentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AgentResponse>>>;

    /**
     * Get all agents in the world.
     * Get Agents
     */
    getAgentsApiEcsAgentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AgentResponse>>;

    /**
     * Get breeding statistics.
     * @summary Get Breeding Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECSWorldApiInterface
     */
    getBreedingStatsApiEcsBreedingStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Get breeding statistics.
     * Get Breeding Stats
     */
    getBreedingStatsApiEcsBreedingStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get the current ECS world status.
     * @summary Get World Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ECSWorldApiInterface
     */
    getWorldStatusApiEcsStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorldStatusResponse>>;

    /**
     * Get the current ECS world status.
     * Get World Status
     */
    getWorldStatusApiEcsStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorldStatusResponse>;

}

/**
 * 
 */
export class ECSWorldApi extends runtime.BaseAPI implements ECSWorldApiInterface {

    /**
     * Analyze genetic compatibility between two agents.
     * Analyze Compatibility
     */
    async analyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGetRaw(requestParameters: AnalyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['agent1Id'] == null) {
            throw new runtime.RequiredError(
                'agent1Id',
                'Required parameter "agent1Id" was null or undefined when calling analyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGet().'
            );
        }

        if (requestParameters['agent2Id'] == null) {
            throw new runtime.RequiredError(
                'agent2Id',
                'Required parameter "agent2Id" was null or undefined when calling analyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ecs/agents/{agent1_id}/compatibility/{agent2_id}`;
        urlPath = urlPath.replace(`{${"agent1_id"}}`, encodeURIComponent(String(requestParameters['agent1Id'])));
        urlPath = urlPath.replace(`{${"agent2_id"}}`, encodeURIComponent(String(requestParameters['agent2Id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Analyze genetic compatibility between two agents.
     * Analyze Compatibility
     */
    async analyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGet(requestParameters: AnalyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.analyzeCompatibilityApiEcsAgentsAgent1IdCompatibilityAgent2IdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new agent.
     * Create Agent
     */
    async createAgentApiEcsAgentsPostRaw(requestParameters: CreateAgentApiEcsAgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>> {
        if (requestParameters['agentCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'agentCreateRequest',
                'Required parameter "agentCreateRequest" was null or undefined when calling createAgentApiEcsAgentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/ecs/agents`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentCreateRequestToJSON(requestParameters['agentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
    }

    /**
     * Create a new agent.
     * Create Agent
     */
    async createAgentApiEcsAgentsPost(requestParameters: CreateAgentApiEcsAgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse> {
        const response = await this.createAgentApiEcsAgentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create offspring from two parent agents.
     * Create Offspring
     */
    async createOffspringApiEcsAgentsOffspringPostRaw(requestParameters: CreateOffspringApiEcsAgentsOffspringPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>> {
        if (requestParameters['offspringCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'offspringCreateRequest',
                'Required parameter "offspringCreateRequest" was null or undefined when calling createOffspringApiEcsAgentsOffspringPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/ecs/agents/offspring`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OffspringCreateRequestToJSON(requestParameters['offspringCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
    }

    /**
     * Create offspring from two parent agents.
     * Create Offspring
     */
    async createOffspringApiEcsAgentsOffspringPost(requestParameters: CreateOffspringApiEcsAgentsOffspringPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse> {
        const response = await this.createOffspringApiEcsAgentsOffspringPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable or disable automatic breeding.
     * Enable Breeding
     */
    async enableBreedingApiEcsBreedingEnablePostRaw(requestParameters: EnableBreedingApiEcsBreedingEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['enabled'] != null) {
            queryParameters['enabled'] = requestParameters['enabled'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ecs/breeding/enable`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Enable or disable automatic breeding.
     * Enable Breeding
     */
    async enableBreedingApiEcsBreedingEnablePost(requestParameters: EnableBreedingApiEcsBreedingEnablePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.enableBreedingApiEcsBreedingEnablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find compatible mates for an agent.
     * Find Compatible Mates
     */
    async findCompatibleMatesApiEcsAgentsAgentIdMatesGetRaw(requestParameters: FindCompatibleMatesApiEcsAgentsAgentIdMatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling findCompatibleMatesApiEcsAgentsAgentIdMatesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['maxResults'] != null) {
            queryParameters['max_results'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ecs/agents/{agent_id}/mates`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Find compatible mates for an agent.
     * Find Compatible Mates
     */
    async findCompatibleMatesApiEcsAgentsAgentIdMatesGet(requestParameters: FindCompatibleMatesApiEcsAgentsAgentIdMatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.findCompatibleMatesApiEcsAgentsAgentIdMatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent family tree and lineage.
     * Get Agent Lineage
     */
    async getAgentLineageApiEcsAgentsAgentIdLineageGetRaw(requestParameters: GetAgentLineageApiEcsAgentsAgentIdLineageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling getAgentLineageApiEcsAgentsAgentIdLineageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['depth'] != null) {
            queryParameters['depth'] = requestParameters['depth'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ecs/agents/{agent_id}/lineage`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get agent family tree and lineage.
     * Get Agent Lineage
     */
    async getAgentLineageApiEcsAgentsAgentIdLineageGet(requestParameters: GetAgentLineageApiEcsAgentsAgentIdLineageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getAgentLineageApiEcsAgentsAgentIdLineageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all agents in the world.
     * Get Agents
     */
    async getAgentsApiEcsAgentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AgentResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ecs/agents`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AgentResponseFromJSON));
    }

    /**
     * Get all agents in the world.
     * Get Agents
     */
    async getAgentsApiEcsAgentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AgentResponse>> {
        const response = await this.getAgentsApiEcsAgentsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get breeding statistics.
     * Get Breeding Stats
     */
    async getBreedingStatsApiEcsBreedingStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ecs/breeding/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get breeding statistics.
     * Get Breeding Stats
     */
    async getBreedingStatsApiEcsBreedingStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getBreedingStatsApiEcsBreedingStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the current ECS world status.
     * Get World Status
     */
    async getWorldStatusApiEcsStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorldStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/ecs/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorldStatusResponseFromJSON(jsonValue));
    }

    /**
     * Get the current ECS world status.
     * Get World Status
     */
    async getWorldStatusApiEcsStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorldStatusResponse> {
        const response = await this.getWorldStatusApiEcsStatusGetRaw(initOverrides);
        return await response.value();
    }

}
