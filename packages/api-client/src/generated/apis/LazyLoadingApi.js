/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { ConfigResponseFromJSON, ConfigUpdateRequestToJSON, LazyExportRequestToJSON, LazyExportResponseFromJSON, LazyLoadingStatusResponseFromJSON, PackageInfoResponseFromJSON, PackageLoadRequestToJSON, PackageLoadResponseFromJSON, } from "../models/index";
/**
 *
 */
export class LazyLoadingApi extends runtime.BaseAPI {
    /**
     * Clear the export registry.
     * Clear Registry Endpoint
     */
    async clearRegistryEndpointApiLazyLoadingRegistryDeleteRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/lazy-loading/registry`;
        const response = await this.request({
            path: urlPath,
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Clear the export registry.
     * Clear Registry Endpoint
     */
    async clearRegistryEndpointApiLazyLoadingRegistryDelete(initOverrides) {
        const response = await this.clearRegistryEndpointApiLazyLoadingRegistryDeleteRaw(initOverrides);
        return await response.value();
    }
    /**
     * Create a new lazy export for a package.
     * Create Lazy Export Endpoint
     */
    async createLazyExportEndpointApiLazyLoadingExportsPostRaw(requestParameters, initOverrides) {
        if (requestParameters["lazyExportRequest"] == null) {
            throw new runtime.RequiredError("lazyExportRequest", 'Required parameter "lazyExportRequest" was null or undefined when calling createLazyExportEndpointApiLazyLoadingExportsPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/lazy-loading/exports`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: LazyExportRequestToJSON(requestParameters["lazyExportRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => LazyExportResponseFromJSON(jsonValue));
    }
    /**
     * Create a new lazy export for a package.
     * Create Lazy Export Endpoint
     */
    async createLazyExportEndpointApiLazyLoadingExportsPost(requestParameters, initOverrides) {
        const response = await this.createLazyExportEndpointApiLazyLoadingExportsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Force cleanup of packages or all packages.
     * Force Cleanup Endpoint
     */
    async forceCleanupEndpointApiLazyLoadingCleanupPostRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters["packageName"] != null) {
            queryParameters["package_name"] = requestParameters["packageName"];
        }
        const headerParameters = {};
        let urlPath = `/api/lazy-loading/cleanup`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Force cleanup of packages or all packages.
     * Force Cleanup Endpoint
     */
    async forceCleanupEndpointApiLazyLoadingCleanupPost(requestParameters = {}, initOverrides) {
        const response = await this.forceCleanupEndpointApiLazyLoadingCleanupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get information about all registered packages.
     * Get All Packages Endpoint
     */
    async getAllPackagesEndpointApiLazyLoadingPackagesGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/lazy-loading/packages`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(PackageInfoResponseFromJSON));
    }
    /**
     * Get information about all registered packages.
     * Get All Packages Endpoint
     */
    async getAllPackagesEndpointApiLazyLoadingPackagesGet(initOverrides) {
        const response = await this.getAllPackagesEndpointApiLazyLoadingPackagesGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get the current lazy loading configuration.
     * Get Config Endpoint
     */
    async getConfigEndpointApiLazyLoadingConfigGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/lazy-loading/config`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ConfigResponseFromJSON(jsonValue));
    }
    /**
     * Get the current lazy loading configuration.
     * Get Config Endpoint
     */
    async getConfigEndpointApiLazyLoadingConfigGet(initOverrides) {
        const response = await this.getConfigEndpointApiLazyLoadingConfigGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get an existing lazy export.
     * Get Lazy Export Endpoint
     */
    async getLazyExportEndpointApiLazyLoadingExportsPackageNameGetRaw(requestParameters, initOverrides) {
        if (requestParameters["packageName"] == null) {
            throw new runtime.RequiredError("packageName", 'Required parameter "packageName" was null or undefined when calling getLazyExportEndpointApiLazyLoadingExportsPackageNameGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/lazy-loading/exports/{package_name}`;
        urlPath = urlPath.replace(`{${"package_name"}}`, encodeURIComponent(String(requestParameters["packageName"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => LazyExportResponseFromJSON(jsonValue));
    }
    /**
     * Get an existing lazy export.
     * Get Lazy Export Endpoint
     */
    async getLazyExportEndpointApiLazyLoadingExportsPackageNameGet(requestParameters, initOverrides) {
        const response = await this.getLazyExportEndpointApiLazyLoadingExportsPackageNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get the current status of the lazy loading system.
     * Get Lazy Loading Status
     */
    async getLazyLoadingStatusApiLazyLoadingStatusGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/lazy-loading/status`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => LazyLoadingStatusResponseFromJSON(jsonValue));
    }
    /**
     * Get the current status of the lazy loading system.
     * Get Lazy Loading Status
     */
    async getLazyLoadingStatusApiLazyLoadingStatusGet(initOverrides) {
        const response = await this.getLazyLoadingStatusApiLazyLoadingStatusGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get detailed information about a specific package.
     * Get Package Info Endpoint
     */
    async getPackageInfoEndpointApiLazyLoadingPackagesPackageNameGetRaw(requestParameters, initOverrides) {
        if (requestParameters["packageName"] == null) {
            throw new runtime.RequiredError("packageName", 'Required parameter "packageName" was null or undefined when calling getPackageInfoEndpointApiLazyLoadingPackagesPackageNameGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/lazy-loading/packages/{package_name}`;
        urlPath = urlPath.replace(`{${"package_name"}}`, encodeURIComponent(String(requestParameters["packageName"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => PackageInfoResponseFromJSON(jsonValue));
    }
    /**
     * Get detailed information about a specific package.
     * Get Package Info Endpoint
     */
    async getPackageInfoEndpointApiLazyLoadingPackagesPackageNameGet(requestParameters, initOverrides) {
        const response = await this.getPackageInfoEndpointApiLazyLoadingPackagesPackageNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Load a package using its lazy export.
     * Load Package Endpoint
     */
    async loadPackageEndpointApiLazyLoadingPackagesLoadPostRaw(requestParameters, initOverrides) {
        if (requestParameters["packageLoadRequest"] == null) {
            throw new runtime.RequiredError("packageLoadRequest", 'Required parameter "packageLoadRequest" was null or undefined when calling loadPackageEndpointApiLazyLoadingPackagesLoadPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/lazy-loading/packages/load`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: PackageLoadRequestToJSON(requestParameters["packageLoadRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => PackageLoadResponseFromJSON(jsonValue));
    }
    /**
     * Load a package using its lazy export.
     * Load Package Endpoint
     */
    async loadPackageEndpointApiLazyLoadingPackagesLoadPost(requestParameters, initOverrides) {
        const response = await this.loadPackageEndpointApiLazyLoadingPackagesLoadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Unload a package by forcing cleanup of its lazy export.
     * Unload Package Endpoint
     */
    async unloadPackageEndpointApiLazyLoadingPackagesPackageNameDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters["packageName"] == null) {
            throw new runtime.RequiredError("packageName", 'Required parameter "packageName" was null or undefined when calling unloadPackageEndpointApiLazyLoadingPackagesPackageNameDelete().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/lazy-loading/packages/{package_name}`;
        urlPath = urlPath.replace(`{${"package_name"}}`, encodeURIComponent(String(requestParameters["packageName"])));
        const response = await this.request({
            path: urlPath,
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Unload a package by forcing cleanup of its lazy export.
     * Unload Package Endpoint
     */
    async unloadPackageEndpointApiLazyLoadingPackagesPackageNameDelete(requestParameters, initOverrides) {
        const response = await this.unloadPackageEndpointApiLazyLoadingPackagesPackageNameDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update the lazy loading configuration.
     * Update Config Endpoint
     */
    async updateConfigEndpointApiLazyLoadingConfigPutRaw(requestParameters, initOverrides) {
        if (requestParameters["configUpdateRequest"] == null) {
            throw new runtime.RequiredError("configUpdateRequest", 'Required parameter "configUpdateRequest" was null or undefined when calling updateConfigEndpointApiLazyLoadingConfigPut().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/lazy-loading/config`;
        const response = await this.request({
            path: urlPath,
            method: "PUT",
            headers: headerParameters,
            query: queryParameters,
            body: ConfigUpdateRequestToJSON(requestParameters["configUpdateRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Update the lazy loading configuration.
     * Update Config Endpoint
     */
    async updateConfigEndpointApiLazyLoadingConfigPut(requestParameters, initOverrides) {
        const response = await this.updateConfigEndpointApiLazyLoadingConfigPutRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
