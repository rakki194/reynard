/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { BatchSummarizationRequestToJSON, ContentTypeDetectionRequestToJSON, ContentTypeDetectionResponseFromJSON, HealthCheckResponseFromJSON, SummarizationConfigRequestToJSON, SummarizationConfigResponseFromJSON, SummarizationRequestToJSON, SummarizationResponseFromJSON, SummarizationStatsResponseFromJSON, } from "../models/index";
/**
 *
 */
export class SummarizationApi extends runtime.BaseAPI {
    /**
     * Automatically detect the content type of text.  This endpoint analyzes text and determines the most appropriate content type for summarization.
     * Detect Content Type
     */
    async detectContentTypeApiSummarizationDetectContentTypePostRaw(requestParameters, initOverrides) {
        if (requestParameters["contentTypeDetectionRequest"] == null) {
            throw new runtime.RequiredError("contentTypeDetectionRequest", 'Required parameter "contentTypeDetectionRequest" was null or undefined when calling detectContentTypeApiSummarizationDetectContentTypePost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/summarization/detect-content-type`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: ContentTypeDetectionRequestToJSON(requestParameters["contentTypeDetectionRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ContentTypeDetectionResponseFromJSON(jsonValue));
    }
    /**
     * Automatically detect the content type of text.  This endpoint analyzes text and determines the most appropriate content type for summarization.
     * Detect Content Type
     */
    async detectContentTypeApiSummarizationDetectContentTypePost(requestParameters, initOverrides) {
        const response = await this.detectContentTypeApiSummarizationDetectContentTypePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get list of available models for summarization.  Returns the list of models that can be used for text summarization.
     * Get Available Models
     */
    async getAvailableModelsApiSummarizationModelsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/summarization/models`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get list of available models for summarization.  Returns the list of models that can be used for text summarization.
     * Get Available Models
     */
    async getAvailableModelsApiSummarizationModelsGet(initOverrides) {
        const response = await this.getAvailableModelsApiSummarizationModelsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get current summarization service configuration.  Returns the current configuration parameters for the summarization service.
     * Get Config
     */
    async getConfigApiSummarizationConfigGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/summarization/config`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => SummarizationConfigResponseFromJSON(jsonValue));
    }
    /**
     * Get current summarization service configuration.  Returns the current configuration parameters for the summarization service.
     * Get Config
     */
    async getConfigApiSummarizationConfigGet(initOverrides) {
        const response = await this.getConfigApiSummarizationConfigGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get performance statistics for the summarization service.  Returns detailed statistics about service usage, performance, and available capabilities.
     * Get Performance Stats
     */
    async getPerformanceStatsApiSummarizationStatsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/summarization/stats`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => SummarizationStatsResponseFromJSON(jsonValue));
    }
    /**
     * Get performance statistics for the summarization service.  Returns detailed statistics about service usage, performance, and available capabilities.
     * Get Performance Stats
     */
    async getPerformanceStatsApiSummarizationStatsGet(initOverrides) {
        const response = await this.getPerformanceStatsApiSummarizationStatsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get supported content types and their summarizers.  Returns information about which content types are supported and which summarizers handle each type.
     * Get Supported Content Types
     */
    async getSupportedContentTypesApiSummarizationContentTypesGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/summarization/content-types`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get supported content types and their summarizers.  Returns information about which content types are supported and which summarizers handle each type.
     * Get Supported Content Types
     */
    async getSupportedContentTypesApiSummarizationContentTypesGet(initOverrides) {
        const response = await this.getSupportedContentTypesApiSummarizationContentTypesGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Perform health check on the summarization service.  Returns the current health status and detailed information about service availability and configuration.
     * Health Check
     */
    async healthCheckApiSummarizationHealthGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/summarization/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => HealthCheckResponseFromJSON(jsonValue));
    }
    /**
     * Perform health check on the summarization service.  Returns the current health status and detailed information about service availability and configuration.
     * Health Check
     */
    async healthCheckApiSummarizationHealthGet(initOverrides) {
        const response = await this.healthCheckApiSummarizationHealthGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Process a batch of summarization requests.  This endpoint allows processing multiple summarization requests in a single call with optional streaming support.
     * Summarize Batch
     */
    async summarizeBatchApiSummarizationSummarizeBatchPostRaw(requestParameters, initOverrides) {
        if (requestParameters["batchSummarizationRequest"] == null) {
            throw new runtime.RequiredError("batchSummarizationRequest", 'Required parameter "batchSummarizationRequest" was null or undefined when calling summarizeBatchApiSummarizationSummarizeBatchPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/summarization/summarize/batch`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: BatchSummarizationRequestToJSON(requestParameters["batchSummarizationRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Process a batch of summarization requests.  This endpoint allows processing multiple summarization requests in a single call with optional streaming support.
     * Summarize Batch
     */
    async summarizeBatchApiSummarizationSummarizeBatchPost(requestParameters, initOverrides) {
        const response = await this.summarizeBatchApiSummarizationSummarizeBatchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Summarize text with specified options.  This endpoint provides text summarization with support for different content types, summary levels, and customization options.
     * Summarize Text
     */
    async summarizeTextApiSummarizationSummarizePostRaw(requestParameters, initOverrides) {
        if (requestParameters["summarizationRequest"] == null) {
            throw new runtime.RequiredError("summarizationRequest", 'Required parameter "summarizationRequest" was null or undefined when calling summarizeTextApiSummarizationSummarizePost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/summarization/summarize`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: SummarizationRequestToJSON(requestParameters["summarizationRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => SummarizationResponseFromJSON(jsonValue));
    }
    /**
     * Summarize text with specified options.  This endpoint provides text summarization with support for different content types, summary levels, and customization options.
     * Summarize Text
     */
    async summarizeTextApiSummarizationSummarizePost(requestParameters, initOverrides) {
        const response = await this.summarizeTextApiSummarizationSummarizePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Stream text summarization with progress updates.  This endpoint provides real-time streaming of summarization progress using Server-Sent Events (SSE).
     * Summarize Text Stream
     */
    async summarizeTextStreamApiSummarizationSummarizeStreamPostRaw(requestParameters, initOverrides) {
        if (requestParameters["summarizationRequest"] == null) {
            throw new runtime.RequiredError("summarizationRequest", 'Required parameter "summarizationRequest" was null or undefined when calling summarizeTextStreamApiSummarizationSummarizeStreamPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/summarization/summarize/stream`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: SummarizationRequestToJSON(requestParameters["summarizationRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Stream text summarization with progress updates.  This endpoint provides real-time streaming of summarization progress using Server-Sent Events (SSE).
     * Summarize Text Stream
     */
    async summarizeTextStreamApiSummarizationSummarizeStreamPost(requestParameters, initOverrides) {
        const response = await this.summarizeTextStreamApiSummarizationSummarizeStreamPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update summarization service configuration.  Allows updating various configuration parameters for the summarization service.
     * Update Config
     */
    async updateConfigApiSummarizationConfigPostRaw(requestParameters, initOverrides) {
        if (requestParameters["summarizationConfigRequest"] == null) {
            throw new runtime.RequiredError("summarizationConfigRequest", 'Required parameter "summarizationConfigRequest" was null or undefined when calling updateConfigApiSummarizationConfigPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/summarization/config`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: SummarizationConfigRequestToJSON(requestParameters["summarizationConfigRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => SummarizationConfigResponseFromJSON(jsonValue));
    }
    /**
     * Update summarization service configuration.  Allows updating various configuration parameters for the summarization service.
     * Update Config
     */
    async updateConfigApiSummarizationConfigPost(requestParameters, initOverrides) {
        const response = await this.updateConfigApiSummarizationConfigPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
