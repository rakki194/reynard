/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { SecureChatRequestToJSON, } from '../models/index';
/**
 *
 */
export class SecureOllamaApi extends runtime.BaseAPI {
    /**
     * Secure chat endpoint with input validation and authentication.
     * Secure Chat
     */
    async secureChatApiSecureOllamaChatPostRaw(requestParameters, initOverrides) {
        if (requestParameters['secureChatRequest'] == null) {
            throw new runtime.RequiredError('secureChatRequest', 'Required parameter "secureChatRequest" was null or undefined when calling secureChatApiSecureOllamaChatPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        let urlPath = `/api/secure/ollama/chat`;
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecureChatRequestToJSON(requestParameters['secureChatRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Secure chat endpoint with input validation and authentication.
     * Secure Chat
     */
    async secureChatApiSecureOllamaChatPost(requestParameters, initOverrides) {
        const response = await this.secureChatApiSecureOllamaChatPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Secure config endpoint with authentication.
     * Secure Get Config
     */
    async secureGetConfigApiSecureOllamaConfigGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        let urlPath = `/api/secure/ollama/config`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Secure config endpoint with authentication.
     * Secure Get Config
     */
    async secureGetConfigApiSecureOllamaConfigGet(initOverrides) {
        const response = await this.secureGetConfigApiSecureOllamaConfigGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Secure models endpoint with authentication.
     * Secure Get Models
     */
    async secureGetModelsApiSecureOllamaModelsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        let urlPath = `/api/secure/ollama/models`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * Secure models endpoint with authentication.
     * Secure Get Models
     */
    async secureGetModelsApiSecureOllamaModelsGet(initOverrides) {
        const response = await this.secureGetModelsApiSecureOllamaModelsGetRaw(initOverrides);
        return await response.value();
    }
}
