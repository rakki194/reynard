/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import type { RAGConfigRequest, RAGConfigResponse, RAGIndexingStatusResponse, RAGIngestRequest, RAGIngestResponse, RAGQueryRequest, RAGQueryResponse, RAGStatsResponse } from "../models/index";
export interface IngestDocumentsApiRagApiRagIngestPostRequest {
    rAGIngestRequest: RAGIngestRequest;
}
export interface IngestDocumentsApiRagApiRagIngestPost0Request {
    rAGIngestRequest: RAGIngestRequest;
}
export interface IngestDocumentsStreamApiRagApiRagIngestStreamPostRequest {
    rAGIngestRequest: RAGIngestRequest;
}
export interface IngestDocumentsStreamApiRagApiRagIngestStreamPost0Request {
    rAGIngestRequest: RAGIngestRequest;
}
export interface QueryRagApiRagApiRagQueryPostRequest {
    rAGQueryRequest: RAGQueryRequest;
}
export interface QueryRagApiRagApiRagQueryPost0Request {
    rAGQueryRequest: RAGQueryRequest;
}
export interface UpdateRagConfigApiRagApiRagConfigPostRequest {
    rAGConfigRequest: RAGConfigRequest;
}
export interface UpdateRagConfigApiRagApiRagConfigPost0Request {
    rAGConfigRequest: RAGConfigRequest;
}
/**
 * RagApi - interface
 *
 * @export
 * @interface RagApiInterface
 */
export interface RagApiInterface {
    /**
     * Clear the RAG system cache.
     * @summary Clear Cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    clearCacheApiRagApiRagAdminClearCachePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Clear the RAG system cache.
     * Clear Cache
     */
    clearCacheApiRagApiRagAdminClearCachePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Clear the RAG system cache.
     * @summary Clear Cache
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    clearCacheApiRagApiRagAdminClearCachePost_1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Clear the RAG system cache.
     * Clear Cache
     */
    clearCacheApiRagApiRagAdminClearCachePost_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Get current indexing status.
     * @summary Get Indexing Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    getIndexingStatusApiRagApiRagAdminIndexingStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;
    /**
     * Get current indexing status.
     * Get Indexing Status
     */
    getIndexingStatusApiRagApiRagAdminIndexingStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGIndexingStatusResponse>;
    /**
     * Get current indexing status.
     * @summary Get Indexing Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;
    /**
     * Get current indexing status.
     * Get Indexing Status
     */
    getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGIndexingStatusResponse>;
    /**
     * Get current RAG configuration.
     * @summary Get Rag Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    getRagConfigApiRagApiRagConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGConfigResponse>>;
    /**
     * Get current RAG configuration.
     * Get Rag Config
     */
    getRagConfigApiRagApiRagConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
    /**
     * Get current RAG configuration.
     * @summary Get Rag Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    getRagConfigApiRagApiRagConfigGet_3Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGConfigResponse>>;
    /**
     * Get current RAG configuration.
     * Get Rag Config
     */
    getRagConfigApiRagApiRagConfigGet_3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
    /**
     * Get RAG system statistics.
     * @summary Get Rag Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    getRagStatsApiRagApiRagAdminStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGStatsResponse>>;
    /**
     * Get RAG system statistics.
     * Get Rag Stats
     */
    getRagStatsApiRagApiRagAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGStatsResponse>;
    /**
     * Get RAG system statistics.
     * @summary Get Rag Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    getRagStatsApiRagApiRagAdminStatsGet_4Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGStatsResponse>>;
    /**
     * Get RAG system statistics.
     * Get Rag Stats
     */
    getRagStatsApiRagApiRagAdminStatsGet_4(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGStatsResponse>;
    /**
     * Ingest documents into the RAG system.
     * @summary Ingest Documents
     * @param {RAGIngestRequest} rAGIngestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    ingestDocumentsApiRagApiRagIngestPostRaw(requestParameters: IngestDocumentsApiRagApiRagIngestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGIngestResponse>>;
    /**
     * Ingest documents into the RAG system.
     * Ingest Documents
     */
    ingestDocumentsApiRagApiRagIngestPost(requestParameters: IngestDocumentsApiRagApiRagIngestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGIngestResponse>;
    /**
     * Ingest documents into the RAG system.
     * @summary Ingest Documents
     * @param {RAGIngestRequest} rAGIngestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    ingestDocumentsApiRagApiRagIngestPost_5Raw(requestParameters: IngestDocumentsApiRagApiRagIngestPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGIngestResponse>>;
    /**
     * Ingest documents into the RAG system.
     * Ingest Documents
     */
    ingestDocumentsApiRagApiRagIngestPost_5(requestParameters: IngestDocumentsApiRagApiRagIngestPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGIngestResponse>;
    /**
     * Stream document ingestion progress.
     * @summary Ingest Documents Stream
     * @param {RAGIngestRequest} rAGIngestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    ingestDocumentsStreamApiRagApiRagIngestStreamPostRaw(requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Stream document ingestion progress.
     * Ingest Documents Stream
     */
    ingestDocumentsStreamApiRagApiRagIngestStreamPost(requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Stream document ingestion progress.
     * @summary Ingest Documents Stream
     * @param {RAGIngestRequest} rAGIngestRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    ingestDocumentsStreamApiRagApiRagIngestStreamPost_6Raw(requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Stream document ingestion progress.
     * Ingest Documents Stream
     */
    ingestDocumentsStreamApiRagApiRagIngestStreamPost_6(requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Perform semantic search using RAG system.
     * @summary Query Rag
     * @param {RAGQueryRequest} rAGQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    queryRagApiRagApiRagQueryPostRaw(requestParameters: QueryRagApiRagApiRagQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGQueryResponse>>;
    /**
     * Perform semantic search using RAG system.
     * Query Rag
     */
    queryRagApiRagApiRagQueryPost(requestParameters: QueryRagApiRagApiRagQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGQueryResponse>;
    /**
     * Perform semantic search using RAG system.
     * @summary Query Rag
     * @param {RAGQueryRequest} rAGQueryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    queryRagApiRagApiRagQueryPost_7Raw(requestParameters: QueryRagApiRagApiRagQueryPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGQueryResponse>>;
    /**
     * Perform semantic search using RAG system.
     * Query Rag
     */
    queryRagApiRagApiRagQueryPost_7(requestParameters: QueryRagApiRagApiRagQueryPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGQueryResponse>;
    /**
     * Rebuild the vector index.
     * @summary Rebuild Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    rebuildIndexApiRagApiRagAdminRebuildIndexPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Rebuild the vector index.
     * Rebuild Index
     */
    rebuildIndexApiRagApiRagAdminRebuildIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Rebuild the vector index.
     * @summary Rebuild Index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    rebuildIndexApiRagApiRagAdminRebuildIndexPost_8Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Rebuild the vector index.
     * Rebuild Index
     */
    rebuildIndexApiRagApiRagAdminRebuildIndexPost_8(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Update RAG configuration.
     * @summary Update Rag Config
     * @param {RAGConfigRequest} rAGConfigRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    updateRagConfigApiRagApiRagConfigPostRaw(requestParameters: UpdateRagConfigApiRagApiRagConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGConfigResponse>>;
    /**
     * Update RAG configuration.
     * Update Rag Config
     */
    updateRagConfigApiRagApiRagConfigPost(requestParameters: UpdateRagConfigApiRagApiRagConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
    /**
     * Update RAG configuration.
     * @summary Update Rag Config
     * @param {RAGConfigRequest} rAGConfigRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RagApiInterface
     */
    updateRagConfigApiRagApiRagConfigPost_9Raw(requestParameters: UpdateRagConfigApiRagApiRagConfigPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGConfigResponse>>;
    /**
     * Update RAG configuration.
     * Update Rag Config
     */
    updateRagConfigApiRagApiRagConfigPost_9(requestParameters: UpdateRagConfigApiRagApiRagConfigPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
}
/**
 *
 */
export declare class RagApi extends runtime.BaseAPI implements RagApiInterface {
    /**
     * Clear the RAG system cache.
     * Clear Cache
     */
    clearCacheApiRagApiRagAdminClearCachePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Clear the RAG system cache.
     * Clear Cache
     */
    clearCacheApiRagApiRagAdminClearCachePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Clear the RAG system cache.
     * Clear Cache
     */
    clearCacheApiRagApiRagAdminClearCachePost_1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Clear the RAG system cache.
     * Clear Cache
     */
    clearCacheApiRagApiRagAdminClearCachePost_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Get current indexing status.
     * Get Indexing Status
     */
    getIndexingStatusApiRagApiRagAdminIndexingStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;
    /**
     * Get current indexing status.
     * Get Indexing Status
     */
    getIndexingStatusApiRagApiRagAdminIndexingStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGIndexingStatusResponse>;
    /**
     * Get current indexing status.
     * Get Indexing Status
     */
    getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;
    /**
     * Get current indexing status.
     * Get Indexing Status
     */
    getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGIndexingStatusResponse>;
    /**
     * Get current RAG configuration.
     * Get Rag Config
     */
    getRagConfigApiRagApiRagConfigGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGConfigResponse>>;
    /**
     * Get current RAG configuration.
     * Get Rag Config
     */
    getRagConfigApiRagApiRagConfigGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
    /**
     * Get current RAG configuration.
     * Get Rag Config
     */
    getRagConfigApiRagApiRagConfigGet_3Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGConfigResponse>>;
    /**
     * Get current RAG configuration.
     * Get Rag Config
     */
    getRagConfigApiRagApiRagConfigGet_3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
    /**
     * Get RAG system statistics.
     * Get Rag Stats
     */
    getRagStatsApiRagApiRagAdminStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGStatsResponse>>;
    /**
     * Get RAG system statistics.
     * Get Rag Stats
     */
    getRagStatsApiRagApiRagAdminStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGStatsResponse>;
    /**
     * Get RAG system statistics.
     * Get Rag Stats
     */
    getRagStatsApiRagApiRagAdminStatsGet_4Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGStatsResponse>>;
    /**
     * Get RAG system statistics.
     * Get Rag Stats
     */
    getRagStatsApiRagApiRagAdminStatsGet_4(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGStatsResponse>;
    /**
     * Ingest documents into the RAG system.
     * Ingest Documents
     */
    ingestDocumentsApiRagApiRagIngestPostRaw(requestParameters: IngestDocumentsApiRagApiRagIngestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGIngestResponse>>;
    /**
     * Ingest documents into the RAG system.
     * Ingest Documents
     */
    ingestDocumentsApiRagApiRagIngestPost(requestParameters: IngestDocumentsApiRagApiRagIngestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGIngestResponse>;
    /**
     * Ingest documents into the RAG system.
     * Ingest Documents
     */
    ingestDocumentsApiRagApiRagIngestPost_5Raw(requestParameters: IngestDocumentsApiRagApiRagIngestPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGIngestResponse>>;
    /**
     * Ingest documents into the RAG system.
     * Ingest Documents
     */
    ingestDocumentsApiRagApiRagIngestPost_5(requestParameters: IngestDocumentsApiRagApiRagIngestPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGIngestResponse>;
    /**
     * Stream document ingestion progress.
     * Ingest Documents Stream
     */
    ingestDocumentsStreamApiRagApiRagIngestStreamPostRaw(requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Stream document ingestion progress.
     * Ingest Documents Stream
     */
    ingestDocumentsStreamApiRagApiRagIngestStreamPost(requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Stream document ingestion progress.
     * Ingest Documents Stream
     */
    ingestDocumentsStreamApiRagApiRagIngestStreamPost_6Raw(requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Stream document ingestion progress.
     * Ingest Documents Stream
     */
    ingestDocumentsStreamApiRagApiRagIngestStreamPost_6(requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Perform semantic search using RAG system.
     * Query Rag
     */
    queryRagApiRagApiRagQueryPostRaw(requestParameters: QueryRagApiRagApiRagQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGQueryResponse>>;
    /**
     * Perform semantic search using RAG system.
     * Query Rag
     */
    queryRagApiRagApiRagQueryPost(requestParameters: QueryRagApiRagApiRagQueryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGQueryResponse>;
    /**
     * Perform semantic search using RAG system.
     * Query Rag
     */
    queryRagApiRagApiRagQueryPost_7Raw(requestParameters: QueryRagApiRagApiRagQueryPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGQueryResponse>>;
    /**
     * Perform semantic search using RAG system.
     * Query Rag
     */
    queryRagApiRagApiRagQueryPost_7(requestParameters: QueryRagApiRagApiRagQueryPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGQueryResponse>;
    /**
     * Rebuild the vector index.
     * Rebuild Index
     */
    rebuildIndexApiRagApiRagAdminRebuildIndexPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Rebuild the vector index.
     * Rebuild Index
     */
    rebuildIndexApiRagApiRagAdminRebuildIndexPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Rebuild the vector index.
     * Rebuild Index
     */
    rebuildIndexApiRagApiRagAdminRebuildIndexPost_8Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Rebuild the vector index.
     * Rebuild Index
     */
    rebuildIndexApiRagApiRagAdminRebuildIndexPost_8(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Update RAG configuration.
     * Update Rag Config
     */
    updateRagConfigApiRagApiRagConfigPostRaw(requestParameters: UpdateRagConfigApiRagApiRagConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGConfigResponse>>;
    /**
     * Update RAG configuration.
     * Update Rag Config
     */
    updateRagConfigApiRagApiRagConfigPost(requestParameters: UpdateRagConfigApiRagApiRagConfigPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
    /**
     * Update RAG configuration.
     * Update Rag Config
     */
    updateRagConfigApiRagApiRagConfigPost_9Raw(requestParameters: UpdateRagConfigApiRagApiRagConfigPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RAGConfigResponse>>;
    /**
     * Update RAG configuration.
     * Update Rag Config
     */
    updateRagConfigApiRagApiRagConfigPost_9(requestParameters: UpdateRagConfigApiRagApiRagConfigPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RAGConfigResponse>;
}
