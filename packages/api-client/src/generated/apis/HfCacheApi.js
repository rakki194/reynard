/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { HFCacheInfoResponseFromJSON, ModelCacheInfoResponseFromJSON, } from "../models/index";
/**
 *
 */
export class HfCacheApi extends runtime.BaseAPI {
    /**
     * Check if a model is cached.
     * Check Model Cached
     */
    async checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGetRaw(requestParameters, initOverrides) {
        if (requestParameters["repoId"] == null) {
            throw new runtime.RequiredError("repoId", 'Required parameter "repoId" was null or undefined when calling checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/model/{repo_id}/cached`;
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters["repoId"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Check if a model is cached.
     * Check Model Cached
     */
    async checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet(requestParameters, initOverrides) {
        const response = await this.checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Check if a model is cached.
     * Check Model Cached
     */
    async checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet_1Raw(requestParameters, initOverrides) {
        if (requestParameters["repoId"] == null) {
            throw new runtime.RequiredError("repoId", 'Required parameter "repoId" was null or undefined when calling checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet_1().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/model/{repo_id}/cached`;
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters["repoId"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Check if a model is cached.
     * Check Model Cached
     */
    async checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet_1(requestParameters, initOverrides) {
        const response = await this.checkModelCachedApiHfCacheApiHfCacheModelRepoIdCachedGet_1Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Clear the HuggingFace cache.
     * Clear Cache Endpoint
     */
    async clearCacheEndpointApiHfCacheApiHfCacheClearDeleteRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/clear`;
        const response = await this.request({
            path: urlPath,
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Clear the HuggingFace cache.
     * Clear Cache Endpoint
     */
    async clearCacheEndpointApiHfCacheApiHfCacheClearDelete(initOverrides) {
        const response = await this.clearCacheEndpointApiHfCacheApiHfCacheClearDeleteRaw(initOverrides);
        return await response.value();
    }
    /**
     * Clear the HuggingFace cache.
     * Clear Cache Endpoint
     */
    async clearCacheEndpointApiHfCacheApiHfCacheClearDelete_2Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/clear`;
        const response = await this.request({
            path: urlPath,
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Clear the HuggingFace cache.
     * Clear Cache Endpoint
     */
    async clearCacheEndpointApiHfCacheApiHfCacheClearDelete_2(initOverrides) {
        const response = await this.clearCacheEndpointApiHfCacheApiHfCacheClearDelete_2Raw(initOverrides);
        return await response.value();
    }
    /**
     * Ensure the HuggingFace cache directory exists.
     * Ensure Cache Directory
     */
    async ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/ensure-cache-dir`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Ensure the HuggingFace cache directory exists.
     * Ensure Cache Directory
     */
    async ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost(initOverrides) {
        const response = await this.ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Ensure the HuggingFace cache directory exists.
     * Ensure Cache Directory
     */
    async ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost_3Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/ensure-cache-dir`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Ensure the HuggingFace cache directory exists.
     * Ensure Cache Directory
     */
    async ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost_3(initOverrides) {
        const response = await this.ensureCacheDirectoryApiHfCacheApiHfCacheEnsureCacheDirPost_3Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get the HuggingFace cache directory path.
     * Get Cache Directory
     */
    async getCacheDirectoryApiHfCacheApiHfCacheCacheDirGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/cache-dir`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get the HuggingFace cache directory path.
     * Get Cache Directory
     */
    async getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet(initOverrides) {
        const response = await this.getCacheDirectoryApiHfCacheApiHfCacheCacheDirGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get the HuggingFace cache directory path.
     * Get Cache Directory
     */
    async getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet_4Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/cache-dir`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get the HuggingFace cache directory path.
     * Get Cache Directory
     */
    async getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet_4(initOverrides) {
        const response = await this.getCacheDirectoryApiHfCacheApiHfCacheCacheDirGet_4Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get HuggingFace cache information.
     * Get Cache Info
     */
    async getCacheInfoApiHfCacheApiHfCacheInfoGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/info`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => HFCacheInfoResponseFromJSON(jsonValue));
    }
    /**
     * Get HuggingFace cache information.
     * Get Cache Info
     */
    async getCacheInfoApiHfCacheApiHfCacheInfoGet(initOverrides) {
        const response = await this.getCacheInfoApiHfCacheApiHfCacheInfoGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get HuggingFace cache information.
     * Get Cache Info
     */
    async getCacheInfoApiHfCacheApiHfCacheInfoGet_5Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/info`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => HFCacheInfoResponseFromJSON(jsonValue));
    }
    /**
     * Get HuggingFace cache information.
     * Get Cache Info
     */
    async getCacheInfoApiHfCacheApiHfCacheInfoGet_5(initOverrides) {
        const response = await this.getCacheInfoApiHfCacheApiHfCacheInfoGet_5Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get the total size of the HuggingFace cache.
     * Get Cache Size Endpoint
     */
    async getCacheSizeEndpointApiHfCacheApiHfCacheSizeGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/size`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get the total size of the HuggingFace cache.
     * Get Cache Size Endpoint
     */
    async getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet(initOverrides) {
        const response = await this.getCacheSizeEndpointApiHfCacheApiHfCacheSizeGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get the total size of the HuggingFace cache.
     * Get Cache Size Endpoint
     */
    async getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet_6Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/size`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get the total size of the HuggingFace cache.
     * Get Cache Size Endpoint
     */
    async getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet_6(initOverrides) {
        const response = await this.getCacheSizeEndpointApiHfCacheApiHfCacheSizeGet_6Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get the HuggingFace Hub directory path.
     * Get Hub Directory
     */
    async getHubDirectoryApiHfCacheApiHfCacheHubDirGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/hub-dir`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get the HuggingFace Hub directory path.
     * Get Hub Directory
     */
    async getHubDirectoryApiHfCacheApiHfCacheHubDirGet(initOverrides) {
        const response = await this.getHubDirectoryApiHfCacheApiHfCacheHubDirGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get the HuggingFace Hub directory path.
     * Get Hub Directory
     */
    async getHubDirectoryApiHfCacheApiHfCacheHubDirGet_7Raw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/hub-dir`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get the HuggingFace Hub directory path.
     * Get Hub Directory
     */
    async getHubDirectoryApiHfCacheApiHfCacheHubDirGet_7(initOverrides) {
        const response = await this.getHubDirectoryApiHfCacheApiHfCacheHubDirGet_7Raw(initOverrides);
        return await response.value();
    }
    /**
     * Get cache information for a specific model.
     * Get Model Cache Info
     */
    async getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGetRaw(requestParameters, initOverrides) {
        if (requestParameters["repoId"] == null) {
            throw new runtime.RequiredError("repoId", 'Required parameter "repoId" was null or undefined when calling getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet().');
        }
        const queryParameters = {};
        if (requestParameters["revision"] != null) {
            queryParameters["revision"] = requestParameters["revision"];
        }
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/model/{repo_id}`;
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters["repoId"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ModelCacheInfoResponseFromJSON(jsonValue));
    }
    /**
     * Get cache information for a specific model.
     * Get Model Cache Info
     */
    async getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet(requestParameters, initOverrides) {
        const response = await this.getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get cache information for a specific model.
     * Get Model Cache Info
     */
    async getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet_8Raw(requestParameters, initOverrides) {
        if (requestParameters["repoId"] == null) {
            throw new runtime.RequiredError("repoId", 'Required parameter "repoId" was null or undefined when calling getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet_8().');
        }
        const queryParameters = {};
        if (requestParameters["revision"] != null) {
            queryParameters["revision"] = requestParameters["revision"];
        }
        const headerParameters = {};
        let urlPath = `/api/hf-cache/api/hf-cache/model/{repo_id}`;
        urlPath = urlPath.replace(`{${"repo_id"}}`, encodeURIComponent(String(requestParameters["repoId"])));
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => ModelCacheInfoResponseFromJSON(jsonValue));
    }
    /**
     * Get cache information for a specific model.
     * Get Model Cache Info
     */
    async getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet_8(requestParameters, initOverrides) {
        const response = await this.getModelCacheInfoApiHfCacheApiHfCacheModelRepoIdGet_8Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
