/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  HTTPValidationError,
  RAGConfigRequest,
  RAGConfigResponse,
  RAGIndexingStatusResponse,
  RAGIngestRequest,
  RAGIngestResponse,
  RAGQueryRequest,
  RAGQueryResponse,
  RAGStatsResponse,
} from "../models/index";
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  RAGConfigRequestFromJSON,
  RAGConfigRequestToJSON,
  RAGConfigResponseFromJSON,
  RAGConfigResponseToJSON,
  RAGIndexingStatusResponseFromJSON,
  RAGIndexingStatusResponseToJSON,
  RAGIngestRequestFromJSON,
  RAGIngestRequestToJSON,
  RAGIngestResponseFromJSON,
  RAGIngestResponseToJSON,
  RAGQueryRequestFromJSON,
  RAGQueryRequestToJSON,
  RAGQueryResponseFromJSON,
  RAGQueryResponseToJSON,
  RAGStatsResponseFromJSON,
  RAGStatsResponseToJSON,
} from "../models/index";

export interface IngestDocumentsApiRagApiRagIngestPostRequest {
  rAGIngestRequest: RAGIngestRequest;
}

export interface IngestDocumentsApiRagApiRagIngestPost0Request {
  rAGIngestRequest: RAGIngestRequest;
}

export interface IngestDocumentsStreamApiRagApiRagIngestStreamPostRequest {
  rAGIngestRequest: RAGIngestRequest;
}

export interface IngestDocumentsStreamApiRagApiRagIngestStreamPost0Request {
  rAGIngestRequest: RAGIngestRequest;
}

export interface QueryRagApiRagApiRagQueryPostRequest {
  rAGQueryRequest: RAGQueryRequest;
}

export interface QueryRagApiRagApiRagQueryPost0Request {
  rAGQueryRequest: RAGQueryRequest;
}

export interface UpdateRagConfigApiRagApiRagConfigPostRequest {
  rAGConfigRequest: RAGConfigRequest;
}

export interface UpdateRagConfigApiRagApiRagConfigPost0Request {
  rAGConfigRequest: RAGConfigRequest;
}

/**
 * RagApi - interface
 *
 * @export
 * @interface RagApiInterface
 */
export interface RagApiInterface {
  /**
   * Clear the RAG system cache.
   * @summary Clear Cache
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  clearCacheApiRagApiRagAdminClearCachePostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  clearCacheApiRagApiRagAdminClearCachePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

  /**
   * Clear the RAG system cache.
   * @summary Clear Cache
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  clearCacheApiRagApiRagAdminClearCachePost_1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  clearCacheApiRagApiRagAdminClearCachePost_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

  /**
   * Get current indexing status.
   * @summary Get Indexing Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getIndexingStatusApiRagApiRagAdminIndexingStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  getIndexingStatusApiRagApiRagAdminIndexingStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse>;

  /**
   * Get current indexing status.
   * @summary Get Indexing Status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>>;

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse>;

  /**
   * Get current RAG configuration.
   * @summary Get Rag Config
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagConfigApiRagApiRagConfigGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  getRagConfigApiRagApiRagConfigGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse>;

  /**
   * Get current RAG configuration.
   * @summary Get Rag Config
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagConfigApiRagApiRagConfigGet_3Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  getRagConfigApiRagApiRagConfigGet_3(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse>;

  /**
   * Get RAG system statistics.
   * @summary Get Rag Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagStatsApiRagApiRagAdminStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>>;

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  getRagStatsApiRagApiRagAdminStatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGStatsResponse>;

  /**
   * Get RAG system statistics.
   * @summary Get Rag Stats
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  getRagStatsApiRagApiRagAdminStatsGet_4Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>>;

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  getRagStatsApiRagApiRagAdminStatsGet_4(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGStatsResponse>;

  /**
   * Ingest documents into the RAG system.
   * @summary Ingest Documents
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsApiRagApiRagIngestPostRaw(
    requestParameters: IngestDocumentsApiRagApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>>;

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  ingestDocumentsApiRagApiRagIngestPost(
    requestParameters: IngestDocumentsApiRagApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse>;

  /**
   * Ingest documents into the RAG system.
   * @summary Ingest Documents
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsApiRagApiRagIngestPost_5Raw(
    requestParameters: IngestDocumentsApiRagApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>>;

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  ingestDocumentsApiRagApiRagIngestPost_5(
    requestParameters: IngestDocumentsApiRagApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse>;

  /**
   * Stream document ingestion progress.
   * @summary Ingest Documents Stream
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsStreamApiRagApiRagIngestStreamPostRaw(
    requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  ingestDocumentsStreamApiRagApiRagIngestStreamPost(
    requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Stream document ingestion progress.
   * @summary Ingest Documents Stream
   * @param {RAGIngestRequest} rAGIngestRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  ingestDocumentsStreamApiRagApiRagIngestStreamPost_6Raw(
    requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  ingestDocumentsStreamApiRagApiRagIngestStreamPost_6(
    requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Perform semantic search using RAG system.
   * @summary Query Rag
   * @param {RAGQueryRequest} rAGQueryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  queryRagApiRagApiRagQueryPostRaw(
    requestParameters: QueryRagApiRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>>;

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  queryRagApiRagApiRagQueryPost(
    requestParameters: QueryRagApiRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse>;

  /**
   * Perform semantic search using RAG system.
   * @summary Query Rag
   * @param {RAGQueryRequest} rAGQueryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  queryRagApiRagApiRagQueryPost_7Raw(
    requestParameters: QueryRagApiRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>>;

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  queryRagApiRagApiRagQueryPost_7(
    requestParameters: QueryRagApiRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse>;

  /**
   * Rebuild the vector index.
   * @summary Rebuild Index
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  rebuildIndexApiRagApiRagAdminRebuildIndexPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  rebuildIndexApiRagApiRagAdminRebuildIndexPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Rebuild the vector index.
   * @summary Rebuild Index
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  rebuildIndexApiRagApiRagAdminRebuildIndexPost_8Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  rebuildIndexApiRagApiRagAdminRebuildIndexPost_8(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Update RAG configuration.
   * @summary Update Rag Config
   * @param {RAGConfigRequest} rAGConfigRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  updateRagConfigApiRagApiRagConfigPostRaw(
    requestParameters: UpdateRagConfigApiRagApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  updateRagConfigApiRagApiRagConfigPost(
    requestParameters: UpdateRagConfigApiRagApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse>;

  /**
   * Update RAG configuration.
   * @summary Update Rag Config
   * @param {RAGConfigRequest} rAGConfigRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RagApiInterface
   */
  updateRagConfigApiRagApiRagConfigPost_9Raw(
    requestParameters: UpdateRagConfigApiRagApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>>;

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  updateRagConfigApiRagApiRagConfigPost_9(
    requestParameters: UpdateRagConfigApiRagApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse>;
}

/**
 *
 */
export class RagApi extends runtime.BaseAPI implements RagApiInterface {
  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  async clearCacheApiRagApiRagAdminClearCachePostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/api/rag/admin/clear-cache`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  async clearCacheApiRagApiRagAdminClearCachePost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.clearCacheApiRagApiRagAdminClearCachePostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  async clearCacheApiRagApiRagAdminClearCachePost_1Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/api/rag/admin/clear-cache`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Clear the RAG system cache.
   * Clear Cache
   */
  async clearCacheApiRagApiRagAdminClearCachePost_1(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.clearCacheApiRagApiRagAdminClearCachePost_1Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  async getIndexingStatusApiRagApiRagAdminIndexingStatusGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/api/rag/admin/indexing-status`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGIndexingStatusResponseFromJSON(jsonValue));
  }

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  async getIndexingStatusApiRagApiRagAdminIndexingStatusGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse> {
    const response = await this.getIndexingStatusApiRagApiRagAdminIndexingStatusGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  async getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIndexingStatusResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/api/rag/admin/indexing-status`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGIndexingStatusResponseFromJSON(jsonValue));
  }

  /**
   * Get current indexing status.
   * Get Indexing Status
   */
  async getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIndexingStatusResponse> {
    const response = await this.getIndexingStatusApiRagApiRagAdminIndexingStatusGet_2Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  async getRagConfigApiRagApiRagConfigGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/api/rag/config`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
  }

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  async getRagConfigApiRagApiRagConfigGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse> {
    const response = await this.getRagConfigApiRagApiRagConfigGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  async getRagConfigApiRagApiRagConfigGet_3Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/api/rag/config`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
  }

  /**
   * Get current RAG configuration.
   * Get Rag Config
   */
  async getRagConfigApiRagApiRagConfigGet_3(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse> {
    const response = await this.getRagConfigApiRagApiRagConfigGet_3Raw(initOverrides);
    return await response.value();
  }

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  async getRagStatsApiRagApiRagAdminStatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/api/rag/admin/stats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGStatsResponseFromJSON(jsonValue));
  }

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  async getRagStatsApiRagApiRagAdminStatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGStatsResponse> {
    const response = await this.getRagStatsApiRagApiRagAdminStatsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  async getRagStatsApiRagApiRagAdminStatsGet_4Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGStatsResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/api/rag/admin/stats`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGStatsResponseFromJSON(jsonValue));
  }

  /**
   * Get RAG system statistics.
   * Get Rag Stats
   */
  async getRagStatsApiRagApiRagAdminStatsGet_4(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGStatsResponse> {
    const response = await this.getRagStatsApiRagApiRagAdminStatsGet_4Raw(initOverrides);
    return await response.value();
  }

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  async ingestDocumentsApiRagApiRagIngestPostRaw(
    requestParameters: IngestDocumentsApiRagApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>> {
    if (requestParameters["rAGIngestRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGIngestRequest",
        'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsApiRagApiRagIngestPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/rag/api/rag/ingest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGIngestResponseFromJSON(jsonValue));
  }

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  async ingestDocumentsApiRagApiRagIngestPost(
    requestParameters: IngestDocumentsApiRagApiRagIngestPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse> {
    const response = await this.ingestDocumentsApiRagApiRagIngestPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  async ingestDocumentsApiRagApiRagIngestPost_5Raw(
    requestParameters: IngestDocumentsApiRagApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGIngestResponse>> {
    if (requestParameters["rAGIngestRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGIngestRequest",
        'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsApiRagApiRagIngestPost_5().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/rag/api/rag/ingest`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGIngestResponseFromJSON(jsonValue));
  }

  /**
   * Ingest documents into the RAG system.
   * Ingest Documents
   */
  async ingestDocumentsApiRagApiRagIngestPost_5(
    requestParameters: IngestDocumentsApiRagApiRagIngestPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGIngestResponse> {
    const response = await this.ingestDocumentsApiRagApiRagIngestPost_5Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  async ingestDocumentsStreamApiRagApiRagIngestStreamPostRaw(
    requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["rAGIngestRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGIngestRequest",
        'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsStreamApiRagApiRagIngestStreamPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/rag/api/rag/ingest/stream`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  async ingestDocumentsStreamApiRagApiRagIngestStreamPost(
    requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.ingestDocumentsStreamApiRagApiRagIngestStreamPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  async ingestDocumentsStreamApiRagApiRagIngestStreamPost_6Raw(
    requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["rAGIngestRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGIngestRequest",
        'Required parameter "rAGIngestRequest" was null or undefined when calling ingestDocumentsStreamApiRagApiRagIngestStreamPost_6().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/rag/api/rag/ingest/stream`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGIngestRequestToJSON(requestParameters["rAGIngestRequest"]),
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Stream document ingestion progress.
   * Ingest Documents Stream
   */
  async ingestDocumentsStreamApiRagApiRagIngestStreamPost_6(
    requestParameters: IngestDocumentsStreamApiRagApiRagIngestStreamPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.ingestDocumentsStreamApiRagApiRagIngestStreamPost_6Raw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  async queryRagApiRagApiRagQueryPostRaw(
    requestParameters: QueryRagApiRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>> {
    if (requestParameters["rAGQueryRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGQueryRequest",
        'Required parameter "rAGQueryRequest" was null or undefined when calling queryRagApiRagApiRagQueryPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/rag/api/rag/query`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGQueryRequestToJSON(requestParameters["rAGQueryRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGQueryResponseFromJSON(jsonValue));
  }

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  async queryRagApiRagApiRagQueryPost(
    requestParameters: QueryRagApiRagApiRagQueryPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse> {
    const response = await this.queryRagApiRagApiRagQueryPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  async queryRagApiRagApiRagQueryPost_7Raw(
    requestParameters: QueryRagApiRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGQueryResponse>> {
    if (requestParameters["rAGQueryRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGQueryRequest",
        'Required parameter "rAGQueryRequest" was null or undefined when calling queryRagApiRagApiRagQueryPost_7().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/rag/api/rag/query`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGQueryRequestToJSON(requestParameters["rAGQueryRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGQueryResponseFromJSON(jsonValue));
  }

  /**
   * Perform semantic search using RAG system.
   * Query Rag
   */
  async queryRagApiRagApiRagQueryPost_7(
    requestParameters: QueryRagApiRagApiRagQueryPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGQueryResponse> {
    const response = await this.queryRagApiRagApiRagQueryPost_7Raw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  async rebuildIndexApiRagApiRagAdminRebuildIndexPostRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/api/rag/admin/rebuild-index`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  async rebuildIndexApiRagApiRagAdminRebuildIndexPost(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.rebuildIndexApiRagApiRagAdminRebuildIndexPostRaw(initOverrides);
    return await response.value();
  }

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  async rebuildIndexApiRagApiRagAdminRebuildIndexPost_8Raw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/api/rag/api/rag/admin/rebuild-index`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Rebuild the vector index.
   * Rebuild Index
   */
  async rebuildIndexApiRagApiRagAdminRebuildIndexPost_8(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.rebuildIndexApiRagApiRagAdminRebuildIndexPost_8Raw(initOverrides);
    return await response.value();
  }

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  async updateRagConfigApiRagApiRagConfigPostRaw(
    requestParameters: UpdateRagConfigApiRagApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>> {
    if (requestParameters["rAGConfigRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGConfigRequest",
        'Required parameter "rAGConfigRequest" was null or undefined when calling updateRagConfigApiRagApiRagConfigPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/rag/api/rag/config`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGConfigRequestToJSON(requestParameters["rAGConfigRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
  }

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  async updateRagConfigApiRagApiRagConfigPost(
    requestParameters: UpdateRagConfigApiRagApiRagConfigPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse> {
    const response = await this.updateRagConfigApiRagApiRagConfigPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  async updateRagConfigApiRagApiRagConfigPost_9Raw(
    requestParameters: UpdateRagConfigApiRagApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<RAGConfigResponse>> {
    if (requestParameters["rAGConfigRequest"] == null) {
      throw new runtime.RequiredError(
        "rAGConfigRequest",
        'Required parameter "rAGConfigRequest" was null or undefined when calling updateRagConfigApiRagApiRagConfigPost_9().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    let urlPath = `/api/rag/api/rag/config`;

    const response = await this.request(
      {
        path: urlPath,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: RAGConfigRequestToJSON(requestParameters["rAGConfigRequest"]),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue => RAGConfigResponseFromJSON(jsonValue));
  }

  /**
   * Update RAG configuration.
   * Update Rag Config
   */
  async updateRagConfigApiRagApiRagConfigPost_9(
    requestParameters: UpdateRagConfigApiRagApiRagConfigPost0Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<RAGConfigResponse> {
    const response = await this.updateRagConfigApiRagApiRagConfigPost_9Raw(requestParameters, initOverrides);
    return await response.value();
  }
}
