/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  SecureUserCreate,
  SecureUserLogin,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SecureUserCreateFromJSON,
    SecureUserCreateToJSON,
    SecureUserLoginFromJSON,
    SecureUserLoginToJSON,
} from '../models/index';

export interface SecureLoginApiSecureAuthLoginPostRequest {
    secureUserLogin: SecureUserLogin;
}

export interface SecureRegisterApiSecureAuthRegisterPostRequest {
    secureUserCreate: SecureUserCreate;
}

/**
 * SecureAuthenticationApi - interface
 * 
 * @export
 * @interface SecureAuthenticationApiInterface
 */
export interface SecureAuthenticationApiInterface {
    /**
     * Secure user login with input validation.
     * @summary Secure Login
     * @param {SecureUserLogin} secureUserLogin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureAuthenticationApiInterface
     */
    secureLoginApiSecureAuthLoginPostRaw(requestParameters: SecureLoginApiSecureAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Secure user login with input validation.
     * Secure Login
     */
    secureLoginApiSecureAuthLoginPost(requestParameters: SecureLoginApiSecureAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Secure user logout.
     * @summary Secure Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureAuthenticationApiInterface
     */
    secureLogoutApiSecureAuthLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Secure user logout.
     * Secure Logout
     */
    secureLogoutApiSecureAuthLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Secure user registration with input validation.
     * @summary Secure Register
     * @param {SecureUserCreate} secureUserCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecureAuthenticationApiInterface
     */
    secureRegisterApiSecureAuthRegisterPostRaw(requestParameters: SecureRegisterApiSecureAuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Secure user registration with input validation.
     * Secure Register
     */
    secureRegisterApiSecureAuthRegisterPost(requestParameters: SecureRegisterApiSecureAuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

}

/**
 * 
 */
export class SecureAuthenticationApi extends runtime.BaseAPI implements SecureAuthenticationApiInterface {

    /**
     * Secure user login with input validation.
     * Secure Login
     */
    async secureLoginApiSecureAuthLoginPostRaw(requestParameters: SecureLoginApiSecureAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['secureUserLogin'] == null) {
            throw new runtime.RequiredError(
                'secureUserLogin',
                'Required parameter "secureUserLogin" was null or undefined when calling secureLoginApiSecureAuthLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/secure/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecureUserLoginToJSON(requestParameters['secureUserLogin']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Secure user login with input validation.
     * Secure Login
     */
    async secureLoginApiSecureAuthLoginPost(requestParameters: SecureLoginApiSecureAuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.secureLoginApiSecureAuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Secure user logout.
     * Secure Logout
     */
    async secureLogoutApiSecureAuthLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/secure/auth/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Secure user logout.
     * Secure Logout
     */
    async secureLogoutApiSecureAuthLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.secureLogoutApiSecureAuthLogoutPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Secure user registration with input validation.
     * Secure Register
     */
    async secureRegisterApiSecureAuthRegisterPostRaw(requestParameters: SecureRegisterApiSecureAuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['secureUserCreate'] == null) {
            throw new runtime.RequiredError(
                'secureUserCreate',
                'Required parameter "secureUserCreate" was null or undefined when calling secureRegisterApiSecureAuthRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/secure/auth/register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecureUserCreateToJSON(requestParameters['secureUserCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Secure user registration with input validation.
     * Secure Register
     */
    async secureRegisterApiSecureAuthRegisterPost(requestParameters: SecureRegisterApiSecureAuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.secureRegisterApiSecureAuthRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
