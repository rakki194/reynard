/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import { NLWebAskRequestToJSON, NLWebHealthStatusFromJSON, NLWebMCPRequestToJSON, NLWebPerformanceStatsFromJSON, NLWebRollbackRequestToJSON, NLWebRollbackResponseFromJSON, NLWebSitesResponseFromJSON, NLWebSuggestionRequestToJSON, NLWebSuggestionResponseFromJSON, NLWebToolToJSON, NLWebVerificationResponseFromJSON, } from "../models/index";
/**
 *
 */
export class NlwebApi extends runtime.BaseAPI {
    /**
     * Clear the NLWeb suggestion cache.
     * Clear Cache
     */
    async clearCacheApiNlwebCacheClearPostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/nlweb/cache/clear`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Clear the NLWeb suggestion cache.
     * Clear Cache
     */
    async clearCacheApiNlwebCacheClearPost(initOverrides) {
        const response = await this.clearCacheApiNlwebCacheClearPostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Disable an NLWeb tool.
     * Disable Tool
     */
    async disableToolApiNlwebToolsToolNameDisablePostRaw(requestParameters, initOverrides) {
        if (requestParameters["toolName"] == null) {
            throw new runtime.RequiredError("toolName", 'Required parameter "toolName" was null or undefined when calling disableToolApiNlwebToolsToolNameDisablePost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/nlweb/tools/{tool_name}/disable`;
        urlPath = urlPath.replace(`{${"tool_name"}}`, encodeURIComponent(String(requestParameters["toolName"])));
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Disable an NLWeb tool.
     * Disable Tool
     */
    async disableToolApiNlwebToolsToolNameDisablePost(requestParameters, initOverrides) {
        const response = await this.disableToolApiNlwebToolsToolNameDisablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Enable or disable emergency rollback for NLWeb integration.  This endpoint allows administrators to quickly disable NLWeb functionality in case of issues or performance problems.
     * Enable Rollback
     */
    async enableRollbackApiNlwebRollbackPostRaw(requestParameters, initOverrides) {
        if (requestParameters["nLWebRollbackRequest"] == null) {
            throw new runtime.RequiredError("nLWebRollbackRequest", 'Required parameter "nLWebRollbackRequest" was null or undefined when calling enableRollbackApiNlwebRollbackPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/nlweb/rollback`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: NLWebRollbackRequestToJSON(requestParameters["nLWebRollbackRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => NLWebRollbackResponseFromJSON(jsonValue));
    }
    /**
     * Enable or disable emergency rollback for NLWeb integration.  This endpoint allows administrators to quickly disable NLWeb functionality in case of issues or performance problems.
     * Enable Rollback
     */
    async enableRollbackApiNlwebRollbackPost(requestParameters, initOverrides) {
        const response = await this.enableRollbackApiNlwebRollbackPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Enable an NLWeb tool.
     * Enable Tool
     */
    async enableToolApiNlwebToolsToolNameEnablePostRaw(requestParameters, initOverrides) {
        if (requestParameters["toolName"] == null) {
            throw new runtime.RequiredError("toolName", 'Required parameter "toolName" was null or undefined when calling enableToolApiNlwebToolsToolNameEnablePost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/nlweb/tools/{tool_name}/enable`;
        urlPath = urlPath.replace(`{${"tool_name"}}`, encodeURIComponent(String(requestParameters["toolName"])));
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Enable an NLWeb tool.
     * Enable Tool
     */
    async enableToolApiNlwebToolsToolNameEnablePost(requestParameters, initOverrides) {
        const response = await this.enableToolApiNlwebToolsToolNameEnablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Force a health check of the NLWeb service.
     * Force Health Check
     */
    async forceHealthCheckApiNlwebHealthForceCheckPostRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/nlweb/health/force-check`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Force a health check of the NLWeb service.
     * Force Health Check
     */
    async forceHealthCheckApiNlwebHealthForceCheckPost(initOverrides) {
        const response = await this.forceHealthCheckApiNlwebHealthForceCheckPostRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get NLWeb service health status.
     * Get Health
     */
    async getHealthApiNlwebHealthGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/nlweb/health`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => NLWebHealthStatusFromJSON(jsonValue));
    }
    /**
     * Get NLWeb service health status.
     * Get Health
     */
    async getHealthApiNlwebHealthGet(initOverrides) {
        const response = await this.getHealthApiNlwebHealthGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get NLWeb service performance statistics.
     * Get Performance Stats
     */
    async getPerformanceStatsApiNlwebPerformanceGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/nlweb/performance`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => NLWebPerformanceStatsFromJSON(jsonValue));
    }
    /**
     * Get NLWeb service performance statistics.
     * Get Performance Stats
     */
    async getPerformanceStatsApiNlwebPerformanceGet(initOverrides) {
        const response = await this.getPerformanceStatsApiNlwebPerformanceGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get NLWeb integration status and performance metrics.
     * Get Status
     */
    async getStatusApiNlwebStatusGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/nlweb/status`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get NLWeb integration status and performance metrics.
     * Get Status
     */
    async getStatusApiNlwebStatusGet(initOverrides) {
        const response = await this.getStatusApiNlwebStatusGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get available NLWeb tools, optionally filtered by category or tags.
     * Get Tools
     */
    async getToolsApiNlwebToolsGetRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters["category"] != null) {
            queryParameters["category"] = requestParameters["category"];
        }
        if (requestParameters["tags"] != null) {
            queryParameters["tags"] = requestParameters["tags"];
        }
        const headerParameters = {};
        let urlPath = `/api/nlweb/tools`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Get available NLWeb tools, optionally filtered by category or tags.
     * Get Tools
     */
    async getToolsApiNlwebToolsGet(requestParameters = {}, initOverrides) {
        const response = await this.getToolsApiNlwebToolsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get NLWeb integration verification checklist for rollout.  This endpoint provides a comprehensive checklist to verify that NLWeb is properly configured and performing well before full rollout.
     * Get Verification Checklist
     */
    async getVerificationChecklistApiNlwebVerificationGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/nlweb/verification`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => NLWebVerificationResponseFromJSON(jsonValue));
    }
    /**
     * Get NLWeb integration verification checklist for rollout.  This endpoint provides a comprehensive checklist to verify that NLWeb is properly configured and performing well before full rollout.
     * Get Verification Checklist
     */
    async getVerificationChecklistApiNlwebVerificationGet(initOverrides) {
        const response = await this.getVerificationChecklistApiNlwebVerificationGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Proxy NLWeb /ask endpoint with SSE streaming support.  This endpoint forwards requests to an external NLWeb service and streams the response back to the client with proper event mapping.
     * Proxy Ask
     */
    async proxyAskApiNlwebAskPostRaw(requestParameters, initOverrides) {
        if (requestParameters["nLWebAskRequest"] == null) {
            throw new runtime.RequiredError("nLWebAskRequest", 'Required parameter "nLWebAskRequest" was null or undefined when calling proxyAskApiNlwebAskPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/nlweb/ask`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: NLWebAskRequestToJSON(requestParameters["nLWebAskRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Proxy NLWeb /ask endpoint with SSE streaming support.  This endpoint forwards requests to an external NLWeb service and streams the response back to the client with proper event mapping.
     * Proxy Ask
     */
    async proxyAskApiNlwebAskPost(requestParameters, initOverrides) {
        const response = await this.proxyAskApiNlwebAskPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Proxy NLWeb MCP (Model Context Protocol) endpoint.  This endpoint forwards JSON-RPC requests to an external NLWeb MCP service.
     * Proxy Mcp
     */
    async proxyMcpApiNlwebMcpPostRaw(requestParameters, initOverrides) {
        if (requestParameters["nLWebMCPRequest"] == null) {
            throw new runtime.RequiredError("nLWebMCPRequest", 'Required parameter "nLWebMCPRequest" was null or undefined when calling proxyMcpApiNlwebMcpPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/nlweb/mcp`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: NLWebMCPRequestToJSON(requestParameters["nLWebMCPRequest"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Proxy NLWeb MCP (Model Context Protocol) endpoint.  This endpoint forwards JSON-RPC requests to an external NLWeb MCP service.
     * Proxy Mcp
     */
    async proxyMcpApiNlwebMcpPost(requestParameters, initOverrides) {
        const response = await this.proxyMcpApiNlwebMcpPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Proxy NLWeb /sites endpoint to list available sites.
     * Proxy Sites
     */
    async proxySitesApiNlwebSitesGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/nlweb/sites`;
        const response = await this.request({
            path: urlPath,
            method: "GET",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => NLWebSitesResponseFromJSON(jsonValue));
    }
    /**
     * Proxy NLWeb /sites endpoint to list available sites.
     * Proxy Sites
     */
    async proxySitesApiNlwebSitesGet(initOverrides) {
        const response = await this.proxySitesApiNlwebSitesGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Register a new NLWeb tool.
     * Register Tool
     */
    async registerToolApiNlwebToolsPostRaw(requestParameters, initOverrides) {
        if (requestParameters["nLWebTool"] == null) {
            throw new runtime.RequiredError("nLWebTool", 'Required parameter "nLWebTool" was null or undefined when calling registerToolApiNlwebToolsPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/nlweb/tools`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: NLWebToolToJSON(requestParameters["nLWebTool"]),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Register a new NLWeb tool.
     * Register Tool
     */
    async registerToolApiNlwebToolsPost(requestParameters, initOverrides) {
        const response = await this.registerToolApiNlwebToolsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Suggest tools for a natural language query using the NLWeb router service.  This endpoint analyzes the query and suggests appropriate tools with parameters based on context and tool relevance.
     * Suggest Tools
     */
    async suggestToolsApiNlwebSuggestPostRaw(requestParameters, initOverrides) {
        if (requestParameters["nLWebSuggestionRequest"] == null) {
            throw new runtime.RequiredError("nLWebSuggestionRequest", 'Required parameter "nLWebSuggestionRequest" was null or undefined when calling suggestToolsApiNlwebSuggestPost().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters["Content-Type"] = "application/json";
        let urlPath = `/api/nlweb/suggest`;
        const response = await this.request({
            path: urlPath,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: NLWebSuggestionRequestToJSON(requestParameters["nLWebSuggestionRequest"]),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, jsonValue => NLWebSuggestionResponseFromJSON(jsonValue));
    }
    /**
     * Suggest tools for a natural language query using the NLWeb router service.  This endpoint analyzes the query and suggests appropriate tools with parameters based on context and tool relevance.
     * Suggest Tools
     */
    async suggestToolsApiNlwebSuggestPost(requestParameters, initOverrides) {
        const response = await this.suggestToolsApiNlwebSuggestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Unregister an NLWeb tool.
     * Unregister Tool
     */
    async unregisterToolApiNlwebToolsToolNameDeleteRaw(requestParameters, initOverrides) {
        if (requestParameters["toolName"] == null) {
            throw new runtime.RequiredError("toolName", 'Required parameter "toolName" was null or undefined when calling unregisterToolApiNlwebToolsToolNameDelete().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/nlweb/tools/{tool_name}`;
        urlPath = urlPath.replace(`{${"tool_name"}}`, encodeURIComponent(String(requestParameters["toolName"])));
        const response = await this.request({
            path: urlPath,
            method: "DELETE",
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get("content-type"))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * Unregister an NLWeb tool.
     * Unregister Tool
     */
    async unregisterToolApiNlwebToolsToolNameDelete(requestParameters, initOverrides) {
        const response = await this.unregisterToolApiNlwebToolsToolNameDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
