/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Semantic search request model.
 * @export
 * @interface SemanticSearchRequest
 */
export interface SemanticSearchRequest {
    /**
     * Search query
     * @type {string}
     * @memberof SemanticSearchRequest
     */
    query: string;
    /**
     * Maximum results to return
     * @type {number}
     * @memberof SemanticSearchRequest
     */
    maxResults?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof SemanticSearchRequest
     */
    fileTypes?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SemanticSearchRequest
     */
    directories?: Array<string> | null;
    /**
     * Case-sensitive search
     * @type {boolean}
     * @memberof SemanticSearchRequest
     */
    caseSensitive?: boolean;
    /**
     * Match whole words only
     * @type {boolean}
     * @memberof SemanticSearchRequest
     */
    wholeWord?: boolean;
    /**
     * Context lines around matches
     * @type {number}
     * @memberof SemanticSearchRequest
     */
    contextLines?: number;
    /**
     * Minimum similarity score
     * @type {number}
     * @memberof SemanticSearchRequest
     */
    similarityThreshold?: number;
    /**
     * 
     * @type {string}
     * @memberof SemanticSearchRequest
     */
    model?: string | null;
    /**
     * Search type: hybrid, vector, text, code
     * @type {string}
     * @memberof SemanticSearchRequest
     */
    searchType?: string;
}

/**
 * Check if a given object implements the SemanticSearchRequest interface.
 */
export function instanceOfSemanticSearchRequest(value: object): value is SemanticSearchRequest {
    if (!('query' in value) || value['query'] === undefined) return false;
    return true;
}

export function SemanticSearchRequestFromJSON(json: any): SemanticSearchRequest {
    return SemanticSearchRequestFromJSONTyped(json, false);
}

export function SemanticSearchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SemanticSearchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'query': json['query'],
        'maxResults': json['max_results'] == null ? undefined : json['max_results'],
        'fileTypes': json['file_types'] == null ? undefined : json['file_types'],
        'directories': json['directories'] == null ? undefined : json['directories'],
        'caseSensitive': json['case_sensitive'] == null ? undefined : json['case_sensitive'],
        'wholeWord': json['whole_word'] == null ? undefined : json['whole_word'],
        'contextLines': json['context_lines'] == null ? undefined : json['context_lines'],
        'similarityThreshold': json['similarity_threshold'] == null ? undefined : json['similarity_threshold'],
        'model': json['model'] == null ? undefined : json['model'],
        'searchType': json['search_type'] == null ? undefined : json['search_type'],
    };
}

export function SemanticSearchRequestToJSON(json: any): SemanticSearchRequest {
    return SemanticSearchRequestToJSONTyped(json, false);
}

export function SemanticSearchRequestToJSONTyped(value?: SemanticSearchRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'query': value['query'],
        'max_results': value['maxResults'],
        'file_types': value['fileTypes'],
        'directories': value['directories'],
        'case_sensitive': value['caseSensitive'],
        'whole_word': value['wholeWord'],
        'context_lines': value['contextLines'],
        'similarity_threshold': value['similarityThreshold'],
        'model': value['model'],
        'search_type': value['searchType'],
    };
}

