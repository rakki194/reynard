/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Information about a caption generator.
 * @export
 * @interface GeneratorInfo
 */
export interface GeneratorInfo {
    /**
     * 
     * @type {string}
     * @memberof GeneratorInfo
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorInfo
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorInfo
     */
    version: string;
    /**
     * 
     * @type {string}
     * @memberof GeneratorInfo
     */
    captionType: string;
    /**
     * 
     * @type {boolean}
     * @memberof GeneratorInfo
     */
    isAvailable: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GeneratorInfo
     */
    isLoaded: boolean;
    /**
     * 
     * @type {object}
     * @memberof GeneratorInfo
     */
    configSchema: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof GeneratorInfo
     */
    features: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GeneratorInfo
     */
    modelCategory: string;
}

/**
 * Check if a given object implements the GeneratorInfo interface.
 */
export function instanceOfGeneratorInfo(value: object): value is GeneratorInfo {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('captionType' in value) || value['captionType'] === undefined) return false;
    if (!('isAvailable' in value) || value['isAvailable'] === undefined) return false;
    if (!('isLoaded' in value) || value['isLoaded'] === undefined) return false;
    if (!('configSchema' in value) || value['configSchema'] === undefined) return false;
    if (!('features' in value) || value['features'] === undefined) return false;
    if (!('modelCategory' in value) || value['modelCategory'] === undefined) return false;
    return true;
}

export function GeneratorInfoFromJSON(json: any): GeneratorInfo {
    return GeneratorInfoFromJSONTyped(json, false);
}

export function GeneratorInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeneratorInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'version': json['version'],
        'captionType': json['caption_type'],
        'isAvailable': json['is_available'],
        'isLoaded': json['is_loaded'],
        'configSchema': json['config_schema'],
        'features': json['features'],
        'modelCategory': json['model_category'],
    };
}

export function GeneratorInfoToJSON(json: any): GeneratorInfo {
    return GeneratorInfoToJSONTyped(json, false);
}

export function GeneratorInfoToJSONTyped(value?: GeneratorInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'version': value['version'],
        'caption_type': value['captionType'],
        'is_available': value['isAvailable'],
        'is_loaded': value['isLoaded'],
        'config_schema': value['configSchema'],
        'features': value['features'],
        'model_category': value['modelCategory'],
    };
}

