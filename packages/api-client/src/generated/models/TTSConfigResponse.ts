/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TTSBackendInfo } from "./TTSBackendInfo";
import {
  TTSBackendInfoFromJSON,
  TTSBackendInfoFromJSONTyped,
  TTSBackendInfoToJSON,
  TTSBackendInfoToJSONTyped,
} from "./TTSBackendInfo";

/**
 * Response model for TTS configuration.
 * @export
 * @interface TTSConfigResponse
 */
export interface TTSConfigResponse {
  /**
   * Default backend
   * @type {string}
   * @memberof TTSConfigResponse
   */
  defaultBackend: string;
  /**
   * Default voice
   * @type {string}
   * @memberof TTSConfigResponse
   */
  defaultVoice: string;
  /**
   * Default speech speed
   * @type {number}
   * @memberof TTSConfigResponse
   */
  defaultSpeed: number;
  /**
   * Default language
   * @type {string}
   * @memberof TTSConfigResponse
   */
  defaultLanguage: string;
  /**
   * Maximum text length
   * @type {number}
   * @memberof TTSConfigResponse
   */
  maxTextLength: number;
  /**
   * Text chunk size
   * @type {number}
   * @memberof TTSConfigResponse
   */
  chunkSize: number;
  /**
   * Audio processing enabled
   * @type {boolean}
   * @memberof TTSConfigResponse
   */
  enableAudioProcessing: boolean;
  /**
   * Output directory
   * @type {string}
   * @memberof TTSConfigResponse
   */
  outputDirectory: string;
  /**
   * Available backends
   * @type {Array<TTSBackendInfo>}
   * @memberof TTSConfigResponse
   */
  backends: Array<TTSBackendInfo>;
}

/**
 * Check if a given object implements the TTSConfigResponse interface.
 */
export function instanceOfTTSConfigResponse(
  value: object,
): value is TTSConfigResponse {
  if (!("defaultBackend" in value) || value["defaultBackend"] === undefined)
    return false;
  if (!("defaultVoice" in value) || value["defaultVoice"] === undefined)
    return false;
  if (!("defaultSpeed" in value) || value["defaultSpeed"] === undefined)
    return false;
  if (!("defaultLanguage" in value) || value["defaultLanguage"] === undefined)
    return false;
  if (!("maxTextLength" in value) || value["maxTextLength"] === undefined)
    return false;
  if (!("chunkSize" in value) || value["chunkSize"] === undefined) return false;
  if (
    !("enableAudioProcessing" in value) ||
    value["enableAudioProcessing"] === undefined
  )
    return false;
  if (!("outputDirectory" in value) || value["outputDirectory"] === undefined)
    return false;
  if (!("backends" in value) || value["backends"] === undefined) return false;
  return true;
}

export function TTSConfigResponseFromJSON(json: any): TTSConfigResponse {
  return TTSConfigResponseFromJSONTyped(json, false);
}

export function TTSConfigResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TTSConfigResponse {
  if (json == null) {
    return json;
  }
  return {
    defaultBackend: json["default_backend"],
    defaultVoice: json["default_voice"],
    defaultSpeed: json["default_speed"],
    defaultLanguage: json["default_language"],
    maxTextLength: json["max_text_length"],
    chunkSize: json["chunk_size"],
    enableAudioProcessing: json["enable_audio_processing"],
    outputDirectory: json["output_directory"],
    backends: (json["backends"] as Array<TTSBackendInfo>).map(
      TTSBackendInfoFromJSON,
    ),
  };
}

export function TTSConfigResponseToJSON(json: any): TTSConfigResponse {
  return TTSConfigResponseToJSONTyped(json, false);
}

export function TTSConfigResponseToJSONTyped(
  value?: TTSConfigResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    default_backend: value["defaultBackend"],
    default_voice: value["defaultVoice"],
    default_speed: value["defaultSpeed"],
    default_language: value["defaultLanguage"],
    max_text_length: value["maxTextLength"],
    chunk_size: value["chunkSize"],
    enable_audio_processing: value["enableAudioProcessing"],
    output_directory: value["outputDirectory"],
    backends: (value["backends"] as Array<TTSBackendInfo>).map(
      TTSBackendInfoToJSON,
    ),
  };
}
