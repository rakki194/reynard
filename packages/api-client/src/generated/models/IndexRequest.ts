/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Codebase indexing request model.
 * @export
 * @interface IndexRequest
 */
export interface IndexRequest {
    /**
     * 
     * @type {string}
     * @memberof IndexRequest
     */
    projectRoot?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof IndexRequest
     */
    fileTypes?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof IndexRequest
     */
    directories?: Array<string> | null;
    /**
     * Force reindexing of existing files
     * @type {boolean}
     * @memberof IndexRequest
     */
    forceReindex?: boolean;
    /**
     * Text chunk size for indexing
     * @type {number}
     * @memberof IndexRequest
     */
    chunkSize?: number;
    /**
     * Overlap between chunks
     * @type {number}
     * @memberof IndexRequest
     */
    overlap?: number;
}

/**
 * Check if a given object implements the IndexRequest interface.
 */
export function instanceOfIndexRequest(value: object): value is IndexRequest {
    return true;
}

export function IndexRequestFromJSON(json: any): IndexRequest {
    return IndexRequestFromJSONTyped(json, false);
}

export function IndexRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): IndexRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'projectRoot': json['project_root'] == null ? undefined : json['project_root'],
        'fileTypes': json['file_types'] == null ? undefined : json['file_types'],
        'directories': json['directories'] == null ? undefined : json['directories'],
        'forceReindex': json['force_reindex'] == null ? undefined : json['force_reindex'],
        'chunkSize': json['chunk_size'] == null ? undefined : json['chunk_size'],
        'overlap': json['overlap'] == null ? undefined : json['overlap'],
    };
}

export function IndexRequestToJSON(json: any): IndexRequest {
    return IndexRequestToJSONTyped(json, false);
}

export function IndexRequestToJSONTyped(value?: IndexRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'project_root': value['projectRoot'],
        'file_types': value['fileTypes'],
        'directories': value['directories'],
        'force_reindex': value['forceReindex'],
        'chunk_size': value['chunkSize'],
        'overlap': value['overlap'],
    };
}

