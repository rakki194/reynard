/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Request model for natural language search.
 * @export
 * @interface NaturalLanguageSearchRequest
 */
export interface NaturalLanguageSearchRequest {
    /**
     * Natural language search query
     * @type {string}
     * @memberof NaturalLanguageSearchRequest
     */
    query: string;
    /**
     * Maximum number of results to return
     * @type {number}
     * @memberof NaturalLanguageSearchRequest
     */
    maxResults?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof NaturalLanguageSearchRequest
     */
    fileTypes?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof NaturalLanguageSearchRequest
     */
    directories?: Array<string> | null;
    /**
     * Enable query expansion
     * @type {boolean}
     * @memberof NaturalLanguageSearchRequest
     */
    enableExpansion?: boolean;
    /**
     * Minimum confidence threshold
     * @type {number}
     * @memberof NaturalLanguageSearchRequest
     */
    confidenceThreshold?: number;
}

/**
 * Check if a given object implements the NaturalLanguageSearchRequest interface.
 */
export function instanceOfNaturalLanguageSearchRequest(value: object): value is NaturalLanguageSearchRequest {
    if (!('query' in value) || value['query'] === undefined) return false;
    return true;
}

export function NaturalLanguageSearchRequestFromJSON(json: any): NaturalLanguageSearchRequest {
    return NaturalLanguageSearchRequestFromJSONTyped(json, false);
}

export function NaturalLanguageSearchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): NaturalLanguageSearchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'query': json['query'],
        'maxResults': json['max_results'] == null ? undefined : json['max_results'],
        'fileTypes': json['file_types'] == null ? undefined : json['file_types'],
        'directories': json['directories'] == null ? undefined : json['directories'],
        'enableExpansion': json['enable_expansion'] == null ? undefined : json['enable_expansion'],
        'confidenceThreshold': json['confidence_threshold'] == null ? undefined : json['confidence_threshold'],
    };
}

export function NaturalLanguageSearchRequestToJSON(json: any): NaturalLanguageSearchRequest {
    return NaturalLanguageSearchRequestToJSONTyped(json, false);
}

export function NaturalLanguageSearchRequestToJSONTyped(value?: NaturalLanguageSearchRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'query': value['query'],
        'max_results': value['maxResults'],
        'file_types': value['fileTypes'],
        'directories': value['directories'],
        'enable_expansion': value['enableExpansion'],
        'confidence_threshold': value['confidenceThreshold'],
    };
}

