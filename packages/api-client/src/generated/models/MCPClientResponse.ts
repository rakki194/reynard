/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Response model for MCP client information.
 * @export
 * @interface MCPClientResponse
 */
export interface MCPClientResponse {
  /**
   * Client identifier
   * @type {string}
   * @memberof MCPClientResponse
   */
  clientId: string;
  /**
   * Client type
   * @type {string}
   * @memberof MCPClientResponse
   */
  clientType: string;
  /**
   * Client name
   * @type {string}
   * @memberof MCPClientResponse
   */
  name: string;
  /**
   * Granted permissions
   * @type {Array<string>}
   * @memberof MCPClientResponse
   */
  permissions: Array<string>;
  /**
   * Whether client is active
   * @type {boolean}
   * @memberof MCPClientResponse
   */
  isActive: boolean;
  /**
   * Creation timestamp
   * @type {string}
   * @memberof MCPClientResponse
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof MCPClientResponse
   */
  lastUsed?: string | null;
}

/**
 * Check if a given object implements the MCPClientResponse interface.
 */
export function instanceOfMCPClientResponse(value: object): value is MCPClientResponse {
  if (!("clientId" in value) || value["clientId"] === undefined) return false;
  if (!("clientType" in value) || value["clientType"] === undefined) return false;
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("permissions" in value) || value["permissions"] === undefined) return false;
  if (!("isActive" in value) || value["isActive"] === undefined) return false;
  if (!("createdAt" in value) || value["createdAt"] === undefined) return false;
  return true;
}

export function MCPClientResponseFromJSON(json: any): MCPClientResponse {
  return MCPClientResponseFromJSONTyped(json, false);
}

export function MCPClientResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MCPClientResponse {
  if (json == null) {
    return json;
  }
  return {
    clientId: json["client_id"],
    clientType: json["client_type"],
    name: json["name"],
    permissions: json["permissions"],
    isActive: json["is_active"],
    createdAt: json["created_at"],
    lastUsed: json["last_used"] == null ? undefined : json["last_used"],
  };
}

export function MCPClientResponseToJSON(json: any): MCPClientResponse {
  return MCPClientResponseToJSONTyped(json, false);
}

export function MCPClientResponseToJSONTyped(
  value?: MCPClientResponse | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    client_id: value["clientId"],
    client_type: value["clientType"],
    name: value["name"],
    permissions: value["permissions"],
    is_active: value["isActive"],
    created_at: value["createdAt"],
    last_used: value["lastUsed"],
  };
}
