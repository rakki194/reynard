/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { TTSVoiceInfo } from "./TTSVoiceInfo";
import {
  TTSVoiceInfoFromJSON,
  TTSVoiceInfoFromJSONTyped,
  TTSVoiceInfoToJSON,
  TTSVoiceInfoToJSONTyped,
} from "./TTSVoiceInfo";

/**
 * Model for backend information.
 * @export
 * @interface TTSBackendInfo
 */
export interface TTSBackendInfo {
  /**
   * Backend name
   * @type {string}
   * @memberof TTSBackendInfo
   */
  name: string;
  /**
   * Whether backend is enabled
   * @type {boolean}
   * @memberof TTSBackendInfo
   */
  enabled: boolean;
  /**
   * Whether backend is available
   * @type {boolean}
   * @memberof TTSBackendInfo
   */
  available: boolean;
  /**
   * Available voices
   * @type {Array<TTSVoiceInfo>}
   * @memberof TTSBackendInfo
   */
  voices: Array<TTSVoiceInfo>;
  /**
   * Supported languages
   * @type {Array<string>}
   * @memberof TTSBackendInfo
   */
  supportedLanguages: Array<string>;
  /**
   * Supported output formats
   * @type {Array<string>}
   * @memberof TTSBackendInfo
   */
  supportedFormats: Array<string>;
}

/**
 * Check if a given object implements the TTSBackendInfo interface.
 */
export function instanceOfTTSBackendInfo(
  value: object,
): value is TTSBackendInfo {
  if (!("name" in value) || value["name"] === undefined) return false;
  if (!("enabled" in value) || value["enabled"] === undefined) return false;
  if (!("available" in value) || value["available"] === undefined) return false;
  if (!("voices" in value) || value["voices"] === undefined) return false;
  if (
    !("supportedLanguages" in value) ||
    value["supportedLanguages"] === undefined
  )
    return false;
  if (!("supportedFormats" in value) || value["supportedFormats"] === undefined)
    return false;
  return true;
}

export function TTSBackendInfoFromJSON(json: any): TTSBackendInfo {
  return TTSBackendInfoFromJSONTyped(json, false);
}

export function TTSBackendInfoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): TTSBackendInfo {
  if (json == null) {
    return json;
  }
  return {
    name: json["name"],
    enabled: json["enabled"],
    available: json["available"],
    voices: (json["voices"] as Array<any>).map(TTSVoiceInfoFromJSON),
    supportedLanguages: json["supported_languages"],
    supportedFormats: json["supported_formats"],
  };
}

export function TTSBackendInfoToJSON(json: any): TTSBackendInfo {
  return TTSBackendInfoToJSONTyped(json, false);
}

export function TTSBackendInfoToJSONTyped(
  value?: TTSBackendInfo | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    name: value["name"],
    enabled: value["enabled"],
    available: value["available"],
    voices: (value["voices"] as Array<any>).map(TTSVoiceInfoToJSON),
    supported_languages: value["supportedLanguages"],
    supported_formats: value["supportedFormats"],
  };
}
