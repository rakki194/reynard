/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { NLWebContext } from "./NLWebContext";
import {
  NLWebContextFromJSON,
  NLWebContextFromJSONTyped,
  NLWebContextToJSON,
  NLWebContextToJSONTyped,
} from "./NLWebContext";

/**
 * Request for NLWeb ask endpoint.
 * @export
 * @interface NLWebAskRequest
 */
export interface NLWebAskRequest {
  /**
   * Natural language query
   * @type {string}
   * @memberof NLWebAskRequest
   */
  query: string;
  /**
   *
   * @type {NLWebContext}
   * @memberof NLWebAskRequest
   */
  context?: NLWebContext | null;
  /**
   * Whether to stream the response
   * @type {boolean}
   * @memberof NLWebAskRequest
   */
  stream?: boolean;
  /**
   *
   * @type {number}
   * @memberof NLWebAskRequest
   */
  maxTokens?: number | null;
  /**
   *
   * @type {number}
   * @memberof NLWebAskRequest
   */
  temperature?: number | null;
}

/**
 * Check if a given object implements the NLWebAskRequest interface.
 */
export function instanceOfNLWebAskRequest(
  value: object,
): value is NLWebAskRequest {
  if (!("query" in value) || value["query"] === undefined) return false;
  return true;
}

export function NLWebAskRequestFromJSON(json: any): NLWebAskRequest {
  return NLWebAskRequestFromJSONTyped(json, false);
}

export function NLWebAskRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): NLWebAskRequest {
  if (json == null) {
    return json;
  }
  return {
    query: json["query"],
    context:
      json["context"] == null
        ? undefined
        : NLWebContextFromJSON(json["context"]),
    stream: json["stream"] == null ? undefined : json["stream"],
    maxTokens: json["max_tokens"] == null ? undefined : json["max_tokens"],
    temperature: json["temperature"] == null ? undefined : json["temperature"],
  };
}

export function NLWebAskRequestToJSON(json: any): NLWebAskRequest {
  return NLWebAskRequestToJSONTyped(json, false);
}

export function NLWebAskRequestToJSONTyped(
  value?: NLWebAskRequest | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    query: value["query"],
    context: NLWebContextToJSON(value["context"]),
    stream: value["stream"],
    max_tokens: value["maxTokens"],
    temperature: value["temperature"],
  };
}
