/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Check if a given object implements the OllamaAssistantResponse interface.
 */
export function instanceOfOllamaAssistantResponse(value) {
    if (!("success" in value) || value["success"] === undefined)
        return false;
    if (!("assistantType" in value) || value["assistantType"] === undefined)
        return false;
    if (!("model" in value) || value["model"] === undefined)
        return false;
    if (!("processingTime" in value) || value["processingTime"] === undefined)
        return false;
    return true;
}
export function OllamaAssistantResponseFromJSON(json) {
    return OllamaAssistantResponseFromJSONTyped(json, false);
}
export function OllamaAssistantResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        success: json["success"],
        response: json["response"] == null ? undefined : json["response"],
        assistantType: json["assistant_type"],
        model: json["model"],
        processingTime: json["processing_time"],
        tokensGenerated: json["tokens_generated"] == null ? undefined : json["tokens_generated"],
        toolsUsed: json["tools_used"] == null ? undefined : json["tools_used"],
        toolCalls: json["tool_calls"] == null ? undefined : json["tool_calls"],
        reasoning: json["reasoning"] == null ? undefined : json["reasoning"],
        metadata: json["metadata"] == null ? undefined : json["metadata"],
    };
}
export function OllamaAssistantResponseToJSON(json) {
    return OllamaAssistantResponseToJSONTyped(json, false);
}
export function OllamaAssistantResponseToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        success: value["success"],
        response: value["response"],
        assistant_type: value["assistantType"],
        model: value["model"],
        processing_time: value["processingTime"],
        tokens_generated: value["tokensGenerated"],
        tools_used: value["toolsUsed"],
        tool_calls: value["toolCalls"],
        reasoning: value["reasoning"],
        metadata: value["metadata"],
    };
}
