/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserRole } from './UserRole';
import {
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
    UserRoleToJSONTyped,
} from './UserRole';

/**
 * Public User model, containing only non-sensitive information.
 * 
 * Used for API responses where sensitive data like password_hash should not be exposed.
 * @export
 * @interface UserPublic
 */
export interface UserPublic {
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    username: string;
    /**
     * 
     * @type {UserRole}
     * @memberof UserPublic
     */
    role: UserRole;
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserPublic
     */
    profilePictureUrl?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserPublic
     */
    yapcoinBalance?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserPublic
     */
    isActive: boolean;
    /**
     * 
     * @type {Date}
     * @memberof UserPublic
     */
    createdAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof UserPublic
     */
    updatedAt?: Date | null;
    /**
     * 
     * @type {object}
     * @memberof UserPublic
     */
    metadata?: object;
}



/**
 * Check if a given object implements the UserPublic interface.
 */
export function instanceOfUserPublic(value: object): value is UserPublic {
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    return true;
}

export function UserPublicFromJSON(json: any): UserPublic {
    return UserPublicFromJSONTyped(json, false);
}

export function UserPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserPublic {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'username': json['username'],
        'role': UserRoleFromJSON(json['role']),
        'email': json['email'] == null ? undefined : json['email'],
        'profilePictureUrl': json['profile_picture_url'] == null ? undefined : json['profile_picture_url'],
        'yapcoinBalance': json['yapcoin_balance'] == null ? undefined : json['yapcoin_balance'],
        'isActive': json['is_active'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function UserPublicToJSON(json: any): UserPublic {
    return UserPublicToJSONTyped(json, false);
}

export function UserPublicToJSONTyped(value?: UserPublic | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'username': value['username'],
        'role': UserRoleToJSON(value['role']),
        'email': value['email'],
        'profile_picture_url': value['profilePictureUrl'],
        'yapcoin_balance': value['yapcoinBalance'],
        'is_active': value['isActive'],
        'created_at': value['createdAt'] === null ? null : ((value['createdAt'] as any)?.toISOString()),
        'updated_at': value['updatedAt'] === null ? null : ((value['updatedAt'] as any)?.toISOString()),
        'metadata': value['metadata'],
    };
}

