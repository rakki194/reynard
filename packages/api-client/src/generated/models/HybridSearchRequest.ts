/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Hybrid search request model.
 * @export
 * @interface HybridSearchRequest
 */
export interface HybridSearchRequest {
  /**
   * Search query
   * @type {string}
   * @memberof HybridSearchRequest
   */
  query: string;
  /**
   * Maximum results to return
   * @type {number}
   * @memberof HybridSearchRequest
   */
  maxResults?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof HybridSearchRequest
   */
  fileTypes?: Array<string> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof HybridSearchRequest
   */
  directories?: Array<string> | null;
  /**
   * Case-sensitive search
   * @type {boolean}
   * @memberof HybridSearchRequest
   */
  caseSensitive?: boolean;
  /**
   * Match whole words only
   * @type {boolean}
   * @memberof HybridSearchRequest
   */
  wholeWord?: boolean;
  /**
   * Context lines around matches
   * @type {number}
   * @memberof HybridSearchRequest
   */
  contextLines?: number;
  /**
   * Weight for semantic results
   * @type {number}
   * @memberof HybridSearchRequest
   */
  semanticWeight?: number;
  /**
   * Weight for syntax results
   * @type {number}
   * @memberof HybridSearchRequest
   */
  syntaxWeight?: number;
  /**
   * Minimum similarity score
   * @type {number}
   * @memberof HybridSearchRequest
   */
  similarityThreshold?: number;
}

/**
 * Check if a given object implements the HybridSearchRequest interface.
 */
export function instanceOfHybridSearchRequest(value: object): value is HybridSearchRequest {
  if (!("query" in value) || value["query"] === undefined) return false;
  return true;
}

export function HybridSearchRequestFromJSON(json: any): HybridSearchRequest {
  return HybridSearchRequestFromJSONTyped(json, false);
}

export function HybridSearchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): HybridSearchRequest {
  if (json == null) {
    return json;
  }
  return {
    query: json["query"],
    maxResults: json["max_results"] == null ? undefined : json["max_results"],
    fileTypes: json["file_types"] == null ? undefined : json["file_types"],
    directories: json["directories"] == null ? undefined : json["directories"],
    caseSensitive: json["case_sensitive"] == null ? undefined : json["case_sensitive"],
    wholeWord: json["whole_word"] == null ? undefined : json["whole_word"],
    contextLines: json["context_lines"] == null ? undefined : json["context_lines"],
    semanticWeight: json["semantic_weight"] == null ? undefined : json["semantic_weight"],
    syntaxWeight: json["syntax_weight"] == null ? undefined : json["syntax_weight"],
    similarityThreshold: json["similarity_threshold"] == null ? undefined : json["similarity_threshold"],
  };
}

export function HybridSearchRequestToJSON(json: any): HybridSearchRequest {
  return HybridSearchRequestToJSONTyped(json, false);
}

export function HybridSearchRequestToJSONTyped(
  value?: HybridSearchRequest | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    query: value["query"],
    max_results: value["maxResults"],
    file_types: value["fileTypes"],
    directories: value["directories"],
    case_sensitive: value["caseSensitive"],
    whole_word: value["wholeWord"],
    context_lines: value["contextLines"],
    semantic_weight: value["semanticWeight"],
    syntax_weight: value["syntaxWeight"],
    similarity_threshold: value["similarityThreshold"],
  };
}
