/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MaxTokens } from './MaxTokens';
import {
    MaxTokensFromJSON,
    MaxTokensFromJSONTyped,
    MaxTokensToJSON,
    MaxTokensToJSONTyped,
} from './MaxTokens';
import type { Model } from './Model';
import {
    ModelFromJSON,
    ModelFromJSONTyped,
    ModelToJSON,
    ModelToJSONTyped,
} from './Model';
import type { SystemPrompt } from './SystemPrompt';
import {
    SystemPromptFromJSON,
    SystemPromptFromJSONTyped,
    SystemPromptToJSON,
    SystemPromptToJSONTyped,
} from './SystemPrompt';

/**
 * Secure chat request model.
 * @export
 * @interface SecureChatRequest
 */
export interface SecureChatRequest {
    [key: string]: any | any;
    /**
     * Chat message
     * @type {string}
     * @memberof SecureChatRequest
     */
    message: string;
    /**
     * 
     * @type {Model}
     * @memberof SecureChatRequest
     */
    model?: Model;
    /**
     * 
     * @type {SystemPrompt}
     * @memberof SecureChatRequest
     */
    systemPrompt?: SystemPrompt;
    /**
     * Temperature
     * @type {number}
     * @memberof SecureChatRequest
     */
    temperature?: number;
    /**
     * 
     * @type {MaxTokens}
     * @memberof SecureChatRequest
     */
    maxTokens?: MaxTokens;
}

/**
 * Check if a given object implements the SecureChatRequest interface.
 */
export function instanceOfSecureChatRequest(value: object): value is SecureChatRequest {
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function SecureChatRequestFromJSON(json: any): SecureChatRequest {
    return SecureChatRequestFromJSONTyped(json, false);
}

export function SecureChatRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SecureChatRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'message': json['message'],
        'model': json['model'] == null ? undefined : ModelFromJSON(json['model']),
        'systemPrompt': json['system_prompt'] == null ? undefined : SystemPromptFromJSON(json['system_prompt']),
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'maxTokens': json['max_tokens'] == null ? undefined : MaxTokensFromJSON(json['max_tokens']),
    };
}

export function SecureChatRequestToJSON(json: any): SecureChatRequest {
    return SecureChatRequestToJSONTyped(json, false);
}

export function SecureChatRequestToJSONTyped(value?: SecureChatRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'message': value['message'],
        'model': ModelToJSON(value['model']),
        'system_prompt': SystemPromptToJSON(value['systemPrompt']),
        'temperature': value['temperature'],
        'max_tokens': MaxTokensToJSON(value['maxTokens']),
    };
}

