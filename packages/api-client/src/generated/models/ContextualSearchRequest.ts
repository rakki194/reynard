/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Request model for contextual search.
 * @export
 * @interface ContextualSearchRequest
 */
export interface ContextualSearchRequest {
    /**
     * Search query
     * @type {string}
     * @memberof ContextualSearchRequest
     */
    query: string;
    /**
     * 
     * @type {object}
     * @memberof ContextualSearchRequest
     */
    context?: object | null;
    /**
     * Maximum number of results to return
     * @type {number}
     * @memberof ContextualSearchRequest
     */
    maxResults?: number;
}

/**
 * Check if a given object implements the ContextualSearchRequest interface.
 */
export function instanceOfContextualSearchRequest(value: object): value is ContextualSearchRequest {
    if (!('query' in value) || value['query'] === undefined) return false;
    return true;
}

export function ContextualSearchRequestFromJSON(json: any): ContextualSearchRequest {
    return ContextualSearchRequestFromJSONTyped(json, false);
}

export function ContextualSearchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContextualSearchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'query': json['query'],
        'context': json['context'] == null ? undefined : json['context'],
        'maxResults': json['max_results'] == null ? undefined : json['max_results'],
    };
}

export function ContextualSearchRequestToJSON(json: any): ContextualSearchRequest {
    return ContextualSearchRequestToJSONTyped(json, false);
}

export function ContextualSearchRequestToJSONTyped(value?: ContextualSearchRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'query': value['query'],
        'context': value['context'],
        'max_results': value['maxResults'],
    };
}

