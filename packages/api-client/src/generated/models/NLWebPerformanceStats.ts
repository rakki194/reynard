/* tslint:disable */
/* eslint-disable */
/**
 * Reynard API
 * Secure API backend for Reynard applications
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Performance statistics for NLWeb service.
 * @export
 * @interface NLWebPerformanceStats
 */
export interface NLWebPerformanceStats {
  /**
   * Total number of requests processed
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  totalRequests?: number;
  /**
   * Number of successful requests
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  successfulRequests?: number;
  /**
   * Number of failed requests
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  failedRequests?: number;
  /**
   * Average processing time in milliseconds
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  avgProcessingTimeMs?: number;
  /**
   * 95th percentile processing time
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  p95ProcessingTimeMs?: number;
  /**
   * 99th percentile processing time
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  p99ProcessingTimeMs?: number;
  /**
   * Cache hit rate percentage
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  cacheHitRate?: number;
  /**
   * Number of cache hits
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  cacheHits?: number;
  /**
   * Number of cache misses
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  cacheMisses?: number;
  /**
   * Current cache size
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  cacheSize?: number;
  /**
   * Maximum cache size
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  maxCacheSize?: number;
  /**
   * Number of rate limit hits
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  rateLimitHits?: number;
  /**
   * Number of stale responses served
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  staleServedCount?: number;
  /**
   * Number of degradation events
   * @type {number}
   * @memberof NLWebPerformanceStats
   */
  degradationEvents?: number;
}

/**
 * Check if a given object implements the NLWebPerformanceStats interface.
 */
export function instanceOfNLWebPerformanceStats(
  value: object,
): value is NLWebPerformanceStats {
  return true;
}

export function NLWebPerformanceStatsFromJSON(
  json: any,
): NLWebPerformanceStats {
  return NLWebPerformanceStatsFromJSONTyped(json, false);
}

export function NLWebPerformanceStatsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): NLWebPerformanceStats {
  if (json == null) {
    return json;
  }
  return {
    totalRequests:
      json["total_requests"] == null ? undefined : json["total_requests"],
    successfulRequests:
      json["successful_requests"] == null
        ? undefined
        : json["successful_requests"],
    failedRequests:
      json["failed_requests"] == null ? undefined : json["failed_requests"],
    avgProcessingTimeMs:
      json["avg_processing_time_ms"] == null
        ? undefined
        : json["avg_processing_time_ms"],
    p95ProcessingTimeMs:
      json["p95_processing_time_ms"] == null
        ? undefined
        : json["p95_processing_time_ms"],
    p99ProcessingTimeMs:
      json["p99_processing_time_ms"] == null
        ? undefined
        : json["p99_processing_time_ms"],
    cacheHitRate:
      json["cache_hit_rate"] == null ? undefined : json["cache_hit_rate"],
    cacheHits: json["cache_hits"] == null ? undefined : json["cache_hits"],
    cacheMisses:
      json["cache_misses"] == null ? undefined : json["cache_misses"],
    cacheSize: json["cache_size"] == null ? undefined : json["cache_size"],
    maxCacheSize:
      json["max_cache_size"] == null ? undefined : json["max_cache_size"],
    rateLimitHits:
      json["rate_limit_hits"] == null ? undefined : json["rate_limit_hits"],
    staleServedCount:
      json["stale_served_count"] == null
        ? undefined
        : json["stale_served_count"],
    degradationEvents:
      json["degradation_events"] == null
        ? undefined
        : json["degradation_events"],
  };
}

export function NLWebPerformanceStatsToJSON(json: any): NLWebPerformanceStats {
  return NLWebPerformanceStatsToJSONTyped(json, false);
}

export function NLWebPerformanceStatsToJSONTyped(
  value?: NLWebPerformanceStats | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    total_requests: value["totalRequests"],
    successful_requests: value["successfulRequests"],
    failed_requests: value["failedRequests"],
    avg_processing_time_ms: value["avgProcessingTimeMs"],
    p95_processing_time_ms: value["p95ProcessingTimeMs"],
    p99_processing_time_ms: value["p99ProcessingTimeMs"],
    cache_hit_rate: value["cacheHitRate"],
    cache_hits: value["cacheHits"],
    cache_misses: value["cacheMisses"],
    cache_size: value["cacheSize"],
    max_cache_size: value["maxCacheSize"],
    rate_limit_hits: value["rateLimitHits"],
    stale_served_count: value["staleServedCount"],
    degradation_events: value["degradationEvents"],
  };
}
