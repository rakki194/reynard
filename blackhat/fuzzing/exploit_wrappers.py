#!/usr/bin/env python3
"""
🐺 Exploit Wrappers for Penetration Testing
*snarls with predatory glee* Wrappers to make blackhat exploits compatible with e2e tests
"""

import asyncio
import json
from typing import List, Dict, Any
from dataclasses import dataclass

# Import the actual exploit classes
from .comprehensive_fuzzer import ComprehensiveFuzzer, FuzzResult
from .endpoint_fuzzer import EndpointFuzzer

@dataclass
class ExploitResult:
    """Standard result format for all exploits"""
    success: bool
    vulnerability_type: str
    description: str
    impact: str
    details: Dict[str, Any] = None

class ComprehensiveFuzzerExploit:
    """
    *alpha wolf stance* Wrapper for ComprehensiveFuzzer to make it compatible with e2e tests
    """
    
    def __init__(self, target_url: str = "http://localhost:8000"):
        self.target_url = target_url
        self.fuzzer = ComprehensiveFuzzer(target_url)
    
    def run_exploit(self) -> List[ExploitResult]:
        """
        *snarls with predatory glee* Run the comprehensive fuzzing exploit
        """
        try:
            # Run the async fuzzer
            results = asyncio.run(self._run_async_fuzzer())
            return results
        except Exception as e:
            return [ExploitResult(
                success=False,
                vulnerability_type="FuzzingError",
                description=f"Fuzzing failed: {str(e)}",
                impact="Low",
                details={"error": str(e)}
            )]
    
    async def _run_async_fuzzer(self) -> List[ExploitResult]:
        """Run the async fuzzer and convert results"""
        print("🐺 Starting MASSIVE COMPREHENSIVE FUZZING ATTACK...")
        print(f"🎯 Target: {self.target_url}")
        print("🚨 WARNING: This is a FULL-SCALE attack on ALL API endpoints!")
        print("🔥 ATTACKING 50+ ENDPOINTS WITH 1000+ PAYLOADS!")
        
        async with self.fuzzer as fuzzer:
            # Phase 1: Core API endpoints
            print("🔍 Phase 1: Core API endpoints...")
            print("  📍 Fuzzing root endpoint (/) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/", "GET", payload_count=25)
            print("  📍 Fuzzing health endpoint (/api/health) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/health", "GET", payload_count=25)
            print("  📍 Fuzzing detailed health endpoint (/api/health/detailed) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/health/detailed", "GET", payload_count=25)
            print("  📍 Fuzzing protected endpoint (/api/protected) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/protected", "GET", payload_count=25)
            print("  📍 Fuzzing config endpoint (/api/config) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/config", "GET", payload_count=25)
            print("  ✅ Core API endpoints fuzzing completed")
            
            # Phase 2: Authentication endpoints (Gatekeeper)
            print("🔍 Phase 2: Authentication endpoints...")
            print("  📍 Fuzzing login endpoint (/api/auth/login) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/auth/login", "POST", payload_count=50)
            print("  📍 Fuzzing register endpoint (/api/auth/register) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/auth/register", "POST", payload_count=50)
            print("  📍 Fuzzing refresh endpoint (/api/auth/refresh) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/auth/refresh", "POST", payload_count=25)
            print("  📍 Fuzzing logout endpoint (/api/auth/logout) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/auth/logout", "POST", payload_count=25)
            print("  📍 Fuzzing me endpoint (/api/auth/me) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/auth/me", "GET", payload_count=25)
            print("  ✅ Authentication endpoints fuzzing completed")
            
            # Phase 3: NLWeb endpoints
            print("🔍 Phase 3: NLWeb endpoints...")
            print("  📍 Fuzzing NLWeb suggest endpoint (/api/nlweb/suggest) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/nlweb/suggest", "POST", payload_count=50)
            print("  📍 Fuzzing NLWeb status endpoint (/api/nlweb/status) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/nlweb/status", "GET", payload_count=25)
            print("  📍 Fuzzing NLWeb health endpoint (/api/nlweb/health) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/nlweb/health", "GET", payload_count=25)
            print("  📍 Fuzzing NLWeb performance endpoint (/api/nlweb/performance) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/nlweb/performance", "GET", payload_count=25)
            print("  📍 Fuzzing NLWeb tools GET endpoint (/api/nlweb/tools) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/nlweb/tools", "GET", payload_count=25)
            print("  📍 Fuzzing NLWeb tools POST endpoint (/api/nlweb/tools) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/nlweb/tools", "POST", payload_count=50)
            print("  📍 Fuzzing NLWeb ask endpoint (/api/nlweb/ask) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/nlweb/ask", "POST", payload_count=50)
            print("  📍 Fuzzing NLWeb MCP endpoint (/api/nlweb/mcp) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/nlweb/mcp", "POST", payload_count=50)
            print("  📍 Fuzzing NLWeb sites endpoint (/api/nlweb/sites) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/nlweb/sites", "GET", payload_count=25)
            print("  ✅ NLWeb endpoints fuzzing completed")
            
            # Phase 4: Ollama endpoints
            print("🔍 Phase 4: Ollama endpoints...")
            print("  📍 Fuzzing Ollama chat endpoint (/api/ollama/chat) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/ollama/chat", "POST", payload_count=50)
            print("  📍 Fuzzing Ollama chat stream endpoint (/api/ollama/chat/stream) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/ollama/chat/stream", "POST", payload_count=50)
            print("  📍 Fuzzing Ollama assistant endpoint (/api/ollama/assistant) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/ollama/assistant", "POST", payload_count=50)
            print("  📍 Fuzzing Ollama assistant stream endpoint (/api/ollama/assistant/stream) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/ollama/assistant/stream", "POST", payload_count=50)
            print("  📍 Fuzzing Ollama models endpoint (/api/ollama/models) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/ollama/models", "GET", payload_count=25)
            print("  📍 Fuzzing Ollama config GET endpoint (/api/ollama/config) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/ollama/config", "GET", payload_count=25)
            print("  📍 Fuzzing Ollama config POST endpoint (/api/ollama/config) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/ollama/config", "POST", payload_count=25)
            print("  ✅ Ollama endpoints fuzzing completed")
            
            # Phase 5: ComfyUI endpoints
            print("🔍 Phase 5: ComfyUI endpoints...")
            print("  📍 Fuzzing ComfyUI health endpoint (/api/comfy/health) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/comfy/health", "GET", payload_count=25)
            print("  📍 Fuzzing ComfyUI queue endpoint (/api/comfy/queue) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/comfy/queue", "POST", payload_count=50)
            print("  📍 Fuzzing ComfyUI text2img endpoint (/api/comfy/text2img) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/comfy/text2img", "POST", payload_count=50)
            print("  📍 Fuzzing ComfyUI ingest endpoint (/api/comfy/ingest) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/comfy/ingest", "POST", payload_count=50)
            print("  📍 Fuzzing ComfyUI object-info endpoint (/api/comfy/object-info) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/comfy/object-info", "GET", payload_count=25)
            print("  📍 Fuzzing ComfyUI view endpoint (/api/comfy/view) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/comfy/view", "GET", payload_count=25)
            print("  ✅ ComfyUI endpoints fuzzing completed")
            
            # Phase 6: Summarization endpoints
            print("🔍 Phase 6: Summarization endpoints...")
            print("  📍 Fuzzing summarization endpoint (/api/summarization/summarize) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/summarization/summarize", "POST", payload_count=50)
            print("  📍 Fuzzing summarization stream endpoint (/api/summarization/summarize/stream) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/summarization/summarize/stream", "POST", payload_count=50)
            print("  📍 Fuzzing summarization batch endpoint (/api/summarization/summarize/batch) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/summarization/summarize/batch", "POST", payload_count=50)
            print("  📍 Fuzzing summarization models endpoint (/api/summarization/models) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/summarization/models", "GET", payload_count=25)
            print("  📍 Fuzzing summarization health endpoint (/api/summarization/health) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/summarization/health", "GET", payload_count=25)
            print("  📍 Fuzzing summarization config GET endpoint (/api/summarization/config) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/summarization/config", "GET", payload_count=25)
            print("  📍 Fuzzing summarization config POST endpoint (/api/summarization/config) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/summarization/config", "POST", payload_count=25)
            print("  ✅ Summarization endpoints fuzzing completed")
            
            # Phase 7: TTS endpoints
            print("🔍 Phase 7: TTS endpoints...")
            print("  📍 Fuzzing TTS synthesize endpoint (/api/tts/synthesize) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/tts/synthesize", "POST", payload_count=50)
            print("  📍 Fuzzing TTS synthesize batch endpoint (/api/tts/synthesize/batch) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/tts/synthesize/batch", "POST", payload_count=50)
            print("  📍 Fuzzing TTS health endpoint (/api/tts/health) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/tts/health", "GET", payload_count=25)
            print("  ✅ TTS endpoints fuzzing completed")
            
            # Phase 8: RAG endpoints
            print("🔍 Phase 8: RAG endpoints...")
            print("  📍 Fuzzing RAG query endpoint (/api/rag/query) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/rag/query", "POST", payload_count=50)
            print("  📍 Fuzzing RAG ingest endpoint (/api/rag/ingest) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/rag/ingest", "POST", payload_count=50)
            print("  📍 Fuzzing RAG health endpoint (/api/rag/health) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/rag/health", "GET", payload_count=25)
            print("  ✅ RAG endpoints fuzzing completed")
            
            # Phase 9: Caption endpoints
            print("🔍 Phase 9: Caption endpoints...")
            print("  📍 Fuzzing caption generators endpoint (/api/caption/generators) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/caption/generators", "GET", payload_count=25)
            print("  📍 Fuzzing caption generate endpoint (/api/caption/generate) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/caption/generate", "POST", payload_count=50)
            print("  ✅ Caption endpoints fuzzing completed")
            
            # Phase 10: Image utils endpoints
            print("🔍 Phase 10: Image utils endpoints...")
            print("  📍 Fuzzing image utils process endpoint (/api/image-utils/process) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/image-utils/process", "POST", payload_count=50)
            print("  📍 Fuzzing image utils health endpoint (/api/image-utils/health) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/image-utils/health", "GET", payload_count=25)
            print("  ✅ Image utils endpoints fuzzing completed")
            
            # Phase 11: Executor endpoints
            print("🔍 Phase 11: Executor endpoints...")
            print("  📍 Fuzzing executor execute endpoint (/api/executor/execute) with 50 payloads...")
            await fuzzer.fuzz_endpoint("/api/executor/execute", "POST", payload_count=50)
            print("  📍 Fuzzing executor health endpoint (/api/executor/health) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/executor/health", "GET", payload_count=25)
            print("  ✅ Executor endpoints fuzzing completed")
            
            # Phase 12: Admin endpoints
            print("🔍 Phase 12: Admin endpoints...")
            print("  📍 Fuzzing admin Ollama stats endpoint (/api/admin/ollama/stats) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/admin/ollama/stats", "GET", payload_count=25)
            print("  📍 Fuzzing admin Ollama health endpoint (/api/admin/ollama/health) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/admin/ollama/health", "GET", payload_count=25)
            print("  📍 Fuzzing admin diffusion stats endpoint (/api/admin/diffusion/stats) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/admin/diffusion/stats", "GET", payload_count=25)
            print("  📍 Fuzzing admin diffusion health endpoint (/api/admin/diffusion/health) with 25 payloads...")
            await fuzzer.fuzz_endpoint("/api/admin/diffusion/health", "GET", payload_count=25)
            print("  ✅ Admin endpoints fuzzing completed")
            
            print(f"📊 Total requests made: {len(fuzzer.results)}")
            print("🔍 Analyzing results for vulnerabilities...")
            
            # Convert FuzzResult to ExploitResult
            exploit_results = []
            vulnerability_count = 0

            for i, result in enumerate(fuzzer.results):
                print(f"  🔍 Analyzing request {i+1}/{len(fuzzer.results)}: {result.method} {result.url}")
                print(f"    📊 Status: {result.status_code}, Time: {result.response_time:.2f}ms")
                
                # Show the actual payload that was sent
                if hasattr(result, 'payload') and result.payload:
                    print(f"    🎯 Payload sent: {str(result.payload)[:100]}{'...' if len(str(result.payload)) > 100 else ''}")
                
                # Show the response body if available
                if hasattr(result, 'response_body') and result.response_body:
                    response_preview = str(result.response_body)[:200]
                    print(f"    📥 Response body: {response_preview}{'...' if len(str(result.response_body)) > 200 else ''}")
                elif hasattr(result, 'response_text') and result.response_text:
                    response_preview = str(result.response_text)[:200]
                    print(f"    📥 Response text: {response_preview}{'...' if len(str(result.response_text)) > 200 else ''}")
                
                # Show headers if available
                if hasattr(result, 'response_headers') and result.response_headers:
                    print(f"    📋 Response headers: {dict(result.response_headers)}")
                
                # Show error details if any
                if hasattr(result, 'error') and result.error:
                    print(f"    ❌ Error details: {result.error}")
                
                # Show request headers if available
                if hasattr(result, 'request_headers') and result.request_headers:
                    print(f"    📤 Request headers: {dict(result.request_headers)}")

                if result.vulnerability_detected:
                    vulnerability_count += 1
                    print(f"    ⚠️  VULNERABILITY DETECTED: {result.vulnerability_type}")
                    exploit_results.append(ExploitResult(
                        success=True,
                        vulnerability_type=result.vulnerability_type or "Unknown",
                        description=f"Vulnerability detected in {result.url}",
                        impact="Medium",
                        details={
                            "url": result.url,
                            "method": result.method,
                            "status_code": result.status_code,
                            "response_time": result.response_time,
                            "error": result.error,
                            "payload": str(result.payload) if hasattr(result, 'payload') else None,
                            "response_body": str(result.response_body) if hasattr(result, 'response_body') else None,
                            "response_headers": dict(result.response_headers) if hasattr(result, 'response_headers') else None
                        }
                    ))
                else:
                    print(f"    ✅ No vulnerability detected")
                
                print()  # Add spacing between requests
            
            print(f"📊 Vulnerability Analysis Complete:")
            print(f"  🎯 Total requests: {len(fuzzer.results)}")
            print(f"  ⚠️  Vulnerabilities found: {vulnerability_count}")
            
            # If no vulnerabilities found, return a success result
            if not exploit_results:
                print("🛡️  Target appears to be secure - no vulnerabilities detected!")
                exploit_results.append(ExploitResult(
                    success=True,
                    vulnerability_type="NoVulnerabilities",
                    description="Fuzzing completed - no vulnerabilities detected",
                    impact="None",
                    details={"total_requests": len(fuzzer.results)}
                ))
            else:
                print(f"🚨 {vulnerability_count} vulnerabilities found - target may be compromised!")
            
            print("🐺 Fuzzing attack completed successfully")
            return exploit_results

class EndpointFuzzerExploit:
    """
    *alpha wolf stance* Wrapper for EndpointFuzzer to make it compatible with e2e tests
    """
    
    def __init__(self, target_url: str = "http://localhost:8000"):
        self.target_url = target_url
        self.fuzzer = EndpointFuzzer(target_url)
    
    def run_exploit(self, quick_test: bool = False) -> List[ExploitResult]:
        """
        *snarls with predatory glee* Run the endpoint fuzzing exploit
        """
        try:
            # Run the async fuzzer
            results = asyncio.run(self._run_async_endpoint_fuzzer(quick_test))
            return results
        except Exception as e:
            return [ExploitResult(
                success=False,
                vulnerability_type="FuzzingError",
                description=f"Endpoint fuzzing failed: {str(e)}",
                impact="Low",
                details={"error": str(e)}
            )]
    
    async def _run_async_endpoint_fuzzer(self, quick_test: bool = False) -> List[ExploitResult]:
        """Run the async endpoint fuzzer and convert results"""
        if quick_test:
            print("🐺 Starting QUICK SPECIALIZED FUZZING ATTACK...")
            print(f"🎯 Target: {self.target_url}")
            print("⚡ QUICK MODE: Testing only authentication endpoints for fast feedback!")
        else:
            print("🐺 Starting SPECIALIZED ENDPOINT FUZZING ATTACK...")
            print(f"🎯 Target: {self.target_url}")
            print("🚨 WARNING: This is a TARGETED attack on specific endpoint types!")
            print("🔥 ATTACKING AUTH, FILE UPLOAD, SEARCH, JSON, AND HEADER ENDPOINTS!")
        
        async with self.fuzzer as fuzzer:
            all_results = []
            
            # Phase 1: Authentication endpoint fuzzing (always run)
            print("🔍 Phase 1: Authentication endpoint fuzzing...")
            print("  📍 Fuzzing login endpoint with specialized auth bypass attacks...")
            auth_results = await fuzzer.fuzz_login_endpoint("/api/auth/login")
            all_results.extend(auth_results)
            print(f"  ✅ Authentication fuzzing completed - {len(auth_results)} requests made")
            
            if quick_test:
                print("⚡ Quick test completed - only authentication endpoints tested")
                return self._analyze_results(all_results)
            
            # Phase 2: File upload endpoint fuzzing
            print("🔍 Phase 2: File upload endpoint fuzzing...")
            print("  📍 Fuzzing file upload with malicious files and path traversal...")
            file_results = await fuzzer.fuzz_file_upload_endpoint("/api/files/upload")
            all_results.extend(file_results)
            print(f"  ✅ File upload fuzzing completed - {len(file_results)} requests made")
            
            # Phase 3: Search endpoint fuzzing
            print("🔍 Phase 3: Search endpoint fuzzing...")
            print("  📍 Fuzzing search with injection attacks...")
            search_results = await fuzzer.fuzz_search_endpoint("/api/search")
            all_results.extend(search_results)
            print(f"  ✅ Search fuzzing completed - {len(search_results)} requests made")
            
            # Phase 4: JSON endpoint fuzzing
            print("🔍 Phase 4: JSON endpoint fuzzing...")
            print("  📍 Fuzzing JSON endpoints with malformed payloads...")
            json_results = await fuzzer.fuzz_json_endpoint("/api/auth/login", "POST")
            all_results.extend(json_results)
            print(f"  ✅ JSON fuzzing completed - {len(json_results)} requests made")
            
            # Phase 5: Header injection fuzzing
            print("🔍 Phase 5: Header injection fuzzing...")
            print("  📍 Fuzzing endpoints with malicious headers...")
            header_results = await fuzzer.fuzz_headers_endpoint("/api/protected", "GET")
            all_results.extend(header_results)
            print(f"  ✅ Header fuzzing completed - {len(header_results)} requests made")
            
            print(f"📊 Total requests made: {len(all_results)}")
            print("🔍 Analyzing results for vulnerabilities...")
            
            # Convert FuzzResult to ExploitResult
            exploit_results = []
            vulnerability_count = 0

            for i, result in enumerate(all_results):
                print(f"  🔍 Analyzing request {i+1}/{len(all_results)}: {result.method} {result.url}")
                print(f"    📊 Status: {result.status_code}, Time: {result.response_time:.2f}ms")
                
                # Show the actual payload that was sent
                if hasattr(result, 'payload') and result.payload:
                    print(f"    🎯 Payload sent: {str(result.payload)[:100]}{'...' if len(str(result.payload)) > 100 else ''}")
                
                # Show the response body if available
                if hasattr(result, 'response_body') and result.response_body:
                    response_preview = str(result.response_body)[:200]
                    print(f"    📥 Response body: {response_preview}{'...' if len(str(result.response_body)) > 200 else ''}")
                elif hasattr(result, 'response_text') and result.response_text:
                    response_preview = str(result.response_text)[:200]
                    print(f"    📥 Response text: {response_preview}{'...' if len(str(result.response_text)) > 200 else ''}")
                
                # Show headers if available
                if hasattr(result, 'response_headers') and result.response_headers:
                    print(f"    📋 Response headers: {dict(result.response_headers)}")
                
                # Show error details if any
                if hasattr(result, 'error') and result.error:
                    print(f"    ❌ Error details: {result.error}")
                
                # Show request headers if available
                if hasattr(result, 'request_headers') and result.request_headers:
                    print(f"    📤 Request headers: {dict(result.request_headers)}")

                if result.vulnerability_detected:
                    vulnerability_count += 1
                    print(f"    ⚠️  VULNERABILITY DETECTED: {result.vulnerability_type}")
                    exploit_results.append(ExploitResult(
                        success=True,
                        vulnerability_type=result.vulnerability_type or "Unknown",
                        description=f"Vulnerability detected in {result.url}",
                        impact="Medium",
                        details={
                            "url": result.url,
                            "method": result.method,
                            "status_code": result.status_code,
                            "response_time": result.response_time,
                            "error": result.error,
                            "payload": str(result.payload) if hasattr(result, 'payload') else None,
                            "response_body": str(result.response_body) if hasattr(result, 'response_body') else None,
                            "response_headers": dict(result.response_headers) if hasattr(result, 'response_headers') else None
                        }
                    ))
                else:
                    print(f"    ✅ No vulnerability detected")
                
                print()  # Add spacing between requests
            
            print(f"📊 Vulnerability Analysis Complete:")
            print(f"  🎯 Total requests: {len(all_results)}")
            print(f"  ⚠️  Vulnerabilities found: {vulnerability_count}")
            
            # If no vulnerabilities found, return a success result
            if not exploit_results:
                print("🛡️  Target appears to be secure - no vulnerabilities detected!")
                exploit_results.append(ExploitResult(
                    success=True,
                    vulnerability_type="NoVulnerabilities",
                    description="Endpoint fuzzing completed - no vulnerabilities detected",
                    impact="None",
                    details={"total_requests": len(all_results)}
                ))
            else:
                print(f"🚨 {vulnerability_count} vulnerabilities found - target may be compromised!")
            
            print("🐺 Endpoint fuzzing attack completed successfully")
            return exploit_results
    
    def _analyze_results(self, all_results: List) -> List[ExploitResult]:
        """Analyze fuzzing results and convert to ExploitResult format"""
        print(f"📊 Total requests made: {len(all_results)}")
        print("🔍 Analyzing results for vulnerabilities...")
        
        # Convert FuzzResult to ExploitResult
        exploit_results = []
        vulnerability_count = 0

        for i, result in enumerate(all_results):
            print(f"  🔍 Analyzing request {i+1}/{len(all_results)}: {result.method} {result.url}")
            print(f"    📊 Status: {result.status_code}, Time: {result.response_time:.2f}ms")
            
            # Show the actual payload that was sent
            if hasattr(result, 'payload') and result.payload:
                print(f"    🎯 Payload sent: {str(result.payload)[:100]}{'...' if len(str(result.payload)) > 100 else ''}")
            
            # Show the response body if available
            if hasattr(result, 'response_body') and result.response_body:
                response_preview = str(result.response_body)[:200]
                print(f"    📥 Response body: {response_preview}{'...' if len(str(result.response_body)) > 200 else ''}")
            elif hasattr(result, 'response_text') and result.response_text:
                response_preview = str(result.response_text)[:200]
                print(f"    📥 Response text: {response_preview}{'...' if len(str(result.response_text)) > 200 else ''}")
            
            # Show headers if available
            if hasattr(result, 'response_headers') and result.response_headers:
                print(f"    📋 Response headers: {dict(result.response_headers)}")
            
            # Show error details if any
            if hasattr(result, 'error') and result.error:
                print(f"    ❌ Error details: {result.error}")
            
            # Show request headers if available
            if hasattr(result, 'request_headers') and result.request_headers:
                print(f"    📤 Request headers: {dict(result.request_headers)}")

            if result.vulnerability_detected:
                vulnerability_count += 1
                print(f"    ⚠️  VULNERABILITY DETECTED: {result.vulnerability_type}")
                exploit_results.append(ExploitResult(
                    success=True,
                    vulnerability_type=result.vulnerability_type or "Unknown",
                    description=f"Vulnerability detected in {result.url}",
                    impact="Medium",
                    details={
                        "url": result.url,
                        "method": result.method,
                        "status_code": result.status_code,
                        "response_time": result.response_time,
                        "error": result.error,
                        "payload": str(result.payload) if hasattr(result, 'payload') else None,
                        "response_body": str(result.response_body) if hasattr(result, 'response_body') else None,
                        "response_headers": dict(result.response_headers) if hasattr(result, 'response_headers') else None
                    }
                ))
            else:
                print(f"    ✅ No vulnerability detected")
            
            print()  # Add spacing between requests
        
        print(f"📊 Vulnerability Analysis Complete:")
        print(f"  🎯 Total requests: {len(all_results)}")
        print(f"  ⚠️  Vulnerabilities found: {vulnerability_count}")
        
        # If no vulnerabilities found, return a success result
        if not exploit_results:
            print("🛡️  Target appears to be secure - no vulnerabilities detected!")
            exploit_results.append(ExploitResult(
                success=True,
                vulnerability_type="NoVulnerabilities",
                description="Endpoint fuzzing completed - no vulnerabilities detected",
                impact="None",
                details={"total_requests": len(all_results)}
            ))
        else:
            print(f"🚨 {vulnerability_count} vulnerabilities found - target may be compromised!")
        
        return exploit_results
