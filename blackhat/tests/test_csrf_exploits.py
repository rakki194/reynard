"""
ü¶¶ CSRF EXPLOITS TEST SUITE

*splashes with enthusiasm* Testing our CSRF security exploits to ensure they can
properly identify CSRF vulnerabilities and security issues!
"""

import pytest
import asyncio
import time
from unittest.mock import Mock, patch, AsyncMock
from .test_base import BlackhatTestBase, SecurityTestResult

from ..csrf_exploits.csrf_attacks import CSRFAttacker

class TestCSRFExploits(BlackhatTestBase):
    """
    *otter curiosity* Test suite for CSRF security exploits
    """
    
    async def test_csrf_attack_detection(self):
        """Test that CSRF attack detection works correctly"""
        print("\nü¶¶ Testing CSRF Attack Detection...")
        
        start_time = time.time()
        
        try:
            # Test the CSRF attack exploit
            exploit = CSRFAttacker(self.base_url)
            
            # Mock the exploit to avoid actual network calls
            with patch.object(exploit, '_test_csrf_protection', return_value=True):
                with patch.object(exploit, '_test_token_validation', return_value=False):
                    results = exploit.run_exploit()
            
            response_time = time.time() - start_time
            
            # Analyze results
            vulnerability_found = any(result.success for result in results)
            test_result = SecurityTestResult(
                test_name="CSRF Attack Detection",
                success=True,
                vulnerability_found=vulnerability_found,
                expected_vulnerability=False,  # Our backend should be secure
                details=f"Found {len([r for r in results if r.success])} CSRF vulnerabilities",
                response_time=response_time
            )
            
            self.log_test_result(test_result)
            
            if vulnerability_found:
                print(f"    ‚ö†Ô∏è Found unexpected CSRF vulnerabilities")
                for result in results:
                    if result.success:
                        print(f"        - {result.vulnerability_type}: {result.description}")
            else:
                print(f"    ‚úÖ No CSRF vulnerabilities found (secure)")
            
        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="CSRF Attack Detection",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e)
            )
            self.log_test_result(test_result)
            raise

# Pytest test functions
@pytest.mark.asyncio
async def test_csrf_attack():
    """Test CSRF attack detection"""
    async with TestCSRFExploits() as tester:
        await tester.test_csrf_attack_detection()

if __name__ == "__main__":
    # Run tests directly
    async def main():
        async with TestCSRFExploits() as tester:
            await tester.test_csrf_attack_detection()
            
            # Print summary
            summary = tester.get_test_summary()
            print(f"\nü¶¶ CSRF Exploits Test Summary:")
            print(f"    Total Tests: {summary['total_tests']}")
            print(f"    Passed: {summary['passed_tests']}")
            print(f"    Failed: {summary['failed_tests']}")
            print(f"    Success Rate: {summary['success_rate']:.1f}%")
            print(f"    Vulnerabilities Found: {summary['vulnerabilities_found']}")
    
    asyncio.run(main())
