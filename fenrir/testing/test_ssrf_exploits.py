"""ü¶¶ SSRF EXPLOITS TEST SUITE

*splashes with enthusiasm* Testing our SSRF security exploits to ensure they can
properly identify SSRF vulnerabilities and security issues!
"""

import asyncio
import time
from unittest.mock import patch

import pytest

from ..ssrf_exploits.ssrf_attacks import SSRFAttacker
from .test_base import FenrirTestBase, SecurityTestResult


class TestSSRFExploits(FenrirTestBase):
    """*otter curiosity* Test suite for SSRF security exploits
    """

    async def test_ssrf_attack_detection(self):
        """Test that SSRF attack detection works correctly"""
        print("\nü¶¶ Testing SSRF Attack Detection...")

        start_time = time.time()

        try:
            # Test the SSRF attack exploit
            exploit = SSRFAttacker(self.base_url)

            # Mock the exploit to avoid actual network calls
            with patch.object(exploit, "_test_internal_access", return_value=False):
                with patch.object(exploit, "_test_cloud_metadata", return_value=False):
                    results = exploit.run_exploit()

            response_time = time.time() - start_time

            # Analyze results
            vulnerability_found = any(result.success for result in results)
            test_result = SecurityTestResult(
                test_name="SSRF Attack Detection",
                success=True,
                vulnerability_found=vulnerability_found,
                expected_vulnerability=False,  # Our backend should be secure
                details=f"Found {len([r for r in results if r.success])} SSRF vulnerabilities",
                response_time=response_time,
            )

            self.log_test_result(test_result)

            if vulnerability_found:
                print("    ‚ö†Ô∏è Found unexpected SSRF vulnerabilities")
                for result in results:
                    if result.success:
                        print(
                            f"        - {result.vulnerability_type}: {result.description}",
                        )
            else:
                print("    ‚úÖ No SSRF vulnerabilities found (secure)")

        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="SSRF Attack Detection",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e),
            )
            self.log_test_result(test_result)
            raise


# Pytest test functions
@pytest.mark.asyncio
async def test_ssrf_attack():
    """Test SSRF attack detection"""
    async with TestSSRFExploits() as tester:
        await tester.test_ssrf_attack_detection()


if __name__ == "__main__":
    # Run tests directly
    async def main():
        async with TestSSRFExploits() as tester:
            await tester.test_ssrf_attack_detection()

            # Print summary
            summary = tester.get_test_summary()
            print("\nü¶¶ SSRF Exploits Test Summary:")
            print(f"    Total Tests: {summary['total_tests']}")
            print(f"    Passed: {summary['passed_tests']}")
            print(f"    Failed: {summary['failed_tests']}")
            print(f"    Success Rate: {summary['success_rate']:.1f}%")
            print(f"    Vulnerabilities Found: {summary['vulnerabilities_found']}")

    asyncio.run(main())
