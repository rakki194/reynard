"""ðŸ¦Š LLM EXPLOITS CORE TEST SUITE

*whiskers twitch with AI cunning* Tests for core LLM exploit modules!
"""


import pytest

from ..exploits.llm_exploits.advanced_ai_exploits.creative_jailbreak_exploits import (
    CreativeJailbreakExploiter,
)
from ..exploits.llm_exploits.advanced_ai_exploits.property_inference_exploits import (
    PropertyInferenceConfig,
    PROWLPropertyInferenceExploiter,
)

# Core LLM exploit imports
from ..exploits.llm_exploits.llm_exploitation_orchestrator import (
    LLMExploitationConfig,
    LLMExploitationOrchestrator,
)


class TestLLMExploitationOrchestrator:
    """Test LLMExploitationOrchestrator class"""

    def test_orchestrator_initialization(self):
        """Test LLMExploitationOrchestrator initialization"""
        config = LLMExploitationConfig(target_url="http://localhost:8000")
        orchestrator = LLMExploitationOrchestrator(config)
        assert hasattr(orchestrator, "config")
        assert hasattr(orchestrator, "start_time")
        assert hasattr(orchestrator, "all_results")

    def test_add_exploit(self):
        """Test adding exploits to orchestrator"""
        config = LLMExploitationConfig(target_url="http://localhost:8000")
        orchestrator = LLMExploitationOrchestrator(config)
        # Test that orchestrator has the expected attributes
        assert hasattr(orchestrator, "config")
        assert hasattr(orchestrator, "all_results")

    def test_add_target(self):
        """Test adding targets to orchestrator"""
        config = LLMExploitationConfig(target_url="http://localhost:8000")
        orchestrator = LLMExploitationOrchestrator(config)
        # Test that orchestrator has the expected attributes
        assert hasattr(orchestrator, "config")
        assert hasattr(orchestrator, "all_results")

    @pytest.mark.asyncio
    async def test_run_exploitation(self):
        """Test running exploitation"""
        config = LLMExploitationConfig(target_url="http://localhost:8000")
        orchestrator = LLMExploitationOrchestrator(config)

        # Test that orchestrator has the expected attributes
        assert hasattr(orchestrator, "config")
        assert hasattr(orchestrator, "all_results")

    def test_get_exploitation_report(self):
        """Test getting exploitation report"""
        config = LLMExploitationConfig(target_url="http://localhost:8000")
        orchestrator = LLMExploitationOrchestrator(config)

        # Test that orchestrator has the expected attributes
        assert hasattr(orchestrator, "config")
        assert hasattr(orchestrator, "all_results")


class TestPROWLPropertyInferenceExploiter:
    """Test PROWLPropertyInferenceExploiter class"""

    def test_property_inference_initialization(self):
        """Test PROWLPropertyInferenceExploiter initialization"""
        config = PropertyInferenceConfig(target_url="http://localhost:8000")
        exploit = PROWLPropertyInferenceExploiter(config)
        assert hasattr(exploit, "config")
        assert hasattr(exploit, "session")

    def test_generate_inference_prompts(self):
        """Test generating inference prompts"""
        config = PropertyInferenceConfig(target_url="http://localhost:8000")
        exploit = PROWLPropertyInferenceExploiter(config)
        # Test that exploit has the expected attributes
        assert hasattr(exploit, "config")
        assert hasattr(exploit, "session")

    def test_analyze_response_for_properties(self):
        """Test analyzing response for properties"""
        config = PropertyInferenceConfig(target_url="http://localhost:8000")
        exploit = PROWLPropertyInferenceExploiter(config)
        # Test that exploit has the expected attributes
        assert hasattr(exploit, "config")
        assert hasattr(exploit, "session")

    @pytest.mark.asyncio
    async def test_run_inference_attack(self):
        """Test running inference attack"""
        config = PropertyInferenceConfig(target_url="http://localhost:8000")
        exploit = PROWLPropertyInferenceExploiter(config)
        # Test that exploit has the expected attributes
        assert hasattr(exploit, "config")
        assert hasattr(exploit, "session")


class TestCreativeJailbreakExploiter:
    """Test CreativeJailbreakExploiter class"""

    def test_creative_jailbreak_initialization(self):
        """Test CreativeJailbreakExploiter initialization"""
        exploit = CreativeJailbreakExploiter()
        assert hasattr(exploit, "base_url")
        assert hasattr(exploit, "session")
        assert hasattr(exploit, "exploit_results")
        assert hasattr(exploit, "stats")
        # Test that exploit has the expected methods
        assert hasattr(exploit, "get_creative_role_playing_payloads")

    def test_generate_jailbreak_prompts(self):
        """Test generating jailbreak prompts"""
        exploit = CreativeJailbreakExploiter()
        # Test that exploit has the expected methods
        assert hasattr(exploit, "get_creative_role_playing_payloads")
        assert hasattr(exploit, "get_context_switching_payloads")
        assert hasattr(exploit, "get_multi_turn_jailbreak_payloads")

    def test_analyze_response_for_jailbreak(self):
        """Test analyzing response for jailbreak success"""
        exploit = CreativeJailbreakExploiter()
        # Test that exploit has the expected methods
        assert hasattr(exploit, "get_creative_role_playing_payloads")
        assert hasattr(exploit, "get_context_switching_payloads")
        assert hasattr(exploit, "get_multi_turn_jailbreak_payloads")

    @pytest.mark.asyncio
    async def test_run_jailbreak_attack(self):
        """Test running jailbreak attack"""
        exploit = CreativeJailbreakExploiter()
        # Test that exploit has the expected methods
        assert hasattr(exploit, "get_creative_role_playing_payloads")
        assert hasattr(exploit, "get_context_switching_payloads")
        assert hasattr(exploit, "get_multi_turn_jailbreak_payloads")


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
