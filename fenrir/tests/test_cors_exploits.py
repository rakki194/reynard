"""
🦦 CORS EXPLOITS TEST SUITE

*splashes with enthusiasm* Testing our CORS misconfiguration exploits to ensure they can
properly identify CORS vulnerabilities and security issues!
"""

import pytest
import asyncio
import time
from unittest.mock import Mock, patch
from .test_base import FenrirTestBase, SecurityTestResult

from ..cors_exploits.cors_misconfiguration import CorsMisconfigurationExploit

class TestCORSExploits(FenrirTestBase):
    """
    *otter curiosity* Test suite for CORS security exploits
    """
    
    async def test_cors_misconfiguration_detection(self):
        """Test that CORS misconfiguration detection works correctly"""
        print("\n🦦 Testing CORS Misconfiguration Detection...")
        
        start_time = time.time()
        
        try:
            # Test the CORS misconfiguration exploit
            exploit = CorsMisconfigurationExploit(self.base_url)
            results = exploit.run_exploit()
            
            response_time = time.time() - start_time
            
            # Analyze results
            vulnerability_found = any(result.success for result in results)
            test_result = SecurityTestResult(
                test_name="CORS Misconfiguration",
                success=True,
                vulnerability_found=vulnerability_found,
                expected_vulnerability=False,  # Our backend should be secure
                details=f"Found {len([r for r in results if r.success])} CORS vulnerabilities",
                response_time=response_time
            )
            
            self.log_test_result(test_result)
            
            # Verify that we didn't find unexpected vulnerabilities
            if vulnerability_found:
                print(f"    ⚠️ Found unexpected CORS misconfiguration vulnerabilities")
                for result in results:
                    if result.success:
                        print(f"        - {result.vulnerability_type}: {result.description}")
            else:
                print(f"    ✅ No CORS misconfiguration vulnerabilities found (secure)")
            
        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="CORS Misconfiguration",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e)
            )
            self.log_test_result(test_result)
            raise
    
    async def test_cors_headers_validation(self):
        """Test that CORS headers are properly configured"""
        print("\n🦦 Testing CORS Headers Validation...")
        
        start_time = time.time()
        
        try:
            # Test preflight request
            response = await self.make_request(
                "OPTIONS",
                "/api/auth/login",
                headers={
                    "Origin": "https://malicious-site.com",
                    "Access-Control-Request-Method": "POST",
                    "Access-Control-Request-Headers": "Content-Type"
                }
            )
            
            response_time = time.time() - start_time
            
            # Check CORS headers
            cors_headers = {
                "Access-Control-Allow-Origin": response.headers.get("Access-Control-Allow-Origin"),
                "Access-Control-Allow-Methods": response.headers.get("Access-Control-Allow-Methods"),
                "Access-Control-Allow-Headers": response.headers.get("Access-Control-Allow-Headers"),
                "Access-Control-Allow-Credentials": response.headers.get("Access-Control-Allow-Credentials")
            }
            
            # Check for wildcard origin (vulnerability)
            wildcard_origin = cors_headers["Access-Control-Allow-Origin"] == "*"
            credentials_with_wildcard = (
                cors_headers["Access-Control-Allow-Credentials"] == "true" and
                cors_headers["Access-Control-Allow-Origin"] == "*"
            )
            
            vulnerability_found = wildcard_origin or credentials_with_wildcard
            
            test_result = SecurityTestResult(
                test_name="CORS Headers Validation",
                success=True,
                vulnerability_found=vulnerability_found,
                expected_vulnerability=False,  # Our backend should be secure
                details=f"CORS headers: {cors_headers}",
                response_time=response_time,
                status_code=response.status_code
            )
            
            self.log_test_result(test_result)
            
            if vulnerability_found:
                print(f"    ⚠️ CORS misconfiguration detected:")
                if wildcard_origin:
                    print(f"        - Wildcard origin (*) detected")
                if credentials_with_wildcard:
                    print(f"        - Credentials allowed with wildcard origin")
            else:
                print(f"    ✅ CORS headers properly configured")
            
        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="CORS Headers Validation",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e)
            )
            self.log_test_result(test_result)
            raise
    
    async def test_cors_origin_validation(self):
        """Test that CORS origin validation works correctly"""
        print("\n🦦 Testing CORS Origin Validation...")
        
        start_time = time.time()
        
        try:
            # Test with malicious origin
            malicious_origins = [
                "https://malicious-site.com",
                "http://evil.com",
                "https://attacker.net",
                "null",
                "file://",
                "javascript:"
            ]
            
            vulnerabilities_found = 0
            
            for origin in malicious_origins:
                response = await self.make_request(
                    "GET",
                    "/api/auth/login",
                    headers={"Origin": origin}
                )
                
                # Check if the origin is reflected in the response
                allow_origin = response.headers.get("Access-Control-Allow-Origin")
                if allow_origin == origin or allow_origin == "*":
                    vulnerabilities_found += 1
                    print(f"        - Origin '{origin}' allowed: {allow_origin}")
            
            response_time = time.time() - start_time
            
            test_result = SecurityTestResult(
                test_name="CORS Origin Validation",
                success=True,
                vulnerability_found=vulnerabilities_found > 0,
                expected_vulnerability=False,  # Our backend should be secure
                details=f"Tested {len(malicious_origins)} malicious origins, {vulnerabilities_found} allowed",
                response_time=response_time
            )
            
            self.log_test_result(test_result)
            
            if vulnerabilities_found > 0:
                print(f"    ⚠️ {vulnerabilities_found} malicious origins were allowed")
            else:
                print(f"    ✅ All malicious origins properly rejected")
            
        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="CORS Origin Validation",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e)
            )
            self.log_test_result(test_result)
            raise
    
    async def test_cors_method_validation(self):
        """Test that CORS method validation works correctly"""
        print("\n🦦 Testing CORS Method Validation...")
        
        start_time = time.time()
        
        try:
            # Test with malicious methods
            malicious_methods = ["DELETE", "PUT", "PATCH", "TRACE", "CONNECT"]
            
            vulnerabilities_found = 0
            
            for method in malicious_methods:
                response = await self.make_request(
                    "OPTIONS",
                    "/api/auth/login",
                    headers={
                        "Origin": "https://malicious-site.com",
                        "Access-Control-Request-Method": method
                    }
                )
                
                # Check if the method is allowed
                allow_methods = response.headers.get("Access-Control-Allow-Methods", "")
                if method in allow_methods:
                    vulnerabilities_found += 1
                    print(f"        - Method '{method}' allowed: {allow_methods}")
            
            response_time = time.time() - start_time
            
            test_result = SecurityTestResult(
                test_name="CORS Method Validation",
                success=True,
                vulnerability_found=vulnerabilities_found > 0,
                expected_vulnerability=False,  # Our backend should be secure
                details=f"Tested {len(malicious_methods)} malicious methods, {vulnerabilities_found} allowed",
                response_time=response_time
            )
            
            self.log_test_result(test_result)
            
            if vulnerabilities_found > 0:
                print(f"    ⚠️ {vulnerabilities_found} malicious methods were allowed")
            else:
                print(f"    ✅ All malicious methods properly rejected")
            
        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="CORS Method Validation",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e)
            )
            self.log_test_result(test_result)
            raise

# Pytest test functions
@pytest.mark.asyncio
async def test_cors_misconfiguration():
    """Test CORS misconfiguration detection"""
    async with TestCORSExploits() as tester:
        await tester.test_cors_misconfiguration_detection()

@pytest.mark.asyncio
async def test_cors_headers():
    """Test CORS headers validation"""
    async with TestCORSExploits() as tester:
        await tester.test_cors_headers_validation()

@pytest.mark.asyncio
async def test_cors_origin():
    """Test CORS origin validation"""
    async with TestCORSExploits() as tester:
        await tester.test_cors_origin_validation()

@pytest.mark.asyncio
async def test_cors_method():
    """Test CORS method validation"""
    async with TestCORSExploits() as tester:
        await tester.test_cors_method_validation()

if __name__ == "__main__":
    # Run tests directly
    async def main():
        async with TestCORSExploits() as tester:
            await tester.test_cors_misconfiguration_detection()
            await tester.test_cors_headers_validation()
            await tester.test_cors_origin_validation()
            await tester.test_cors_method_validation()
            
            # Print summary
            summary = tester.get_test_summary()
            print(f"\n🦦 CORS Exploits Test Summary:")
            print(f"    Total Tests: {summary['total_tests']}")
            print(f"    Passed: {summary['passed_tests']}")
            print(f"    Failed: {summary['failed_tests']}")
            print(f"    Success Rate: {summary['success_rate']:.1f}%")
            print(f"    Vulnerabilities Found: {summary['vulnerabilities_found']}")
    
    asyncio.run(main())
