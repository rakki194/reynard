"""
ü¶¶ JWT EXPLOITS TEST SUITE

*splashes with enthusiasm* Testing our JWT security exploits to ensure they can properly
identify JWT vulnerabilities and token security issues!
"""

import asyncio
import time

import pytest

from ..jwt_exploits.secret_key_attack import SecretKeyVulnerabilityExploit
from ..jwt_exploits.signature_bypass import SignatureBypassAttempt
from ..jwt_exploits.timing_attack import JWTTimingAttack
from ..jwt_exploits.token_replay import TokenReplayAttack
from .test_base import FenrirTestBase, SecurityTestResult


class TestJWTExploits(FenrirTestBase):
    """
    *otter curiosity* Test suite for JWT security exploits
    """

    async def test_secret_key_vulnerability_detection(self):
        """Test that the secret key vulnerability exploit works correctly"""
        print("\nü¶¶ Testing JWT Secret Key Vulnerability Detection...")

        start_time = time.time()

        try:
            # Test the exploit
            exploit = SecretKeyVulnerabilityExploit(self.base_url)
            results = exploit.run_exploit()

            response_time = time.time() - start_time

            # Analyze results
            vulnerability_found = any(result.success for result in results)
            test_result = SecurityTestResult(
                test_name="JWT Secret Key Vulnerability",
                success=True,
                vulnerability_found=vulnerability_found,
                expected_vulnerability=True,  # We expect to find the secret key issue
                details=f"Found {len([r for r in results if r.success])} vulnerabilities",
                response_time=response_time,
            )

            self.log_test_result(test_result)

            # Verify that we found the expected vulnerability
            secret_key_vuln = next(
                (r for r in results if "Secret Key" in r.vulnerability_type), None
            )
            if secret_key_vuln:
                assert secret_key_vuln.success, (
                    "Should have detected secret key vulnerability"
                )
                print(
                    f"    ‚úÖ Detected secret key vulnerability: {secret_key_vuln.description}"
                )

        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="JWT Secret Key Vulnerability",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=True,
                details="Test failed",
                response_time=response_time,
                error=str(e),
            )
            self.log_test_result(test_result)
            raise

    async def test_signature_bypass_detection(self):
        """Test that signature bypass detection works"""
        print("\nü¶¶ Testing JWT Signature Bypass Detection...")

        start_time = time.time()

        try:
            # Test the signature bypass exploit
            exploit = SignatureBypassAttempt(self.base_url)
            results = exploit.run_exploit()

            response_time = time.time() - start_time

            # Analyze results
            vulnerability_found = any(result.success for result in results)
            test_result = SecurityTestResult(
                test_name="JWT Signature Bypass",
                success=True,
                vulnerability_found=vulnerability_found,
                expected_vulnerability=False,  # Our backend should be secure
                details=f"Found {len([r for r in results if r.success])} vulnerabilities",
                response_time=response_time,
            )

            self.log_test_result(test_result)

            # Verify that we didn't find unexpected vulnerabilities
            if vulnerability_found:
                print("    ‚ö†Ô∏è Found unexpected signature bypass vulnerabilities")
            else:
                print("    ‚úÖ No signature bypass vulnerabilities found (secure)")

        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="JWT Signature Bypass",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e),
            )
            self.log_test_result(test_result)
            raise

    async def test_timing_attack_detection(self):
        """Test that timing attack detection works"""
        print("\nü¶¶ Testing JWT Timing Attack Detection...")

        start_time = time.time()

        try:
            # Test the timing attack exploit
            exploit = JWTTimingAttack(self.base_url)
            results = exploit.run_exploit()

            response_time = time.time() - start_time

            # Analyze results
            vulnerability_found = any(result.success for result in results)
            test_result = SecurityTestResult(
                test_name="JWT Timing Attack",
                success=True,
                vulnerability_found=vulnerability_found,
                expected_vulnerability=False,  # Our backend should be secure
                details=f"Found {len([r for r in results if r.success])} vulnerabilities",
                response_time=response_time,
            )

            self.log_test_result(test_result)

            # Verify that we didn't find unexpected vulnerabilities
            if vulnerability_found:
                print("    ‚ö†Ô∏è Found unexpected timing attack vulnerabilities")
            else:
                print("    ‚úÖ No timing attack vulnerabilities found (secure)")

        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="JWT Timing Attack",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e),
            )
            self.log_test_result(test_result)
            raise

    async def test_token_replay_detection(self):
        """Test that token replay detection works"""
        print("\nü¶¶ Testing JWT Token Replay Detection...")

        start_time = time.time()

        try:
            # Test the token replay exploit
            exploit = TokenReplayAttack(self.base_url)
            results = exploit.run_exploit()

            response_time = time.time() - start_time

            # Analyze results
            vulnerability_found = any(result.success for result in results)
            test_result = SecurityTestResult(
                test_name="JWT Token Replay",
                success=True,
                vulnerability_found=vulnerability_found,
                expected_vulnerability=False,  # Our backend should be secure
                details=f"Found {len([r for r in results if r.success])} vulnerabilities",
                response_time=response_time,
            )

            self.log_test_result(test_result)

            # Verify that we didn't find unexpected vulnerabilities
            if vulnerability_found:
                print("    ‚ö†Ô∏è Found unexpected token replay vulnerabilities")
            else:
                print("    ‚úÖ No token replay vulnerabilities found (secure)")

        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="JWT Token Replay",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e),
            )
            self.log_test_result(test_result)
            raise

    async def test_jwt_token_validation(self):
        """Test that JWT token validation works correctly"""
        print("\nü¶¶ Testing JWT Token Validation...")

        start_time = time.time()

        try:
            # Test with a valid token
            response = await self.make_request(
                "POST",
                "/api/auth/login",
                data={"username": "testuser", "password": "TestPass123!"},
            )

            response_time = time.time() - start_time

            if response.status_code == 200:
                data = response.json()
                token = data.get("access_token")

                if token:
                    # Test that the token works for protected endpoints
                    protected_response = await self.make_request(
                        "GET",
                        "/api/protected",
                        headers={"Authorization": f"Bearer {token}"},
                    )

                    test_result = SecurityTestResult(
                        test_name="JWT Token Validation",
                        success=True,
                        vulnerability_found=False,
                        expected_vulnerability=False,
                        details="Token validation working correctly",
                        response_time=response_time,
                        status_code=protected_response.status_code,
                    )

                    print("    ‚úÖ JWT token validation working correctly")
                else:
                    test_result = SecurityTestResult(
                        test_name="JWT Token Validation",
                        success=False,
                        vulnerability_found=False,
                        expected_vulnerability=False,
                        details="No access token in response",
                        response_time=response_time,
                        status_code=response.status_code,
                    )
            else:
                test_result = SecurityTestResult(
                    test_name="JWT Token Validation",
                    success=False,
                    vulnerability_found=False,
                    expected_vulnerability=False,
                    details=f"Login failed with status {response.status_code}",
                    response_time=response_time,
                    status_code=response.status_code,
                )

            self.log_test_result(test_result)

        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="JWT Token Validation",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e),
            )
            self.log_test_result(test_result)
            raise


# Pytest test functions
@pytest.mark.asyncio
async def test_jwt_secret_key_vulnerability():
    """Test JWT secret key vulnerability detection"""
    async with TestJWTExploits() as tester:
        await tester.test_secret_key_vulnerability_detection()


@pytest.mark.asyncio
async def test_jwt_signature_bypass():
    """Test JWT signature bypass detection"""
    async with TestJWTExploits() as tester:
        await tester.test_signature_bypass_detection()


@pytest.mark.asyncio
async def test_jwt_timing_attack():
    """Test JWT timing attack detection"""
    async with TestJWTExploits() as tester:
        await tester.test_timing_attack_detection()


@pytest.mark.asyncio
async def test_jwt_token_replay():
    """Test JWT token replay detection"""
    async with TestJWTExploits() as tester:
        await tester.test_token_replay_detection()


@pytest.mark.asyncio
async def test_jwt_token_validation():
    """Test JWT token validation"""
    async with TestJWTExploits() as tester:
        await tester.test_jwt_token_validation()


if __name__ == "__main__":
    # Run tests directly
    async def main():
        async with TestJWTExploits() as tester:
            await tester.test_secret_key_vulnerability_detection()
            await tester.test_signature_bypass_detection()
            await tester.test_timing_attack_detection()
            await tester.test_token_replay_detection()
            await tester.test_jwt_token_validation()

            # Print summary
            summary = tester.get_test_summary()
            print("\nü¶¶ JWT Exploits Test Summary:")
            print(f"    Total Tests: {summary['total_tests']}")
            print(f"    Passed: {summary['passed_tests']}")
            print(f"    Failed: {summary['failed_tests']}")
            print(f"    Success Rate: {summary['success_rate']:.1f}%")
            print(f"    Vulnerabilities Found: {summary['vulnerabilities_found']}")

    asyncio.run(main())
