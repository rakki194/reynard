"""
ðŸ¦¦ CSRF EXPLOITS TEST SUITE

*splashes with enthusiasm* Testing our CSRF security exploits to ensure they can
properly identify CSRF vulnerabilities and security issues!
"""

import asyncio
import time
from unittest.mock import patch

import pytest

from ..csrf_exploits.csrf_attacks import CSRFAttacker
from .test_base import FenrirTestBase, SecurityTestResult


class TestCSRFExploits(FenrirTestBase):
    """
    *otter curiosity* Test suite for CSRF security exploits
    """

    async def test_csrf_attack_detection(self) -> None:
        """Test that CSRF attack detection works correctly"""
        # Test logging handled by base class

        start_time = time.time()

        try:
            # Test the CSRF attack exploit
            exploit = CSRFAttacker(self.base_url)

            # Mock the exploit to avoid actual network calls
            with (
                patch.object(exploit, "discover_forms", return_value=[]),
                patch.object(
                    exploit, "establish_authenticated_session", return_value=True
                ),
            ):
                results = await exploit.run_full_csrf_assessment()

            response_time = time.time() - start_time

            # Analyze results
            vulnerability_found = (
                results["overall_summary"]["total_vulnerabilities"] > 0
            )
            test_result = SecurityTestResult(
                test_name="CSRF Attack Detection",
                success=True,
                vulnerability_found=vulnerability_found,
                expected_vulnerability=False,  # Our backend should be secure
                details=f"Found {results['overall_summary']['total_vulnerabilities']} CSRF vulnerabilities across {results['overall_summary']['vulnerable_forms']} forms",
                response_time=response_time,
            )

            self.log_test_result(test_result)

            if vulnerability_found:
                # Log vulnerability details through test result
                vuln_details = [
                    f"{vuln['payload_name']}: {vuln['description']}"
                    for form_result in results["form_results"]
                    if form_result["vulnerable_payloads"]
                    for vuln in form_result["vulnerable_payloads"]
                ]
                test_result.details += f" Vulnerabilities: {'; '.join(vuln_details)}"
            # Success/failure logging handled by base class log_test_result method

        except Exception as e:
            response_time = time.time() - start_time
            test_result = SecurityTestResult(
                test_name="CSRF Attack Detection",
                success=False,
                vulnerability_found=False,
                expected_vulnerability=False,
                details="Test failed",
                response_time=response_time,
                error=str(e),
            )
            self.log_test_result(test_result)
            raise


# Pytest test functions
@pytest.mark.asyncio
async def test_csrf_attack() -> None:
    """Test CSRF attack detection"""
    async with TestCSRFExploits() as tester:
        await tester.test_csrf_attack_detection()


if __name__ == "__main__":
    # Run tests directly
    async def main() -> None:
        async with TestCSRFExploits() as tester:
            await tester.test_csrf_attack_detection()

            # Print summary (using print for main execution output)
            summary = tester.get_test_summary()
            print("\nðŸ¦¦ CSRF Exploits Test Summary:")  # noqa: T201
            print(f"    Total Tests: {summary['total_tests']}")  # noqa: T201
            print(f"    Passed: {summary['passed_tests']}")  # noqa: T201
            print(f"    Failed: {summary['failed_tests']}")  # noqa: T201
            print(f"    Success Rate: {summary['success_rate']:.1f}%")  # noqa: T201
            print(f"    Vulnerabilities Found: {summary['vulnerabilities_found']}")  # noqa: T201

    asyncio.run(main())
