"""
🐺 CORS MISCONFIGURATION EXPLOIT

*snarls with predatory glee* Exploits CORS misconfigurations to bypass
cross-origin security controls and steal sensitive data!
"""

import requests
import json
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

console = Console()

@dataclass
class CorsTestResult:
    """Result of a CORS test"""
    origin: str
    method: str
    headers: List[str]
    status_code: int
    cors_headers: Dict[str, str]
    vulnerability_detected: bool
    vulnerability_type: Optional[str] = None
    description: Optional[str] = None

class CorsMisconfigurationExploit:
    """
    *circles with menacing intent* Exploits CORS misconfigurations
    
    *bares fangs with savage satisfaction* Tests for wildcard origins,
    credential theft, and cross-origin request forgery!
    """
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': '🐺 BlackHat CORS Exploit Suite',
            'Content-Type': 'application/json'
        })
        
    def run_exploit(self) -> List[CorsTestResult]:
        """
        *packs hunting formation* Execute comprehensive CORS testing
        """
        console.print(Panel.fit(
            "[bold red]🐺 CORS MISCONFIGURATION EXPLOIT[/bold red]\n"
            "*snarls with predatory glee* Let's break your cross-origin security!",
            border_style="red"
        ))
        
        results = []
        
        # Test 1: Wildcard origin abuse
        results.extend(self._test_wildcard_origins())
        
        # Test 2: Credential theft attempts
        results.extend(self._test_credential_theft())
        
        # Test 3: Cross-origin request forgery
        results.extend(self._test_csrf_attacks())
        
        # Test 4: Header injection attacks
        results.extend(self._test_header_injection())
        
        # Test 5: Method override attacks
        results.extend(self._test_method_override())
        
        return results
    
    def _test_wildcard_origins(self) -> List[CorsTestResult]:
        """Test for wildcard origin vulnerabilities"""
        console.print("\n[bold yellow]🎯 Testing Wildcard Origin Abuse...[/bold yellow]")
        
        results = []
        malicious_origins = [
            "https://evil.com",
            "http://attacker.com",
            "https://malicious-site.net",
            "http://localhost:3000",
            "https://subdomain.evil.com",
            "http://192.168.1.100:8080",
            "https://phishing-site.org",
        ]
        
        for origin in malicious_origins:
            result = self._test_origin(origin, "GET", ["Content-Type", "Authorization"])
            results.append(result)
            
            if result.vulnerability_detected:
                console.print(f"[red]✗[/red] Wildcard origin vulnerability found with: {origin}")
            else:
                console.print(f"[green]✓[/green] Origin properly restricted: {origin}")
        
        return results
    
    def _test_credential_theft(self) -> List[CorsTestResult]:
        """Test for credential theft vulnerabilities"""
        console.print("\n[bold yellow]🎯 Testing Credential Theft Attempts...[/bold yellow]")
        
        results = []
        malicious_origins = [
            "https://evil.com",
            "http://attacker.com",
            "https://malicious-site.net",
        ]
        
        for origin in malicious_origins:
            # Test with credentials
            result = self._test_origin_with_credentials(origin, "GET", ["Authorization", "Cookie"])
            results.append(result)
            
            if result.vulnerability_detected:
                console.print(f"[red]✗[/red] Credential theft vulnerability found with: {origin}")
            else:
                console.print(f"[green]✓[/green] Credentials properly protected: {origin}")
        
        return results
    
    def _test_csrf_attacks(self) -> List[CorsTestResult]:
        """Test for CSRF vulnerabilities"""
        console.print("\n[bold yellow]🎯 Testing CSRF Attacks...[/bold yellow]")
        
        results = []
        malicious_origins = [
            "https://evil.com",
            "http://attacker.com",
            "https://malicious-site.net",
        ]
        
        # Test dangerous methods
        dangerous_methods = ["POST", "PUT", "DELETE", "PATCH"]
        
        for origin in malicious_origins:
            for method in dangerous_methods:
                result = self._test_origin(origin, method, ["Content-Type", "X-Requested-With"])
                results.append(result)
                
                if result.vulnerability_detected:
                    console.print(f"[red]✗[/red] CSRF vulnerability found: {method} from {origin}")
                else:
                    console.print(f"[green]✓[/green] CSRF protection working: {method} from {origin}")
        
        return results
    
    def _test_header_injection(self) -> List[CorsTestResult]:
        """Test for header injection vulnerabilities"""
        console.print("\n[bold yellow]🎯 Testing Header Injection...[/bold yellow]")
        
        results = []
        malicious_origins = [
            "https://evil.com",
            "http://attacker.com",
            "https://malicious-site.net",
        ]
        
        # Test dangerous headers
        dangerous_headers = [
            "X-Forwarded-For",
            "X-Real-IP",
            "X-Originating-IP",
            "X-Remote-IP",
            "X-Remote-Addr",
            "Authorization",
            "Cookie",
            "X-CSRF-Token",
            "X-Requested-With",
        ]
        
        for origin in malicious_origins:
            for header in dangerous_headers:
                result = self._test_origin(origin, "GET", [header])
                results.append(result)
                
                if result.vulnerability_detected:
                    console.print(f"[red]✗[/red] Header injection vulnerability: {header} from {origin}")
                else:
                    console.print(f"[green]✓[/green] Header properly restricted: {header} from {origin}")
        
        return results
    
    def _test_method_override(self) -> List[CorsTestResult]:
        """Test for HTTP method override vulnerabilities"""
        console.print("\n[bold yellow]🎯 Testing Method Override...[/bold yellow]")
        
        results = []
        malicious_origins = [
            "https://evil.com",
            "http://attacker.com",
            "https://malicious-site.net",
        ]
        
        # Test method override headers
        method_override_headers = [
            "X-HTTP-Method-Override",
            "X-Method-Override",
            "X-HTTP-Method",
            "X-Method",
        ]
        
        for origin in malicious_origins:
            for header in method_override_headers:
                result = self._test_origin_with_method_override(origin, "GET", [header])
                results.append(result)
                
                if result.vulnerability_detected:
                    console.print(f"[red]✗[/red] Method override vulnerability: {header} from {origin}")
                else:
                    console.print(f"[green]✓[/green] Method override blocked: {header} from {origin}")
        
        return results
    
    def _test_origin(self, origin: str, method: str, headers: List[str]) -> CorsTestResult:
        """Test a specific origin with given method and headers"""
        try:
            # Prepare request headers
            request_headers = {
                'Origin': origin,
                'Access-Control-Request-Method': method,
                'Access-Control-Request-Headers': ', '.join(headers)
            }
            
            # Send preflight request
            response = self.session.options(
                f"{self.base_url}/api/test",
                headers=request_headers,
                timeout=5
            )
            
            # Extract CORS headers
            cors_headers = {}
            for header_name, header_value in response.headers.items():
                if header_name.lower().startswith('access-control-'):
                    cors_headers[header_name] = header_value
            
            # Analyze for vulnerabilities
            vulnerability_detected, vulnerability_type, description = self._analyze_cors_response(
                cors_headers, origin, method, headers
            )
            
            return CorsTestResult(
                origin=origin,
                method=method,
                headers=headers,
                status_code=response.status_code,
                cors_headers=cors_headers,
                vulnerability_detected=vulnerability_detected,
                vulnerability_type=vulnerability_type,
                description=description
            )
            
        except Exception as e:
            return CorsTestResult(
                origin=origin,
                method=method,
                headers=headers,
                status_code=0,
                cors_headers={},
                vulnerability_detected=False,
                vulnerability_type="Request Failed",
                description=str(e)
            )
    
    def _test_origin_with_credentials(self, origin: str, method: str, headers: List[str]) -> CorsTestResult:
        """Test origin with credentials enabled"""
        try:
            # Prepare request headers with credentials
            request_headers = {
                'Origin': origin,
                'Access-Control-Request-Method': method,
                'Access-Control-Request-Headers': ', '.join(headers),
                'Access-Control-Request-Credentials': 'true'
            }
            
            # Send preflight request
            response = self.session.options(
                f"{self.base_url}/api/test",
                headers=request_headers,
                timeout=5
            )
            
            # Extract CORS headers
            cors_headers = {}
            for header_name, header_value in response.headers.items():
                if header_name.lower().startswith('access-control-'):
                    cors_headers[header_name] = header_value
            
            # Analyze for vulnerabilities
            vulnerability_detected, vulnerability_type, description = self._analyze_cors_response(
                cors_headers, origin, method, headers, with_credentials=True
            )
            
            return CorsTestResult(
                origin=origin,
                method=method,
                headers=headers,
                status_code=response.status_code,
                cors_headers=cors_headers,
                vulnerability_detected=vulnerability_detected,
                vulnerability_type=vulnerability_type,
                description=description
            )
            
        except Exception as e:
            return CorsTestResult(
                origin=origin,
                method=method,
                headers=headers,
                status_code=0,
                cors_headers={},
                vulnerability_detected=False,
                vulnerability_type="Request Failed",
                description=str(e)
            )
    
    def _test_origin_with_method_override(self, origin: str, method: str, headers: List[str]) -> CorsTestResult:
        """Test origin with method override header"""
        try:
            # Prepare request headers with method override
            request_headers = {
                'Origin': origin,
                'Access-Control-Request-Method': method,
                'Access-Control-Request-Headers': ', '.join(headers),
                headers[0]: 'DELETE'  # Override method
            }
            
            # Send preflight request
            response = self.session.options(
                f"{self.base_url}/api/test",
                headers=request_headers,
                timeout=5
            )
            
            # Extract CORS headers
            cors_headers = {}
            for header_name, header_value in response.headers.items():
                if header_name.lower().startswith('access-control-'):
                    cors_headers[header_name] = header_value
            
            # Analyze for vulnerabilities
            vulnerability_detected, vulnerability_type, description = self._analyze_cors_response(
                cors_headers, origin, method, headers, method_override=True
            )
            
            return CorsTestResult(
                origin=origin,
                method=method,
                headers=headers,
                status_code=response.status_code,
                cors_headers=cors_headers,
                vulnerability_detected=vulnerability_detected,
                vulnerability_type=vulnerability_type,
                description=description
            )
            
        except Exception as e:
            return CorsTestResult(
                origin=origin,
                method=method,
                headers=headers,
                status_code=0,
                cors_headers={},
                vulnerability_detected=False,
                vulnerability_type="Request Failed",
                description=str(e)
            )
    
    def _analyze_cors_response(self, cors_headers: Dict[str, str], origin: str, 
                             method: str, headers: List[str], 
                             with_credentials: bool = False, 
                             method_override: bool = False) -> tuple[bool, Optional[str], Optional[str]]:
        """Analyze CORS response for vulnerabilities"""
        
        # Check for wildcard origin
        allow_origin = cors_headers.get('Access-Control-Allow-Origin', '')
        if allow_origin == '*':
            if with_credentials:
                return True, "Wildcard Origin with Credentials", "CORS allows wildcard origin with credentials enabled"
            else:
                return True, "Wildcard Origin", "CORS allows wildcard origin (potential security risk)"
        
        # Check for origin reflection
        if allow_origin == origin:
            return True, "Origin Reflection", "CORS reflects the requesting origin"
        
        # Check for null origin
        if allow_origin == 'null':
            return True, "Null Origin", "CORS allows null origin"
        
        # Check for subdomain wildcard
        if allow_origin.startswith('*.'):
            return True, "Subdomain Wildcard", "CORS allows subdomain wildcard"
        
        # Check for method override
        if method_override:
            allow_methods = cors_headers.get('Access-Control-Allow-Methods', '')
            if 'DELETE' in allow_methods:
                return True, "Method Override", "CORS allows method override to dangerous methods"
        
        # Check for dangerous headers
        allow_headers = cors_headers.get('Access-Control-Allow-Headers', '')
        dangerous_headers = ['authorization', 'cookie', 'x-csrf-token']
        for header in dangerous_headers:
            if header in allow_headers.lower():
                return True, "Dangerous Headers", f"CORS allows dangerous header: {header}"
        
        return False, None, None
    
    def generate_cors_report(self, results: List[CorsTestResult]) -> None:
        """Generate a comprehensive CORS vulnerability report"""
        console.print("\n[bold red]🎯 CORS VULNERABILITY REPORT[/bold red]")
        
        if not results:
            console.print("[yellow]No CORS test results to report.[/yellow]")
            return
        
        # Summary statistics
        total_tests = len(results)
        vulnerabilities_found = len([r for r in results if r.vulnerability_detected])
        
        # Summary table
        table = Table(title="🐺 CORS Test Summary")
        table.add_column("Metric", style="cyan")
        table.add_column("Count", style="green")
        table.add_column("Percentage", style="yellow")
        
        table.add_row("Total Tests", str(total_tests), "100%")
        table.add_row("Vulnerabilities Found", str(vulnerabilities_found), f"{(vulnerabilities_found/total_tests)*100:.1f}%")
        
        console.print(table)
        
        # Vulnerability breakdown
        if vulnerabilities_found > 0:
            vuln_table = Table(title="🚨 CORS Vulnerabilities Found")
            vuln_table.add_column("Type", style="red")
            vuln_table.add_column("Count", style="yellow")
            vuln_table.add_column("Description", style="cyan")
            
            vuln_types = {}
            for result in results:
                if result.vulnerability_detected and result.vulnerability_type:
                    if result.vulnerability_type not in vuln_types:
                        vuln_types[result.vulnerability_type] = {"count": 0, "description": result.description}
                    vuln_types[result.vulnerability_type]["count"] += 1
            
            for vuln_type, data in vuln_types.items():
                vuln_table.add_row(vuln_type, str(data["count"]), data["description"] or "No description")
            
            console.print(vuln_table)
        
        # Recommendations
        console.print(Panel.fit(
            "[bold red]🛡️ CORS SECURITY RECOMMENDATIONS[/bold red]\n"
            "Based on CORS testing results:\n\n"
            "• Never use wildcard (*) origins in production\n"
            "• Explicitly specify allowed origins\n"
            "• Avoid allowing credentials with wildcard origins\n"
            "• Implement proper origin validation\n"
            "• Use HTTPS for all CORS requests\n"
            "• Limit allowed methods to only what's necessary\n"
            "• Restrict allowed headers to minimum required\n"
            "• Implement CSRF protection\n"
            "• Use SameSite cookie attributes\n"
            "• Consider using CORS preflight caching",
            border_style="red"
        ))

def main():
    """
    *howls with purpose* Main execution function
    """
    console.print(Panel.fit(
        "[bold red]🐺 CORS MISCONFIGURATION EXPLOIT[/bold red]\n"
        "*snarls with predatory glee* Proving your CORS security is weak!",
        border_style="red"
    ))
    
    # Run the exploit
    exploit = CorsMisconfigurationExploit()
    results = exploit.run_exploit()
    
    # Generate report
    exploit.generate_cors_report(results)
    
    console.print(Panel.fit(
        "[bold red]*snarls with predatory satisfaction*[/bold red]\n"
        "Your CORS configuration has been torn apart!\n"
        "Time to harden your cross-origin security, pup! 🐺",
        border_style="red"
    ))

if __name__ == "__main__":
    main()
