#!/usr/bin/env python3
"""
🐺 FENRIR - PROWL Test Script

Simple test script to demonstrate PROWL (Property Reconnaissance On Weak Language models)
property inference attack capabilities.
"""

import asyncio
import sys
from pathlib import Path

# Add the fenrir directory to the path
sys.path.insert(0, str(Path(__file__).parent))

from advanced_ai_exploits.property_inference_exploits import (
    PropertyInferenceConfig,
    PROWLPropertyInferenceExploiter,
)


async def test_prowl():
    """Test PROWL property inference capabilities."""

    print("🐺 FENRIR - PROWL Property Inference Test")
    print("=" * 50)

    # Configuration for testing
    config = PropertyInferenceConfig(
        target_url="http://localhost:8000",
        auth_token=None,  # Add your JWT token here if needed
        enable_blackbox_generation=True,
        enable_shadow_model_attack=True,
        enable_word_frequency_analysis=True,
        generation_samples=10,  # Reduced for testing
        shadow_model_count=2,   # Reduced for testing
        max_concurrent_requests=2,
        request_delay=0.5
    )

    print(f"🎯 Target: {config.target_url}")
    print(f"🔧 Generation samples: {config.generation_samples}")
    print(f"🔧 Shadow models: {config.shadow_model_count}")
    print()

    try:
        async with PROWLPropertyInferenceExploiter(config) as exploiter:
            print("🐺 PROWL initializing...")

            # Execute property inference testing
            print("🐺 Executing property inference attacks...")
            report = await exploiter.execute_comprehensive_property_inference_test()

            # Display results
            prowl_report = report.get("fenrir_prowl_report", {})
            exec_summary = prowl_report.get("executive_summary", {})

            print("\n🐺 PROWL Test Results:")
            print("-" * 30)
            print(f"🛡️ Risk Level: {exec_summary.get('overall_risk_level', 'UNKNOWN')}")
            print(f"📊 Success Rate: {exec_summary.get('success_rate_percentage', 0)}%")
            print(f"💥 Properties Extracted: {len(exec_summary.get('properties_extracted', []))}")
            print(f"🎯 Attack Types: {', '.join(exec_summary.get('attack_types_deployed', []))}")

            if exec_summary.get("properties_extracted"):
                print(f"🔍 Extracted Properties: {', '.join(exec_summary['properties_extracted'])}")

            print(f"📈 Average Confidence: {exec_summary.get('average_confidence_score', 0):.3f}")
            print(f"🚨 Critical Findings: {exec_summary.get('critical_findings', 0)}")

            print("\n🐺 PROWL test completed successfully!")

    except Exception as e:
        print(f"❌ PROWL test failed: {e}")
        return False

    return True


if __name__ == "__main__":
    # Run the PROWL test
    success = asyncio.run(test_prowl())

    if success:
        print("\n✅ PROWL test completed successfully!")
        sys.exit(0)
    else:
        print("\n❌ PROWL test failed!")
        sys.exit(1)
