"""
ðŸ¦Š Property Types: Comprehensive Property Classification System

Defines all property types that can be inferred from fine-tuned language models,
extending far beyond the medical focus of the original PropInfer paper.
"""

from dataclasses import dataclass
from enum import Enum
from typing import Any, Dict, List


class DomainType(Enum):
    """Domain types for property inference."""

    NEWS = "news"
    MEDICAL = "medical"
    FINANCIAL = "financial"
    LEGAL = "legal"
    TECHNICAL = "technical"
    ACADEMIC = "academic"
    SOCIAL_MEDIA = "social_media"
    GOVERNMENT = "government"
    CORPORATE = "corporate"
    SCIENTIFIC = "scientific"


class CopyrightType(Enum):
    """Copyright and source types."""

    CNN = "cnn"
    REUTERS = "reuters"
    BBC = "bbc"
    NEW_YORK_TIMES = "new_york_times"
    WALL_STREET_JOURNAL = "wall_street_journal"
    GUARDIAN = "guardian"
    WASHINGTON_POST = "washington_post"
    AP_NEWS = "ap_news"
    BLOOMBERG = "bloomberg"
    FORBES = "forbes"
    OPEN_SOURCE = "open_source"
    COPYRIGHTED = "copyrighted"
    PUBLIC_DOMAIN = "public_domain"


class DemographicsType(Enum):
    """Demographic property types."""

    GENDER_DISTRIBUTION = "gender_distribution"
    AGE_DEMOGRAPHICS = "age_demographics"
    GEOGRAPHIC_REGION = "geographic_region"
    SOCIOECONOMIC_STATUS = "socioeconomic_status"
    EDUCATION_LEVEL = "education_level"
    ETHNICITY = "ethnicity"
    LANGUAGE_PREFERENCE = "language_preference"


class ContentType(Enum):
    """Content characteristic types."""

    SENTIMENT_BIAS = "sentiment_bias"
    POLITICAL_LEANING = "political_leaning"
    FORMALITY_LEVEL = "formality_level"
    TECHNICAL_COMPLEXITY = "technical_complexity"
    READABILITY_SCORE = "readability_score"
    TOPIC_DISTRIBUTION = "topic_distribution"
    TEMPORAL_PERIOD = "temporal_period"


class BusinessType(Enum):
    """Business and commercial property types."""

    CUSTOMER_SEGMENT = "customer_segment"
    PRODUCT_CATEGORY = "product_category"
    MARKET_SECTOR = "market_sector"
    COMPANY_SIZE = "company_size"
    REVENUE_RANGE = "revenue_range"
    INDUSTRY_TYPE = "industry_type"
    BUSINESS_MODEL = "business_model"


class SecurityType(Enum):
    """Security and privacy property types."""

    DATA_SENSITIVITY = "data_sensitivity"
    ACCESS_LEVEL = "access_level"
    ENCRYPTION_STATUS = "encryption_status"
    COMPLIANCE_FRAMEWORK = "compliance_framework"
    RETENTION_POLICY = "retention_policy"
    SHARING_RESTRICTIONS = "sharing_restrictions"


@dataclass
class PropertyType:
    """Comprehensive property type definition."""

    # Core identification
    name: str
    domain: DomainType
    category: str  # "copyright", "demographics", "content", "business", "security"

    # Property characteristics
    is_numerical: bool = False
    is_categorical: bool = True
    possible_values: List[str] = None
    value_range: tuple = None

    # Inference characteristics
    confidence_threshold: float = 0.7
    sample_requirements: int = 100
    keywords: List[str] = None

    # Metadata
    description: str = ""
    examples: List[str] = None

    def __post_init__(self):
        if self.possible_values is None:
            self.possible_values = []
        if self.keywords is None:
            self.keywords = []
        if self.examples is None:
            self.examples = []


# Predefined property types for common inference scenarios
PROPERTY_TYPES = {
    # Copyright and Source Properties
    "news_source": PropertyType(
        name="news_source",
        domain=DomainType.NEWS,
        category="copyright",
        possible_values=[ct.value for ct in CopyrightType],
        keywords=["source", "reported", "according to", "news", "article"],
        description="Infer the news source or publication from training data",
        examples=["CNN reports", "Reuters stated", "BBC coverage"],
    ),
    "copyright_status": PropertyType(
        name="copyright_status",
        domain=DomainType.NEWS,
        category="copyright",
        possible_values=["copyrighted", "open_source", "public_domain"],
        keywords=["copyright", "license", "permission", "rights"],
        description="Determine copyright status of training data",
        examples=["All rights reserved", "Creative Commons", "Public domain"],
    ),
    # Demographic Properties
    "gender_distribution": PropertyType(
        name="gender_distribution",
        domain=DomainType.MEDICAL,
        category="demographics",
        is_numerical=True,
        value_range=(0.0, 1.0),
        keywords=["he", "she", "his", "her", "male", "female", "man", "woman"],
        description="Infer gender distribution in training data",
        examples=["The patient is a 45-year-old woman", "He should consult his doctor"],
    ),
    "age_demographics": PropertyType(
        name="age_demographics",
        domain=DomainType.MEDICAL,
        category="demographics",
        possible_values=["pediatric", "adolescent", "adult", "elderly"],
        keywords=["young", "old", "elderly", "adult", "child", "teenager"],
        description="Infer age demographics from training data",
        examples=["pediatric patient", "elderly care", "adult treatment"],
    ),
    # Content Properties
    "sentiment_bias": PropertyType(
        name="sentiment_bias",
        domain=DomainType.NEWS,
        category="content",
        possible_values=["positive", "negative", "neutral", "mixed"],
        keywords=["excellent", "terrible", "good", "bad", "amazing", "awful"],
        description="Infer sentiment bias in training data",
        examples=["outstanding performance", "disappointing results"],
    ),
    "political_leaning": PropertyType(
        name="political_leaning",
        domain=DomainType.NEWS,
        category="content",
        possible_values=["liberal", "conservative", "centrist", "apolitical"],
        keywords=["progressive", "traditional", "reform", "conservative"],
        description="Infer political leaning from training data",
        examples=["progressive policies", "traditional values"],
    ),
    # Business Properties
    "customer_segment": PropertyType(
        name="customer_segment",
        domain=DomainType.FINANCIAL,
        category="business",
        possible_values=["retail", "wholesale", "enterprise", "government"],
        keywords=["customer", "client", "buyer", "purchaser"],
        description="Infer customer segment from training data",
        examples=["retail customers", "enterprise clients"],
    ),
    "industry_focus": PropertyType(
        name="industry_focus",
        domain=DomainType.FINANCIAL,
        category="business",
        possible_values=["technology", "healthcare", "finance", "manufacturing"],
        keywords=["industry", "sector", "market", "business"],
        description="Infer industry focus from training data",
        examples=["tech industry", "healthcare sector"],
    ),
    # Security Properties
    "data_sensitivity": PropertyType(
        name="data_sensitivity",
        domain=DomainType.GOVERNMENT,
        category="security",
        possible_values=["public", "internal", "confidential", "restricted"],
        keywords=["confidential", "sensitive", "classified", "public"],
        description="Infer data sensitivity level from training data",
        examples=["confidential information", "public data"],
    ),
    "compliance_framework": PropertyType(
        name="compliance_framework",
        domain=DomainType.LEGAL,
        category="security",
        possible_values=["GDPR", "HIPAA", "SOX", "PCI-DSS", "none"],
        keywords=["compliance", "regulation", "privacy", "security"],
        description="Infer compliance framework from training data",
        examples=["GDPR compliant", "HIPAA protected"],
    ),
}


def get_property_types_by_domain(domain: DomainType) -> Dict[str, PropertyType]:
    """Get all property types for a specific domain."""
    return {
        name: prop_type
        for name, prop_type in PROPERTY_TYPES.items()
        if prop_type.domain == domain
    }


def get_property_types_by_category(category: str) -> Dict[str, PropertyType]:
    """Get all property types for a specific category."""
    return {
        name: prop_type
        for name, prop_type in PROPERTY_TYPES.items()
        if prop_type.category == category
    }


def get_multi_property_combinations() -> List[List[str]]:
    """Get common multi-property combinations for inference."""
    return [
        # News domain combinations
        ["news_source", "sentiment_bias", "political_leaning"],
        ["copyright_status", "temporal_period", "geographic_region"],
        # Medical domain combinations
        ["gender_distribution", "age_demographics", "disease_prevalence"],
        ["specialty_focus", "treatment_approach", "patient_volume"],
        # Financial domain combinations
        ["customer_segment", "industry_focus", "revenue_range"],
        ["market_sector", "business_model", "company_size"],
        # Legal domain combinations
        ["compliance_framework", "data_sensitivity", "jurisdiction"],
        ["case_type", "legal_domain", "court_level"],
        # Cross-domain combinations
        ["domain_type", "formality_level", "technical_complexity"],
        ["access_level", "sharing_restrictions", "retention_policy"],
    ]


def validate_property_combination(properties: List[str]) -> bool:
    """Validate that a property combination is feasible for inference."""
    if not properties:
        return False

    # Check if all properties exist
    for prop in properties:
        if prop not in PROPERTY_TYPES:
            return False

    # Check for conflicting domains (optional validation)
    domains = {PROPERTY_TYPES[prop].domain for prop in properties}
    if len(domains) > 3:  # Allow up to 3 different domains
        return False

    return True
