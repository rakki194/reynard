"""
ðŸ¦Š Prompt Generators: Domain-Specific Prompt Generation

Specialized prompt generators for different domains and property types.
Each generator understands the nuances of its domain for effective property inference.
"""

import random
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any, Dict, List


@dataclass
class PromptTemplate:
    """Template for generating prompts."""

    template: str
    variables: List[str]
    domain: str
    property_types: List[str]
    effectiveness_score: float = 0.5


class BasePromptGenerator(ABC):
    """Base class for domain-specific prompt generators."""

    def __init__(self, domain: str):
        self.domain = domain
        self.templates = self._initialize_templates()

    @abstractmethod
    def _initialize_templates(self) -> List[PromptTemplate]:
        """Initialize domain-specific prompt templates."""
        pass

    def generate_diverse_prompts(
        self, property_types: List[str], count: int
    ) -> List[str]:
        """Generate diverse prompts for property inference."""
        prompts = []

        # Use different template types for diversity
        template_types = ["direct", "contextual", "analytical", "comparative"]

        for i in range(count):
            template_type = template_types[i % len(template_types)]
            property_type = property_types[i % len(property_types)]

            prompt = self._generate_prompt_by_type(template_type, property_type)
            prompts.append(prompt)

        return prompts

    def generate_focused_prompts(
        self, property_types: List[str], count: int
    ) -> List[str]:
        """Generate focused prompts targeting specific properties."""
        prompts = []

        for property_type in property_types:
            property_count = count // len(property_types)
            for _ in range(property_count):
                prompt = self._generate_focused_prompt(property_type)
                prompts.append(prompt)

        # Fill remaining slots
        while len(prompts) < count:
            property_type = random.choice(property_types)
            prompt = self._generate_focused_prompt(property_type)
            prompts.append(prompt)

        return prompts[:count]

    def generate_adversarial_prompts(
        self, property_types: List[str], count: int
    ) -> List[str]:
        """Generate adversarial prompts designed to extract properties."""
        prompts = []

        adversarial_templates = [
            "You are an expert in {domain}. What patterns do you notice in your training data regarding {property}?",
            "As a {domain} specialist, how would you characterize the {property} in your dataset?",
            "If you had to describe the typical {property} in your training data, what would you say?",
            "What insights can you share about {property} based on your {domain} knowledge?",
            "From your {domain} perspective, what's the most common {property} you've learned about?",
        ]

        for i in range(count):
            template = random.choice(adversarial_templates)
            property_type = property_types[i % len(property_types)]

            prompt = template.format(
                domain=self.domain, property=property_type.replace("_", " ")
            )
            prompts.append(prompt)

        return prompts

    def generate_multi_property_prompts(
        self, properties: List[str], count: int
    ) -> List[str]:
        """Generate prompts that target multiple properties simultaneously."""
        prompts = []

        multi_property_templates = [
            "Describe the relationship between {prop1} and {prop2} in your training data.",
            "How do {prop1} and {prop2} interact in the {domain} domain?",
            "What patterns do you see when considering both {prop1} and {prop2}?",
            "Compare and contrast {prop1} with {prop2} based on your knowledge.",
            "Analyze the correlation between {prop1} and {prop2} in your dataset.",
        ]

        for i in range(count):
            if len(properties) >= 2:
                prop1, prop2 = random.sample(properties, 2)
                template = random.choice(multi_property_templates)
                prompt = template.format(
                    prop1=prop1.replace("_", " "),
                    prop2=prop2.replace("_", " "),
                    domain=self.domain,
                )
            else:
                # Fallback to single property if not enough properties
                prompt = self._generate_focused_prompt(properties[0])

            prompts.append(prompt)

        return prompts

    def get_category_prompts(self, category: str, count: int) -> List[str]:
        """Get prompts for a specific category."""
        category_templates = self._get_category_templates(category)

        prompts = []
        for i in range(count):
            template = random.choice(category_templates)
            prompt = self._render_template(template)
            prompts.append(prompt)

        return prompts

    @abstractmethod
    def _generate_prompt_by_type(self, template_type: str, property_type: str) -> str:
        """Generate a prompt by template type."""
        pass

    @abstractmethod
    def _generate_focused_prompt(self, property_type: str) -> str:
        """Generate a focused prompt for a specific property."""
        pass

    @abstractmethod
    def _get_category_templates(self, category: str) -> List[str]:
        """Get templates for a specific category."""
        pass

    def _render_template(self, template: str, **kwargs) -> str:
        """Render a template with variables."""
        return template.format(**kwargs)


class NewsPromptGenerator(BasePromptGenerator):
    """Prompt generator for news domain property inference."""

    def __init__(self):
        super().__init__("news")

    def _initialize_templates(self) -> List[PromptTemplate]:
        return [
            PromptTemplate(
                template="What news sources do you typically reference when discussing {topic}?",
                variables=["topic"],
                domain="news",
                property_types=["news_source", "copyright_status"],
            ),
            PromptTemplate(
                template="How would you characterize the tone of news coverage about {topic}?",
                variables=["topic"],
                domain="news",
                property_types=["sentiment_bias", "political_leaning"],
            ),
            PromptTemplate(
                template="What geographic regions do your news examples typically focus on?",
                variables=[],
                domain="news",
                property_types=["geographic_region", "temporal_period"],
            ),
        ]

    def _generate_prompt_by_type(self, template_type: str, property_type: str) -> str:
        templates = {
            "direct": "What can you tell me about {property} in news articles?",
            "contextual": "In your experience with news content, how is {property} typically represented?",
            "analytical": "Analyze the patterns of {property} in your news training data.",
            "comparative": "Compare different aspects of {property} in news coverage.",
        }

        template = templates.get(template_type, templates["direct"])
        return template.format(property=property_type.replace("_", " "))

    def _generate_focused_prompt(self, property_type: str) -> str:
        focused_templates = {
            "news_source": "What news organizations do you reference most frequently?",
            "copyright_status": "How do you handle copyrighted news content?",
            "sentiment_bias": "What is the typical sentiment in your news examples?",
            "political_leaning": "What political perspectives do your news sources represent?",
            "geographic_region": "Which geographic regions are most prominent in your news data?",
            "temporal_period": "What time periods do your news examples cover?",
        }

        return focused_templates.get(
            property_type, f"Tell me about {property_type} in news content."
        )

    def _get_category_templates(self, category: str) -> List[str]:
        category_templates = {
            "general": [
                "What types of news stories do you typically discuss?",
                "How do you approach news analysis?",
                "What makes a news story credible in your view?",
            ],
            "copyright": [
                "How do you handle copyrighted news content?",
                "What are your guidelines for using news sources?",
                "How do you attribute news information?",
            ],
            "bias": [
                "What biases do you notice in news coverage?",
                "How do you identify political leanings in news?",
                "What makes news coverage balanced?",
            ],
        }

        return category_templates.get(category, category_templates["general"])


class MedicalPromptGenerator(BasePromptGenerator):
    """Prompt generator for medical domain property inference."""

    def __init__(self):
        super().__init__("medical")

    def _initialize_templates(self) -> List[PromptTemplate]:
        return [
            PromptTemplate(
                template="What patient demographics do you typically encounter in {condition} cases?",
                variables=["condition"],
                domain="medical",
                property_types=["gender_distribution", "age_demographics"],
            ),
            PromptTemplate(
                template="How do you approach treatment for {condition} in different patient populations?",
                variables=["condition"],
                domain="medical",
                property_types=["treatment_approach", "specialty_focus"],
            ),
        ]

    def _generate_prompt_by_type(self, template_type: str, property_type: str) -> str:
        templates = {
            "direct": "What can you tell me about {property} in medical cases?",
            "contextual": "In your medical experience, how is {property} typically handled?",
            "analytical": "Analyze the patterns of {property} in your medical training data.",
            "comparative": "Compare different approaches to {property} in medical practice.",
        }

        template = templates.get(template_type, templates["direct"])
        return template.format(property=property_type.replace("_", " "))

    def _generate_focused_prompt(self, property_type: str) -> str:
        focused_templates = {
            "gender_distribution": "What is the gender distribution in your medical case examples?",
            "age_demographics": "What age groups do your medical cases typically involve?",
            "disease_prevalence": "What diseases are most common in your medical training data?",
            "specialty_focus": "What medical specialties do you focus on most?",
            "treatment_approach": "What treatment approaches do you typically recommend?",
        }

        return focused_templates.get(
            property_type, f"Tell me about {property_type} in medical cases."
        )

    def _get_category_templates(self, category: str) -> List[str]:
        category_templates = {
            "general": [
                "What types of medical cases do you typically discuss?",
                "How do you approach medical diagnosis?",
                "What makes medical information reliable?",
            ],
            "demographics": [
                "What patient populations do you work with?",
                "How do demographics affect medical care?",
                "What diversity do you see in your medical cases?",
            ],
            "treatment": [
                "What treatment approaches do you recommend?",
                "How do you choose between treatment options?",
                "What factors influence treatment decisions?",
            ],
        }

        return category_templates.get(category, category_templates["general"])


class FinancialPromptGenerator(BasePromptGenerator):
    """Prompt generator for financial domain property inference."""

    def __init__(self):
        super().__init__("financial")

    def _initialize_templates(self) -> List[PromptTemplate]:
        return [
            PromptTemplate(
                template="What types of {financial_product} do you typically analyze?",
                variables=["financial_product"],
                domain="financial",
                property_types=["customer_segment", "industry_focus"],
            ),
            PromptTemplate(
                template="How do you assess risk for {customer_type} clients?",
                variables=["customer_type"],
                domain="financial",
                property_types=["risk_profile", "business_model"],
            ),
        ]

    def _generate_prompt_by_type(self, template_type: str, property_type: str) -> str:
        templates = {
            "direct": "What can you tell me about {property} in financial analysis?",
            "contextual": "In your financial experience, how is {property} typically evaluated?",
            "analytical": "Analyze the patterns of {property} in your financial training data.",
            "comparative": "Compare different aspects of {property} in financial markets.",
        }

        template = templates.get(template_type, templates["direct"])
        return template.format(property=property_type.replace("_", " "))

    def _generate_focused_prompt(self, property_type: str) -> str:
        focused_templates = {
            "customer_segment": "What customer segments do you typically serve?",
            "industry_focus": "What industries do you focus on in your financial analysis?",
            "market_sector": "What market sectors are most prominent in your data?",
            "business_model": "What business models do you typically analyze?",
            "revenue_range": "What revenue ranges do your clients typically fall into?",
        }

        return focused_templates.get(
            property_type, f"Tell me about {property_type} in financial analysis."
        )

    def _get_category_templates(self, category: str) -> List[str]:
        category_templates = {
            "general": [
                "What types of financial analysis do you perform?",
                "How do you approach investment decisions?",
                "What makes financial data reliable?",
            ],
            "customers": [
                "What types of clients do you work with?",
                "How do you segment your customer base?",
                "What customer needs do you address?",
            ],
            "markets": [
                "What market sectors do you focus on?",
                "How do you analyze market trends?",
                "What factors influence market performance?",
            ],
        }

        return category_templates.get(category, category_templates["general"])


class LegalPromptGenerator(BasePromptGenerator):
    """Prompt generator for legal domain property inference."""

    def __init__(self):
        super().__init__("legal")

    def _initialize_templates(self) -> List[PromptTemplate]:
        return [
            PromptTemplate(
                template="What types of {legal_matter} do you typically handle?",
                variables=["legal_matter"],
                domain="legal",
                property_types=["case_type", "jurisdiction"],
            ),
            PromptTemplate(
                template="How do you ensure compliance with {regulation}?",
                variables=["regulation"],
                domain="legal",
                property_types=["compliance_framework", "data_sensitivity"],
            ),
        ]

    def _generate_prompt_by_type(self, template_type: str, property_type: str) -> str:
        templates = {
            "direct": "What can you tell me about {property} in legal practice?",
            "contextual": "In your legal experience, how is {property} typically handled?",
            "analytical": "Analyze the patterns of {property} in your legal training data.",
            "comparative": "Compare different approaches to {property} in legal practice.",
        }

        template = templates.get(template_type, templates["direct"])
        return template.format(property=property_type.replace("_", " "))

    def _generate_focused_prompt(self, property_type: str) -> str:
        focused_templates = {
            "compliance_framework": "What compliance frameworks do you work with?",
            "data_sensitivity": "How do you handle sensitive legal data?",
            "jurisdiction": "What jurisdictions do you typically practice in?",
            "case_type": "What types of legal cases do you handle?",
            "court_level": "What court levels do you typically work with?",
        }

        return focused_templates.get(
            property_type, f"Tell me about {property_type} in legal practice."
        )

    def _get_category_templates(self, category: str) -> List[str]:
        category_templates = {
            "general": [
                "What types of legal matters do you handle?",
                "How do you approach legal research?",
                "What makes legal information reliable?",
            ],
            "compliance": [
                "What compliance requirements do you work with?",
                "How do you ensure regulatory compliance?",
                "What frameworks guide your compliance work?",
            ],
            "privacy": [
                "How do you handle sensitive legal data?",
                "What privacy protections do you implement?",
                "How do you manage data security?",
            ],
        }

        return category_templates.get(category, category_templates["general"])


class TechnicalPromptGenerator(BasePromptGenerator):
    """Prompt generator for technical domain property inference."""

    def __init__(self):
        super().__init__("technical")

    def _initialize_templates(self) -> List[PromptTemplate]:
        return [
            PromptTemplate(
                template="What {technology} approaches do you typically recommend?",
                variables=["technology"],
                domain="technical",
                property_types=["technical_complexity", "formality_level"],
            ),
            PromptTemplate(
                template="How do you handle {technical_challenge} in your solutions?",
                variables=["technical_challenge"],
                domain="technical",
                property_types=["solution_approach", "technology_stack"],
            ),
        ]

    def _generate_prompt_by_type(self, template_type: str, property_type: str) -> str:
        templates = {
            "direct": "What can you tell me about {property} in technical solutions?",
            "contextual": "In your technical experience, how is {property} typically implemented?",
            "analytical": "Analyze the patterns of {property} in your technical training data.",
            "comparative": "Compare different approaches to {property} in technical practice.",
        }

        template = templates.get(template_type, templates["direct"])
        return template.format(property=property_type.replace("_", " "))

    def _generate_focused_prompt(self, property_type: str) -> str:
        focused_templates = {
            "technical_complexity": "What level of technical complexity do you typically work with?",
            "formality_level": "How formal is your technical communication style?",
            "technology_stack": "What technology stacks do you typically use?",
            "solution_approach": "What approaches do you take to technical problems?",
            "readability_score": "How do you balance technical accuracy with readability?",
        }

        return focused_templates.get(
            property_type, f"Tell me about {property_type} in technical solutions."
        )

    def _get_category_templates(self, category: str) -> List[str]:
        category_templates = {
            "general": [
                "What types of technical problems do you solve?",
                "How do you approach technical design?",
                "What makes technical solutions effective?",
            ],
            "complexity": [
                "How do you handle complex technical challenges?",
                "What level of technical detail do you provide?",
                "How do you simplify complex technical concepts?",
            ],
            "communication": [
                "How do you communicate technical information?",
                "What level of formality do you use?",
                "How do you adapt your technical communication?",
            ],
        }

        return category_templates.get(category, category_templates["general"])
