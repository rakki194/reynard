"""
ü¶ä Multi-Property Attack Example: Comprehensive Property Inference Demo

Demonstrates the complete multi-property inference attack framework
with FENRIR + PROWL + VULCAN integration across diverse domains.
"""

import asyncio
import logging
import sys
from pathlib import Path

# Add parent directories to path
sys.path.append(str(Path(__file__).parent.parent.parent.parent))

from multi_property.core.multi_property_exploiter import (
    MultiPropertyConfig,
    MultiPropertyExploiter,
)
from multi_property.core.property_types import PROPERTY_TYPES, DomainType
from multi_property.datasets.dataset_manager import DatasetManager
from multi_property.prompts.prompt_library import PROMPTLibrary

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def demonstrate_news_copyright_inference():
    """Demonstrate copyright and source inference from news articles."""
    logger.info("ü¶ä Demonstrating news copyright inference...")

    config = MultiPropertyConfig(
        target_properties=["news_source", "copyright_status", "sentiment_bias"],
        property_combinations=[
            ["news_source", "sentiment_bias"],
            ["copyright_status", "temporal_period"],
            ["news_source", "copyright_status", "sentiment_bias"]
        ],
        primary_domain=DomainType.NEWS,
        base_datasets=["cnn_news", "reuters_news"],
        shadow_model_count=6,
        generation_samples=150
    )

    exploiter = MultiPropertyExploiter(config)
    results = await exploiter.execute_multi_property_attack()

    logger.info(f"‚úÖ News copyright inference completed: {results['successful_attacks']}/{results['total_attacks']} successful")
    return results


async def demonstrate_medical_demographic_inference():
    """Demonstrate demographic inference from medical data."""
    logger.info("ü¶ä Demonstrating medical demographic inference...")

    config = MultiPropertyConfig(
        target_properties=["gender_distribution", "age_demographics", "disease_prevalence"],
        property_combinations=[
            ["gender_distribution", "age_demographics"],
            ["disease_prevalence", "specialty_focus"],
            ["gender_distribution", "age_demographics", "disease_prevalence"]
        ],
        primary_domain=DomainType.MEDICAL,
        base_datasets=["medical_qa", "clinical_notes"],
        shadow_model_count=8,
        generation_samples=200
    )

    exploiter = MultiPropertyExploiter(config)
    results = await exploiter.execute_multi_property_attack()

    logger.info(f"‚úÖ Medical demographic inference completed: {results['successful_attacks']}/{results['total_attacks']} successful")
    return results


async def demonstrate_financial_business_inference():
    """Demonstrate business property inference from financial data."""
    logger.info("ü¶ä Demonstrating financial business inference...")

    config = MultiPropertyConfig(
        target_properties=["customer_segment", "industry_focus", "revenue_range"],
        property_combinations=[
            ["customer_segment", "industry_focus"],
            ["industry_focus", "revenue_range"],
            ["customer_segment", "industry_focus", "revenue_range"]
        ],
        primary_domain=DomainType.FINANCIAL,
        base_datasets=["financial_reports"],
        shadow_model_count=6,
        generation_samples=150
    )

    exploiter = MultiPropertyExploiter(config)
    results = await exploiter.execute_multi_property_attack()

    logger.info(f"‚úÖ Financial business inference completed: {results['successful_attacks']}/{results['total_attacks']} successful")
    return results


async def demonstrate_cross_domain_inference():
    """Demonstrate cross-domain property inference."""
    logger.info("ü¶ä Demonstrating cross-domain inference...")

    config = MultiPropertyConfig(
        target_properties=[
            "news_source", "gender_distribution", "industry_focus",
            "compliance_framework", "technical_complexity"
        ],
        property_combinations=[
            ["news_source", "sentiment_bias"],
            ["gender_distribution", "age_demographics"],
            ["industry_focus", "revenue_range"],
            ["compliance_framework", "data_sensitivity"],
            ["technical_complexity", "formality_level"]
        ],
        primary_domain=DomainType.NEWS,
        cross_domain_analysis=True,
        base_datasets=["cnn_news", "medical_qa", "financial_reports", "legal_cases", "technical_docs"],
        shadow_model_count=10,
        generation_samples=300
    )

    exploiter = MultiPropertyExploiter(config)
    results = await exploiter.execute_multi_property_attack()

    logger.info(f"‚úÖ Cross-domain inference completed: {results['successful_attacks']}/{results['total_attacks']} successful")
    return results


async def demonstrate_prompt_library():
    """Demonstrate the PROMPT library capabilities."""
    logger.info("ü¶ä Demonstrating PROMPT library...")

    prompt_lib = PROMPTLibrary()

    # Generate prompts for different domains and strategies
    domains = ["news", "medical", "financial", "legal", "technical"]
    strategies = ["diverse", "focused", "adversarial"]

    for domain in domains:
        for strategy in strategies:
            prompts = prompt_lib.generate_property_prompts(
                ["test_property"], domain, 5, strategy
            )
            logger.info(f"üìù Generated {len(prompts)} {strategy} prompts for {domain} domain")

    # Generate multi-property prompts
    multi_prompts = prompt_lib.generate_multi_property_prompts(
        [["news_source", "sentiment_bias"], ["gender_distribution", "age_demographics"]],
        "news", 3
    )

    for combination, prompts in multi_prompts.items():
        logger.info(f"üìù Generated {len(prompts)} multi-property prompts for {combination}")

    # Get prompt statistics
    stats = prompt_lib.get_prompt_statistics()
    logger.info(f"üìä PROMPT library statistics: {stats}")


async def demonstrate_dataset_manager():
    """Demonstrate the dataset manager capabilities."""
    logger.info("ü¶ä Demonstrating dataset manager...")

    dataset_manager = DatasetManager()

    # Get available datasets
    available_datasets = dataset_manager.get_available_datasets()
    logger.info(f"üìä Available datasets: {len(available_datasets)}")

    for dataset in available_datasets:
        logger.info(f"  - {dataset.name} ({dataset.domain.value}): {dataset.size} samples")

    # Load a sample dataset
    try:
        news_data = dataset_manager.load_dataset("cnn_news", 100)
        logger.info(f"üìä Loaded CNN news dataset: {len(news_data)} samples")

        if news_data:
            sample_keys = list(news_data[0].keys())
            logger.info(f"üìä Sample data keys: {sample_keys}")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Could not load CNN news dataset: {e}")

    # Get dataset statistics
    try:
        stats = dataset_manager.get_dataset_statistics("cnn_news")
        logger.info(f"üìä CNN news dataset statistics: {stats}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Could not get dataset statistics: {e}")


async def demonstrate_property_types():
    """Demonstrate the property types system."""
    logger.info("ü¶ä Demonstrating property types system...")

    # Show available property types
    logger.info(f"üìä Available property types: {len(PROPERTY_TYPES)}")

    for name, prop_type in PROPERTY_TYPES.items():
        logger.info(f"  - {name}: {prop_type.description}")
        logger.info(f"    Domain: {prop_type.domain.value}, Category: {prop_type.category}")
        logger.info(f"    Keywords: {prop_type.keywords[:3]}...")  # Show first 3 keywords

    # Show property combinations
    from multi_property.core.property_types import get_multi_property_combinations
    combinations = get_multi_property_combinations()
    logger.info(f"üìä Available property combinations: {len(combinations)}")

    for i, combination in enumerate(combinations[:5]):  # Show first 5
        logger.info(f"  {i+1}. {combination}")


async def main():
    """Main demonstration function."""
    logger.info("ü¶ä Starting Multi-Property Inference Attack Demonstrations")
    logger.info("=" * 80)

    try:
        # Demonstrate core components
        await demonstrate_property_types()
        logger.info("-" * 40)

        await demonstrate_dataset_manager()
        logger.info("-" * 40)

        await demonstrate_prompt_library()
        logger.info("-" * 40)

        # Demonstrate domain-specific attacks
        await demonstrate_news_copyright_inference()
        logger.info("-" * 40)

        await demonstrate_medical_demographic_inference()
        logger.info("-" * 40)

        await demonstrate_financial_business_inference()
        logger.info("-" * 40)

        # Demonstrate cross-domain attack
        await demonstrate_cross_domain_inference()
        logger.info("-" * 40)

        logger.info("‚úÖ All multi-property inference demonstrations completed successfully!")

    except Exception as e:
        logger.error(f"‚ùå Error in multi-property inference demonstrations: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
